<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Florence 目标体验及设计反思</title>
      <link href="2021/11/16/thinking-of-the-florence/"/>
      <url>2021/11/16/thinking-of-the-florence/</url>
      
        <content type="html"><![CDATA[<h2 id="《Florence》目标体验及设计反思"><a href="#《Florence》目标体验及设计反思" class="headerlink" title="《Florence》目标体验及设计反思"></a>《Florence》目标体验及设计反思</h2><blockquote><p>全文约 4 千字，预计需要 13 分钟阅读。配合背景音乐阅读体验更佳哦 (￣▽￣)”</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=571339489&auto=1&height=66"></iframe><h3 id="游戏概述"><a href="#游戏概述" class="headerlink" title="游戏概述"></a>游戏概述</h3><p>作为一款精简的互动小说类游戏，你将在这短短的三十分钟里和主角一起经历一段平凡、起伏但也温暖的时光。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116172206.png" style="zoom:50%;" /><h3 id="目标、路径、挑战、体验分析"><a href="#目标、路径、挑战、体验分析" class="headerlink" title="目标、路径、挑战、体验分析"></a>目标、路径、挑战、体验分析</h3><p>基于 PC 端的手柄游玩体验，以下将从目标、路径、挑战、体验四个方面对游戏进行整体概述：</p><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><p>即游戏的结束条件：玩家需要跟随主角一起推动故事，直至结局。</p><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><p>即玩家达到目标的手段：玩家需要通过点击按键、操纵遥感等方式进行交互，以推进故事。</p><p>其中涉及的元素包括但不仅限于：</p><ul><li>【按键点击】</li><li>【遥感滑动】</li></ul><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116173140.png" alt="按键点击" style="zoom:70%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116173346.png" alt="遥感滑动" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><h5 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h5><p>即玩家在实现目标的路径中可能碰到的障碍。</p><p>在 Florence 中，也许可以为挑战换一种说法，即任务，或事件。玩家需要在游玩过程中作为主角完成一些事情，从而推进故事的进行。</p><p>其中涉及的事件包括但不仅限于：</p><ul><li>【刷社交媒体】</li><li>【上班】</li><li>【涂色】</li></ul><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116174206.png" alt="刷社交媒体" style="zoom:50%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116174240.png" alt="上班" style="zoom:50%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116174322.png" alt="涂色" style="zoom:50%; align:middle;" border=0></td> </center></tr></table><h5 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h5><p>即期望玩家在游玩时获得的情感体验。<br>在后面部分会展开描述，这里只进行列举：</p><ul><li>轻快</li><li>代入</li><li>温暖</li></ul><h3 id="目标体验反思"><a href="#目标体验反思" class="headerlink" title="目标体验反思"></a>目标体验反思</h3><h4 id="轻快"><a href="#轻快" class="headerlink" title="轻快"></a>轻快</h4><p>何为轻快：玩得没有负担，没有压力。<br>何以轻快：游戏从美学、交互机制和流程设计三方面共同构建了最终的轻快体验。</p><ul><li>美学</li></ul><p>这里提到的美学，主要指的是音乐、画面和色彩。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=571339489&auto=1&height=66"></iframe><p><strong>音乐：</strong> 上面所提供的便是开头呈现的背景音乐，进入游戏后会自动播放。该曲明快的音调能让还未开始正式游玩的玩家一听到音乐就不由自主地放松下来。在故事不断推进的过程中，除冲突部分外，其余部分的音乐都给人一种轻松愉悦的感觉，整体呈现出的音乐营造了一种明快的氛围。</p><p><strong>画面和色彩：</strong> 【开局画面】中 Florence Yeoh（女主）以微笑姿态映入眼帘，头发不停摇曳，给人一种微风拂面的清爽感。而以色彩中代表着光明、积极和温暖的黄色作为主色，也能舒缓玩家游玩时的心绪。在游玩过程中，极简风格的画面和笔触产生了大量留白，结合【局部色彩】的使用来突出画面主体，同时也起到了视线引导的作用。最终构建了玩家没有负担，没有压力的轻快游玩体验。</p><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116172206.png" alt="开局画面" style="zoom:40%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116185109.png" alt="局部色彩" style="zoom:60%; align:middle;" border=0></td> </center></tr></table><ul><li>交互机制</li></ul><p>这里提到的交互机制，主要指的是以手柄操作的【按钮点击】和【遥感滑动】。<br>简单的交互操作既减少了玩家对于操控方式的记忆需求，也减少了玩家需要熟练操作的需要，这些“省下来”的认知资源让玩家可以毫无负担和压力地专注到故事中。</p><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117133727.png" alt="按键点击" style="zoom:70%; align:middle;" border=0></td>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117133802.png" alt="遥感滑动" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><ul><li>流程设计</li></ul><p>这里指的流程设计，主要指的是没有失败和故事简练。</p><p><strong>没有失败：</strong> 通常在进行游戏过程中，难免会遇到因操作失败等因素导致的“非理想结局”，从而产生挫败感。但在游玩 Florence 的时候，这样的挫败感几乎是不存在的，玩家唯一有可能“犯错”的点是在进行【计算】和【工作】时，即使在这样的事件中，其成功难度也是很低的，所以几乎不会出现失败的挫败感。</p><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117134509.png" alt="计算" style="zoom:70%; align:middle;" border=0></td>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117134533.png" alt="工作" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><p>在除此之外的其他游玩过程中，玩家可以随意选择决策顺序，甚至可以选择【放弃决策】，任凭其自由发展。如此设计使得玩家在决策时的心理负担降到最低，从而构建玩家游玩时的轻快体验。</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117134946.png" alt="放弃决策"></p><p><strong>故事简练：</strong> 这里的故事简练指的不仅是游戏总体的游玩时长较短，也体现在其分段化的叙事手法中。游戏中采用了【按事件划分章节】的方式来进行整体情节推进，如此一来，将关卡设计细化为了事件设计，一方面能够很清晰地呈现出游戏整体的起承转合的变化，另一方面也使得玩家能以很快地速度在不觉间就推进了故事的进行，从而构建游戏整体的轻快感。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117135329.png" alt="按事件划分章节" style="zoom: 67%;" /><h4 id="代入"><a href="#代入" class="headerlink" title="代入"></a>代入</h4><blockquote><p>注意：此部分存在明显剧透，请小心食用！</p></blockquote><p>何为代入：体验主角的故事时，也想到了自己。<br>何以代入：游戏主要从整体故事设计，细节设计和美学呈现的角度来构建玩家代入感。</p><ul><li>整体故事设计</li></ul><p>如前所述，Florence 采用按事件划分章节的方式来推进故事，从其章节名其实便可一窥其代入感设计的精髓。游戏中将几个连续的章节归为一幕，但没有为每一幕起名，我将在这里尝试为其命名，便于分析其代入感设计：</p><ul><li>幕一：无聊生活中的回忆之甜和乍见之欢</li><li>幕二：再见，再见，“怦然”相撞的再次相见</li><li>幕三：趁年轻，去探索，去追梦</li><li>幕四：唇齿也会打架，但我们同居啦！</li><li>幕五：生活终将归于平淡，而我们彼此可能也只能陪伴人生中的一段</li><li>幕六：收拾心情再出发，不知道明天的我又会遇见什么颜色呢</li></ul><p>从我蹩脚的文字中也可窥见，这样的故事每天都在发生，而我们自己，可能就是那个故事中的人。特别是在最后一章中，主角 Florence 成功办了画展，其间人来人往，而此时的分镜中出现了【让我无比期待的转身】这样的画面，当时在游玩的我也在不断想“那个当时鼓励我追梦的他会不会突然出现呢”。但是，他最终没有出现，设计者并没有选择呈现完美结局，难免失望，总会释然，生活如此，这样的设计极大地增强了玩家的代入感。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117143703.png" alt="让我无比期待的转身" style="zoom:67%;" /><ul><li>细节设计</li></ul><p>这里的细节设计主要指的是在游玩过程中，一些很细微的用户体验和情节细节。如【叫不醒的闹钟】，【自己不接电话就不断打来的妈妈】，【时光流逝，物是人非】等等，再辅以恰当的手柄震动，这些能够引起玩家共鸣的细节设计极大地增强了玩家的代入感。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117160811.png" alt="叫不醒的闹钟" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117160836.png" alt="自己不接电话就不断打来的妈妈" style="zoom:67%;" /><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117160928.png" alt="时光流逝" style="zoom:70%; align:middle;" border=0></td>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117161018.png" alt="物是人非" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><ul><li>美学呈现</li></ul><p>这里的美学呈现主要指的是色彩和形状的呈现。</p><p><strong>色彩：</strong> 这里的色彩主要指的是游戏中对于色彩的运用：如【枯燥乏味的上班】，【多姿多彩的朋友圈】，【充满想象力的涂色】，【令人气愤的争吵】，【破碎的记忆】以及【对新生活的憧憬】等画面，都用了恰当的色彩来凸显了人物主体，也渲染了相应的氛围，从而最终增强了玩家的代入感。</p><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117150542.png" alt="枯燥乏味的上班" style="zoom:70%; align:middle;" border=0></td>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117150613.png" alt="多姿多彩的朋友圈" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117152116.png" alt="充满想象力的涂色" style="zoom:70%; align:middle;" border=0></td>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117152202.png" alt="令人气愤的争吵" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117152249.png" alt="破碎的记忆" style="zoom:70%; align:middle;" border=0></td>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117152408.png" alt="对新生活的憧憬" style="zoom:70%; align:middle;" border=0></td> </center></tr></table><p><strong>形状：</strong> 这里的形状主要指的是游戏中对于特定场景下的形状的运用。特别让人印象深刻的是【争吵升温】这一画面中，将二人的对话转化为了拼图，而且在升温过程中，拼图的形状由一开始的【圆滑】，变得【有棱角】，最后甚至变得【尖锐】，这一非常优秀的设计让人眼前一亮，很好地增强了玩家的代入感。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117155959.png" alt="圆滑" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117160037.png" alt="棱角" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117160144.png" alt="尖锐" style="zoom:67%;" /><h4 id="温暖"><a href="#温暖" class="headerlink" title="温暖"></a>温暖</h4><p>何为温暖：在最终游玩结束之后，会心一笑，心中微暖。<br>何以温暖：游戏主要从情节设计，交互节奏和美学呈现的角度为玩家营造温暖感。</p><ul><li>情节设计</li></ul><p>如前所述，游戏最终并没有给玩家呈现一种完美结局，主角 Florence 也并不是如超人一般，受到打击之后能立马释怀，放步前行。她也经历了任何普通如你我的人都会经历的痛苦与迷茫，通过旅行来放空自我。但她并没有停步于此，她最终走出来了，重新积攒了力量，重新拾起画笔，做自己想做的事，【在乎身边的人】，努力向前。所谓“不完美”的结局也正是生活的常态，这样的情节设计最终也予人以温暖和希望。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117161813.png" alt="在乎身边的人" style="zoom:67%;" /><ul><li>交互节奏</li></ul><p>这里的交互节奏指的是游戏中的交互方式和交互频率。玩家在游玩过程中大可以不紧不慢地轻轻点击，【慢慢滑动】，而不用担心错过什么，或做错什么，这样舒缓的交互节奏最终给玩家营造了温暖的游玩体验。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117162220.png" alt="慢慢滑动" style="zoom:67%;" /><ul><li>美学呈现</li></ul><p>这里的美学呈现主要指的是色彩和音乐。<br>出去特殊的争吵场景外，游戏整体以低对比度的【温暖色系】来进行画面着色，如此设计使得玩家在游玩过程中始终能以舒缓的心情来进行游戏。此外，再搭配游戏出色的配乐，最终予人以温暖。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117162626.png" alt="温暖色系" style="zoom:67%;" /><p>以上对游戏的目标体验及其设计进行了一些反思，下面会对其他的一些出彩设计进行分析和反思。</p><h3 id="其余出彩设计分析与反思"><a href="#其余出彩设计分析与反思" class="headerlink" title="其余出彩设计分析与反思"></a>其余出彩设计分析与反思</h3><p>以下部分的分析与反思主要设计交互机制，美学呈现等方面。</p><h4 id="交互机制"><a href="#交互机制" class="headerlink" title="交互机制"></a>交互机制</h4><ul><li>【形象有趣的聚焦方式】</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117165710.png" alt="形象有趣的聚焦方式" style="zoom:67%;" /><p>如图所示，这里采用了可左右调整的不同的聚焦尺来模拟摔倒之后重新聚焦的这一过程，既表现了看见中意的人时因为小鹿乱撞而跌得七荤八素的狼狈，又很好地为双方交换了联系方式这一情节做了铺垫，十分形象有趣。</p><p>延伸思考：在未来，如果可能的话，在跌倒之后使双摇杆随机晃动，以模拟被摔得七荤八素的感觉，而玩家需要努力将其恢复到“平静”状态，从而模拟努力按住头来重新聚焦的过程，这样的交互方式应该也很有趣！</p><ul><li>【摇晃拍立得！】</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117171417.png" alt="摇晃拍立得！" style="zoom:67%;" /><p>如图所示，设计者需要玩家在点开相片后通过晃动摇杆来模拟现实中人们真实的甩底片动作，确实很有意思。</p><p>延伸思考：在这里其实可以考虑引入手柄体感机制，让玩家真正地甩起来！<br>题外话：甩底片这一操作其实源自早期的老式拍立得时期，当时拍完之后需要将附有显像药剂的纸材快速与底片分离，通过甩动可以让药剂快速边干，但随着技术的发展和进步，现在的拍立得所拍出的照片其实已经可以不用甩啦，用力过猛甚至有可能会出现显像错误哦！（不过轻轻甩底片的动作也确实别有一番趣味(￣▽￣)”）</p><ul><li>【不进则退】</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117172810.png" alt="不进则退" style="zoom:67%;" /><p>如图所示，这里需要玩家不断点击，以模拟不断向前推男主人公的动作。有趣的是如果在推了一半的时候不再继续点击，男主人公就会不断退缩回到原地，这样的设计十分真实的同时也让我们切实体会到了有人能在这时推自己一把是多么不容易而又令人温暖的事情。</p><p>延伸思考：在这里的反馈呈现其实是不变的，也就是说玩家每次按键能够推动的距离是一定的，也许可以为其引入非线性的反馈机制，即一开始的时候一次按键点击就能推动很多，但越往后越难推动，临门一脚的时候需要玩家更努力地来进行点击才能最终实现鼓励男主人公报名的目的，如果在前面鼓励的时候中途放弃了，下一次重新鼓励的时候的阻力就会更大。这样的设计也许能让玩家最终实现目标的时候有更强的获得感和成就感。</p><h4 id="美学呈现"><a href="#美学呈现" class="headerlink" title="美学呈现"></a>美学呈现</h4><ul><li>【以色彩进行画面引导】</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117165418.png" alt="以色彩进行画面引导" style="zoom:67%;" /><p>如图所示，这里采用了显式的音符及音乐流向来引导玩家向前，十分自然。</p><p>延伸思考：这里让我想到的其实是好奇心、探索欲以及有限操作空间下的强制性选择。设计师采用了局部色彩的方式来突出了主体与可交互性，当画面出现如此抓眼的元素时玩家会不自主地想要进行探索，但凡事有例外，这里的交互空间有限，玩家能做的只有向右前进这一个选项，这里并不是想要反驳设计师对于操作空间的限制，因为有时确实需要做这样的决策以让玩家推进，只是一个题外话，如何在放开交互可能性的情况下更好地让玩家“正常推进”，特别对于线性叙事类游戏而言，这可能是一个需要关注的点。</p><ul><li>以色彩和形状反映心情</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117175435.png" alt="组织语言" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117175404.png" alt="相谈甚欢" style="zoom:67%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211117175958.png" alt="激烈争吵" style="zoom:67%;" /><p>如图所示，在前两个图中，设计师很好地用恰当的颜色和形状很好地反映了恋爱开始时仔细组织语言的小心翼翼，到相恋之时相谈甚欢的不谋而合。前面的颜色温暖而含蓄，后面的颜色温馨而幸福；前面的形状多样且需要多次拼接，后面的形状彼此相配，且拖拽一个时，另一个也会自然靠近。色彩、形状、再辅以恰当的交互，很好地体现了主角，甚至是玩家当时的心境。<br>而在最后的图中，刺眼的红色以及都不用再组织的语言让人也直观感受到了争吵之时的激烈与口不择言，不断变快的话语速度也反映了二人心中激荡的情绪。真实，而又心疼。</p><p>延伸思考：又是一个题外延伸，有没有可能，未来可以结合音频输入设备来进行交互呢？这里指的并不是真的让玩家参与到争吵当中（当然了也不失为一种选择 (￣▽￣)”），而是识别玩家声音中的情绪，从而让画面产生相应的一些变化，包括玩家发声的频次，音调等，都以另一种方式来组成了主角的语言。（甚至能延伸出“骂爽 TA”的奇怪玩法哈哈…）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综上，本文从目标、路径、挑战、体验的角度对游戏《Florence》进行了整体分析，而后又对游戏轻快、代入、和温暖的目标体验进行了反思，最后对游戏中其余的出彩设计进行了分析和反思。</p><p>总的而言，如概述中所言，这是一个平凡、起伏而又温暖的故事。<br>感谢您的阅读，欢迎大家到原文中评论，虚心接受大家的批评指正！</p>]]></content>
      
      
      <categories>
          
          <category> Study-Game-Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash Heroes 目标体验思考及设计反思</title>
      <link href="2021/11/06/thinking-of-the-clash-heroes/"/>
      <url>2021/11/06/thinking-of-the-clash-heroes/</url>
      
        <content type="html"><![CDATA[<h3 id="视频展示"><a href="#视频展示" class="headerlink" title="视频展示"></a>视频展示</h3><p>不知道为何 Youtube 的视频无法在这里嵌套展示，所以在这里提供视频传送门：<a href="https://youtube.com/clip/UgkxFq-TIaDR8SPzRPFo4lYH-Tv9vCs9dWsH">点击访问视频</a></p><h3 id="Gif-展示"><a href="#Gif-展示" class="headerlink" title="Gif 展示"></a>Gif 展示</h3><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/冲撞技能与地形的交互.gif" alt="冲撞技能与地形的交互" style="zoom: 33%; text-align: center; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/InteractiveObject.gif" alt="可交互道具" style="zoom: 50%; text-align: center; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/interactiveTerrain.gif" alt="可交互地形" style="zoom:33%; align:middle;" border=0></td> </center></tr></table><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/fight.gif" alt="战斗场景" style="zoom:33%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/object collection.gif" alt="物品拾取" style="zoom:33%; align:middle;" border=0></td>         <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/貌似 BOSS 战斗.gif" alt="精英怪物" style="zoom:33%; align:middle;" border=0></td> </center></tr></table><h2 id="《Clash-Heroes》目标体验思考及设计反思"><a href="#《Clash-Heroes》目标体验思考及设计反思" class="headerlink" title="《Clash Heroes》目标体验思考及设计反思"></a>《Clash Heroes》目标体验思考及设计反思</h2><h3 id="游戏概述"><a href="#游戏概述" class="headerlink" title="游戏概述"></a>游戏概述</h3><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/cooperation.gif"></p><p>从目前放出的一些预览视频来看，《Clash Heroes》 是一款合作类的角色扮演闯关手游，玩家将以俯视角操纵英雄进行实时游玩。每个游戏角色都有独立的角色特性和技能。</p><h4 id="目标、路径、挑战、体验分析"><a href="#目标、路径、挑战、体验分析" class="headerlink" title="目标、路径、挑战、体验分析"></a>目标、路径、挑战、体验分析</h4><p>基于视频，以下将从目标、路径、挑战、体验四个方面对游戏进行整体设想：</p><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><p>即游戏的结束条件：玩家需要带领角色冲破重重关卡，直至通关</p><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><p>即玩家达到目标的手段：玩家需要通过不断杀敌，从而不断向前。<br>其中涉及的元素有：</p><ul><li><p>杀敌</p></li><li><p>收集</p><table><tr> <center>  <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/object collection.gif" alt="掉落资源收集" style="zoom:45%; align:middle;" border=0></td>   <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/fight.gif" alt="场景（右上方）宝箱收集" style="zoom:45%; align:middle;" border=0></td> </center></tr></table></li><li><p>场景道具交互</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/InteractiveObject.gif" style="zoom:60%;" /></li><li><p>地形交互</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/interactiveTerrain.gif" style="zoom:30%;" /></li></ul><h5 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h5><p>即玩家在实现目标的路径中可能碰到的障碍。<br>目前视频中所反映出的障碍基本有以下几种：</p><ol><li>怪物障碍：即通关过程中会不断遭遇的怪物<br>怪物类型：</li></ol><ul><li>普通怪物<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/fight.gif" style="zoom: 30%;" /></li><li>精英怪物<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/貌似 BOSS 战斗.gif" style="zoom:30%;" /></li><li>BOSS<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/Boss.gif" style="zoom:70%;" /></li></ul><ol start="2"><li>陷阱/建筑障碍：即会对玩家造成直接或间接伤害的地图陷阱/建筑<br>陷阱/建筑类型：</li></ol><ul><li>防御塔：如下图 Gif 中出现的会对角色进行攻击的防御塔</li><li>兵工厂：如下图 Gif 中右上角出现的会不断产生新怪物的兵工厂<table><tr> <center>  <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterArrow.gif" alt="防御塔" style="zoom: 80%; align:middle;" border=0></td>   <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterWorrior.gif" alt="兵工厂" style="zoom:80%; align:middle;" border=0></td> </center></tr></table></li></ul><ol start="3"><li>地形障碍：即通关过程中需要跨越地形<br>地形类型：沟壑 - 需要借助地形交互<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/interactiveTerrain.gif" style="zoom:40%;" /></li></ol><h5 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h5><p>即期望玩家在游玩时获得的情感体验。<br>在后面部分会展开描述，这里只进行列举：</p><ul><li>爽快感</li><li>合作感</li><li>策略感</li></ul><h3 id="目标体验反思"><a href="#目标体验反思" class="headerlink" title="目标体验反思"></a>目标体验反思</h3><h4 id="爽快感"><a href="#爽快感" class="headerlink" title="爽快感"></a>爽快感</h4><p>爽快感解析：换言之我觉得也可以称之为顺畅感、割草感<br>爽快感实现方式：</p><ol><li>系统角度</li></ol><ul><li><p>操作简单：采用了市面通行的左右摇杆机制，让玩家几乎没有学习和适应成本</p></li><li><p>攻击机制简单：每个角色只有一个普攻按键和一个技能按键</p></li><li><p>怒气积累机制直观：角色每次成功攻击都能积累一档怒气（即生命条下方的紫色状态条），当怒气集满之后不同角色会有独特的状态：</p><ul><li><p>战士是会进入狂暴状态，应该是能得到攻击加成</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/Boss.gif" alt="战士" style="zoom:70%;" /></li><li><p>弓箭手和炸弹师都是能在下次普攻时自动发动一次强力攻击</p><table><tr> <center>  <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterArrow2.gif" alt="弓箭手" style="zoom:70%; align:middle;" border=0></td>   <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterbomb.gif" alt="炸弹师" style="zoom:70%; align:middle;" border=0></td> </center></tr></table></li><li><p>自动选择攻击单位（参见上方炸弹师 Gif）：在进行普通攻击时，玩家不需要选择供给单位，系统会自动选择离自己最近的敌方单位进行攻击</p></li><li><p>技能方向选择简单（参见上方炸弹师 Gif）：对于需要选择攻击方向的技能，采用了以玩家自身为锚点的方式，玩家只需要根据按钮方向对攻击方向进行选择</p></li></ul></li><li><p>交互机制简单</p><ul><li>攻击即可触发道具交互<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/InteractiveObject.gif" style="zoom: 60%;" /></li><li>移动到特殊地形即可触发地形交互<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/interactiveTerrain.gif" style="zoom:40%;" /></li><li>移动到一定范围内即可对掉落物进行自动收集<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/objectCollection.gif" style="zoom:40%;" /></li></ul></li></ul><ol start="2"><li>UX 角度</li></ol><ul><li>美学呈现（以视觉举例）<ul><li>卡通风格简明：卡通风格既能保证战斗体验，也不会耗费玩家太多的注意力资源</li><li>攻击飘字颜色简单：如图所示，目前的飘字一共有两种，己方造成的伤害是白色，敌方造成的伤害是红色，这样的飘字呈现方式简单直白  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/fight.gif" style="zoom:40%;" /></li><li>范围呈现明显：无论是敌方的攻击范围，还是所控制角色的技能释放范围，都有很明显的视觉辅助，从而能让玩家产生爽快的战斗体验  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/Boss.gif" style="zoom:80%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterbomb.gif" style="zoom:80%;" /></li></ul></li><li>即时交互：即时交互机制能让玩家很容易进入全神贯注的心流状态</li></ul><h4 id="合作感"><a href="#合作感" class="headerlink" title="合作感"></a>合作感</h4><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/coop.gif" alt="合作杀敌"></p><p>合作感解析：即需要与玩家配合杀敌通关<br>合作感实现：在所展示的 Gif 中，不同玩家操纵着不同角色在同一地图中共同作战，但从目前放出的资料来看，合作感还有待加强，本文后续部分也会再次提到这部分内容。</p><h4 id="策略感"><a href="#策略感" class="headerlink" title="策略感"></a>策略感</h4><p>策略感解析：这里的策略感指的是玩家可以以多种方式进行游玩和参与到游戏中<br>策略感实现：</p><ol><li>角色设计<br>如图所示，目前放出的视频中一共有三种角色，我称之为战士，弓箭手和炸弹师。<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/Boss.gif" alt="战士" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterArrow2.gif" alt="弓箭手" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterbomb.gif" alt="炸弹师" style="zoom:80%;" /></li></ol><p>据称还会有更多职业放出，多样化的职业为玩家提供了更多的游玩可能性<br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characters.jpg" alt="角色造型" style="zoom: 33%;" /></p><ol start="2"><li><p>可交互地形设计<br>如图所示，目前的除了有可交互的特殊区域可以帮助进行地形跨越外，还增加了令人眼前一亮的技能与地形的交互，这样的交互可能性会极大增强可玩性和策略性（但想必实现难度不低，BUG 也会很多哈哈）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/interactiveTerrain.gif" alt="可交互地形" style="zoom:40%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/冲撞技能与地形的交互.gif" alt="技能与地形的交互" style="zoom:40%;" /></li><li><p>道具设计<br>如图所示，目前放出的视频中，地图中也有可供玩家交互的道具，这些道具的出现势必会丰富玩家的策略空间</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/InteractiveObject.gif" alt="可交互道具" style="zoom: 67%;" /></li></ol><p>以上对目前所放出的视频中的目标体验进行了一些反思，下面我会对未来可能的一些设计方向提出一些自己的思考。</p><h3 id="对未来可能的设计方向的思考"><a href="#对未来可能的设计方向的思考" class="headerlink" title="对未来可能的设计方向的思考"></a>对未来可能的设计方向的思考</h3><p>以下将从战斗、养成、社交的经典三元素出发，对未来可能的设计方向进行一些思考。</p><h4 id="战斗"><a href="#战斗" class="headerlink" title="战斗"></a>战斗</h4><ol><li>丰富战斗交互空间<br>这里的战斗交互空间主要指的是玩家的可操作空间。丰富战斗交互空间可以增强玩家【策略感】。<br>目前只为玩家提供了普通攻击、怒气攻击和一个技能，玩家可操作空间较少，所以也许可以考虑以下的几种方式丰富战斗交互空间：</li></ol><ul><li>丰富技能<ul><li>即为各个角色增加更多的技能选项</li></ul></li><li>丰富攻击方式<ul><li>其中一种丰富攻击方式的方法是引入武器系统，并且为每种武器赋予独特的攻击方式和技能系统</li></ul></li><li>丰富攻击属性<br>  从下面的图中我们可以看到目前已经拥有冰属性和雷属性的攻击，在未来也许可以考虑以下的方式来丰富攻击属性：<ul><li>武器附魔</li><li>利用不同的技能/道具状态改变攻击属性<table><tr> <center>  <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterArrow2.gif" alt="冰属性攻击" style="zoom:80%; align:middle;" border=0></td>   <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/cooperation.gif" alt="雷属性攻击" style="zoom:80%; align:middle;" border=0></td> </center></tr></table></li></ul></li></ul><ol start="2"><li>丰富场景道具<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/InteractiveObject.gif" alt="可交互道具" style="zoom:67%;" />如上所示，目前已经有可供交互的道具，未来也许可以考虑以下的方式来丰富场景道具：</li></ol><ul><li>丰富道具功能<ul><li>如交互后可为角色带来不同的状态改变：<ul><li>生命恢复</li><li>攻击提升</li><li>攻击属性授予</li><li>防御提升</li><li>一段时间内不消耗怒气等</li></ul></li></ul></li><li>丰富道具属性<ul><li>图中所示的为一次性交互道具，也许可以考虑为其增加可重复使用的可携带道具，可设计为同账号不同角色间通用道具，也可为不同角色设计专属道具，如为弓箭手角色设计专属道具【翎羽】，效果为可几率触发普攻连发等。</li></ul></li></ul><ol start="3"><li>丰富视觉效果<br>这里的视觉效果主要指场景中的可见元素的效果。丰富视觉效果可以增强玩家战斗【爽快感】。</li></ol><ul><li>丰富飘字效果<ul><li>目前放出的版本中只有两种飘字，即己方伤害为白色，敌方伤害为红色，未来可丰富飘字效果，如暴击则飘字为黄色等。</li></ul></li></ul><ol start="4"><li>丰富职业/角色<br>目前已经放出的角色有三种，我称之为战士、弓箭手和炸弹师，未来可考虑对角色进行丰富。丰富角色可以增强玩家【策略感】。<br>也许可以考虑增加以下职业/角色：</li></ol><ul><li>召唤师：可召唤宝宝辅助进行战斗</li><li>陷阱师：可设置陷阱诱捕敌人/对敌人造成伤害</li><li>工程师：可建造炮塔等设施辅助进行战斗</li><li>法师：可利用强大的法术进行战斗</li><li>诅咒师：可利用诅咒辅助进行战斗，如施加负面效果或造成伤害</li><li>盗贼：如拥有隐身和背刺等技能，背后攻击会有攻击加成</li><li>狼人：可拥有变身技能，变身后提供状态加成，且攻击方式、攻击技能改变</li><li>魅惑师：可利用魅惑技能让敌方单位反为己用等</li></ul><ol start="5"><li><p>丰富地形的同时提供反悔的选项，此举可以增强玩家【爽快感】。<br>如图所示，当前版本为玩家提供了地形交互选项，我想到的是可能还得为玩家提供反悔的选择，如设置为可返回前一地形，或者添加位移技能，防止出现玩家想要返回前一地形却无计可施，从而产生挫败感的情况。</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/interactiveTerrain.gif" alt="可交互地形" style="zoom: 40%;" /></li><li><p>丰富玩法<br>这里的玩法主要指的是游戏中的各种交互机制，玩法的丰富可以增加玩家的【策略感】。<br>可以考虑如下的方式来丰富玩法：</p></li></ol><ul><li>增加解密元素：目前放出的资料中基本只涉及战斗，所以可以考虑增加解谜元素以丰富玩法，同时不断给玩家带来新鲜感。</li><li>引入天气系统：目前放出的资料中并不涉及天气系统，所以可以考虑增加天气系统，并且将其与战斗系统挂钩，如雨天环境下，雷属性攻击的范围变大，且攻击力变强等。</li><li>引入时间系统：目前放出的资料中并不涉及时间系统，所以可以考虑增加时间系统，并且将其与战斗系统挂钩，如黑夜环境下，玩家视野变小，但也更不容易被敌人发现；其上所提到的狼人角色，其在黑夜状态下的变身时间会延长等。</li></ul><h4 id="养成"><a href="#养成" class="headerlink" title="养成"></a>养成</h4><p>即丰富养成空间：这里的养成空间主要指的是可让角色提升的方方面面，养成空间的丰富可以增强玩家的【策略感】。<br>目前所体现的角色变化只有怒气值的变化：<br>虽然怒气集满后可持续时间增长了，但是积累所需的攻击次数也变多了，如此使得养成系统的体现并不明显，也会降低玩家提升的动力。<br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/fight.gif" alt="三档怒气" style="zoom: 40%;" /><br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/characterWorrior.gif" alt="五档怒气" style="zoom: 80%;" /></p><p>目前资料中还体现了收集元素，应该也是服务于养成系统的：<br>    <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/object collection.gif" alt="掉落元素收集" style="zoom:40%;" /></p><p>可以考虑如下的方式来丰富养成空间：</p><ol><li>个人养成</li></ol><ul><li>属性养成：这里的属性养成指的是各个角色自身的属性，如可以对角色的以下属性进行提升：<ul><li>攻击力</li><li>防御力</li><li>暴击率</li><li>攻击属性</li><li>耐性：用于抵抗倒地等</li></ul></li><li>技能/熟练度养成：玩家在不断使用技能过程中，也许可以考虑为技能引入熟练度，从而对技能达到以下效果的提升：<ul><li>攻击力</li><li>攻击范围</li><li>冷却速率等</li></ul></li><li>装备养成：这里的装备指的是可以对玩家属性造成影响的装备</li><li>装饰养成：这里的装饰指的是不会对玩家属性造成影响，只会影响角色外观的装备</li></ul><ol start="2"><li>道具养成：这里的道具养成指的是对玩家在游戏中可交互道具的养成，如</li></ol><ul><li>增加道具增益状态的持续时间</li><li>增加道具效果等</li></ul><h4 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h4><p>即丰富社交空间：这里的社交空间指的是游戏中需要与其他玩家共同达成的事件，社交空间的丰富可以增强玩家【合作感】。<br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/cooperation.gif" alt="合作作战"></p><p>如图所示，个人认为目前版本中玩家之间的合作感还不强，只是各自为战，未来也许可以考虑如下的方式来丰富社交空间：</p><ul><li>增加合作任务：可以考虑增加合作任务，并为合作任务设置奖励加成甚至是专属奖励（如只有在合作模式下才有几率掉落）</li><li>增加合击技：可以考虑为不同职业之间增加合击技，或者是为不同攻击属性之间增加交互可能性，如火属性攻击和水属性攻击会互相减弱伤害，但先施加水属性攻击后施加雷属性攻击会带来伤害加成等。</li></ul><p>以上是基于战斗、养成、社交角度对未来可能的设计方向的一些思考，但需要明确的是在未来的设计中还是要围绕目标体验出发，达到合理的取舍与平衡。</p><h2 id="《Clash-Heroes》官方网站"><a href="#《Clash-Heroes》官方网站" class="headerlink" title="《Clash Heroes》官方网站"></a>《Clash Heroes》官方网站</h2><p><a href="https://clash.com/en">Clash</a></p>]]></content>
      
      
      <categories>
          
          <category> Study-Game-Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喝酒游戏列举与思考</title>
      <link href="2021/11/02/drinking-games/"/>
      <url>2021/11/02/drinking-games/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><span id="jump"></span></p><p>最近在看《游戏设计、原型与开发》一书，第一章中提到了对一个牌类游戏 Bartok 进行规则更改以达到不同的游玩体验一事，于是想到了可以把平时在玩喝酒游戏时的一些“突发奇想”也记录在此，同时也算是锻炼自己的游戏设计思维，遂有此文。</p><h2 id="喝酒游戏列举（及可能的设计反思）"><a href="#喝酒游戏列举（及可能的设计反思）" class="headerlink" title="喝酒游戏列举（及可能的设计反思）"></a>喝酒游戏列举（及可能的设计反思）</h2><p>虽然说是喝酒游戏，但其实也可以用于平时打发时间，以下会列举一些我所知的此类游戏，也会从更改目标游戏体验的角度出发，对部分游戏提出一些设计反思。</p><h3 id="1-Bartok"><a href="#1-Bartok" class="headerlink" title="1. Bartok"></a>1. Bartok</h3><p>这便是在【背景】中所提到的牌类游戏。</p><h4 id="1-1-规则列举"><a href="#1-1-规则列举" class="headerlink" title="1.1 规则列举"></a>1.1 规则列举</h4><ul><li>游戏目标<ul><li>第一个出完手牌的玩家获胜</li></ul></li><li>游戏规则<ul><li>一副标准扑克牌，去掉大小王，剩余 52 张</li><li>洗牌后向每个玩家发牌 7 张</li><li>其余牌反扣作为抽牌堆</li><li>从抽牌堆顶上抽牌，明牌，作为弃牌堆</li><li>玩家顺时针参与游戏，如果可以出牌，必须出一张牌到弃牌堆，若不能出，必须从抽牌堆抽取一张牌加入手牌</li><li>出牌规则：玩家的手牌若与当前明牌满足如下关系，则可以出一张牌：<ul><li>花色一致</li><li>数字一致</li></ul></li><li>第一个出完手牌的获胜</li></ul></li></ul><h4 id="1-2-Demo-体验"><a href="#1-2-Demo-体验" class="headerlink" title="1.2 Demo 体验"></a>1.2 Demo 体验</h4><p>该 Demo 来自 <a href="https://book.prototools.net/">Introduction to Game Design, Prototyping, and Development</a> 一书的官方网站，点击<a href="https://book.prototools.net/BartokWebBuild/BartokWebBuild.html">跳转进行体验</a>。</p><h3 id="2-21-点半买牌"><a href="#2-21-点半买牌" class="headerlink" title="2. 21 点半买牌"></a>2. 21 点半买牌</h3><h4 id="2-1-原始规则列举"><a href="#2-1-原始规则列举" class="headerlink" title="2.1 原始规则列举"></a>2.1 原始规则列举</h4><ul><li>游戏目标<ul><li>第一个将手牌凑齐 21 点半的玩家胜出</li></ul></li><li>游戏规则<ul><li>一副标准扑克牌，共 54 张牌<ul><li>其中 A<del>10 分别代表数字 1</del>10，共 40 张</li><li>J，Q，K，以及大小王都代表数字 0.5，共 14 张</li></ul></li><li>洗牌后将所有牌都作为抽牌堆</li><li>从抽牌堆顶上抽牌进行明牌公示，每次抽一张</li><li>以拍卖形式对当前明牌进行拍卖，玩家以任意顺序参与喊价，筹码自定（如酒）<ul><li>价高者支付筹码（如喝掉喊出量的酒），并获得当前明牌</li></ul></li><li>第一个凑齐 21 点半的玩家胜出，其余玩家都需要支付一定筹码</li></ul></li></ul><h4 id="2-2-规则反思与迭代-增加未知性"><a href="#2-2-规则反思与迭代-增加未知性" class="headerlink" title="2.2 规则反思与迭代 - 增加未知性"></a>2.2 规则反思与迭代 - 增加未知性</h4><p>在原始规则条件下，所有玩家的当前点数都是公示的，导致游戏缺少了未知性与刺激性，玩家能直接知道其余玩家还需多少点数才能胜利。</p><p>基于此，添加一条新的规则：<br>为每位玩家都添加一张其余人不可见的初始手牌</p><p>引入此规则后，参与者只能看到其余玩家场上的明牌点数，但并不能直接知道玩家还需多少点数才能胜利，从而增加了未知性和可玩性。</p><p>当前完整规则如下：</p><ul><li>一副标准扑克牌，共 54 张牌<ul><li>其中 A-10 分别代表数字 1-10，共 40 张</li><li>J，Q，K，以及大小王都代表数字 0.5，共 14 张</li></ul></li><li>洗牌后向每位玩家发牌 1 张</li><li>将其余牌都作为抽牌堆</li><li>从抽牌堆顶上抽牌进行明牌公示，每次抽一张</li><li>以拍卖形式对当前明牌进行拍卖，玩家以任意顺序参与喊价，筹码自定（如酒）<ul><li>价高者支付筹码（如喝掉喊出量的酒），并获得当前明牌</li></ul></li><li>第一个凑齐 21 点半的玩家胜出，其余玩家都需要支付一定筹码</li></ul><h4 id="2-3-规则反思与迭代-增加随机性与不可控性"><a href="#2-3-规则反思与迭代-增加随机性与不可控性" class="headerlink" title="2.3 规则反思与迭代 - 增加随机性与不可控性"></a>2.3 规则反思与迭代 - 增加随机性与不可控性</h4><p>在【2.2】版本的基础上，是否还可以增加一些随机性与不可控性呢？<br>基于此，添加一条新的规则：</p><ul><li>为参与者分配号数，在当前轮次拍卖结束后，从抽牌堆中抽出 1 张牌，若颜色为红色，则拍卖者成功获取当前拍卖牌，若颜色为黑色，则从包含参与者号数中的号数牌堆中抽出一张，将当前拍卖牌给予相应号数的玩家</li></ul><p>此规则的引入增加了游戏的随机性与不可控性，若是想要获取当前明牌就需要参与拍卖，但即使价格最高，支付了筹码，最终也有可能无法获取当前明牌，而为他人作嫁衣裳，或是为其他玩家制造“飞来横祸”，从而输掉游戏。</p><hr><h2 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h2><ul><li>待列举游戏<ul><li>青蛙跳水</li><li>瞄炮</li><li>柳树</li><li>十五的月亮十六圆</li><li>捞腌菜</li><li>牛肉面刀削面直升机</li><li>金字塔</li><li>游戏牌</li><li>七上八下</li><li>梦幻 3P</li><li>干瞪眼</li><li>斗牛</li><li>抢数字</li></ul></li><li>未来计划<ul><li>也许以后可以把这篇帖子的内容汇总成为一个喝酒游戏推荐软件，根据用户所需的游戏性、参与度、运气所占比例等指标为其推荐合适的喝酒游戏，谁知道呢 (￣▽￣)”</li></ul></li></ul><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>封面图片由 Noémie Cauchon](<a href="https://unsplash.com/@no_noe?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">https://unsplash.com/@no_noe?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText</a>) 拍摄，取自 <a href="https://unsplash.com/">Unsplash</a></p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>For Love Demo 展示及分析</title>
      <link href="2021/10/26/for-love-demo-showcase-and-analysis/"/>
      <url>2021/10/26/for-love-demo-showcase-and-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="《For-Love》Demo-展示"><a href="#《For-Love》Demo-展示" class="headerlink" title="《For Love》Demo 展示"></a>《For Love》Demo 展示</h2><h3 id="视频展示"><a href="#视频展示" class="headerlink" title="视频展示"></a>视频展示</h3><video width="480" height="270" controls>  <source src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/ForLoveCompression.mp4" type="video/mp4"></video><h3 id="截图展示"><a href="#截图展示" class="headerlink" title="截图展示"></a>截图展示</h3><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211026223000.png" alt="开始画面" style="zoom: 33%; text-align: center; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211026223154.png" alt="蓄力" style="zoom:33%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211026223222.png" alt="发射" style="zoom:33%; align:middle;" border=0></td> </center></tr></table><table><tr> <center>    <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211026223248.png" alt="通过点击进行避障" style="zoom:33%; align:middle;" border=0></td>     <td><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211026223333.png" alt="通关" style="zoom:33%; align:middle;" border=0></td> </center></tr></table><h2 id="《For-Love》Demo-设计思路分析"><a href="#《For-Love》Demo-设计思路分析" class="headerlink" title="《For Love》Demo 设计思路分析"></a>《For Love》Demo 设计思路分析</h2><h3 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h3><p>此次 Gamejam 的关键词为 Transmission，头脑风暴后后最终将立意确定为【生命的传递】，基于此将游戏故事定为了对<strong>受孕过程的模拟</strong>，最终其实也希望玩家能在游玩之后体会到生命诞生的不易与伟大。</p><h3 id="游戏整体说明"><a href="#游戏整体说明" class="headerlink" title="游戏整体说明"></a>游戏整体说明</h3><p>以下将从目标、路径、挑战、体验四个方面对游戏进行整体说明：</p><ul><li>目标<ul><li>即游戏的结束条件</li><li>玩家需要通过操作，操纵尽可能多的生命体规避障碍，到达终点</li></ul></li><li>路径<ul><li>即玩家达到目标的手段</li><li>玩家需要通过不断点击屏幕产生反向推力，从而推动生命体不断向前</li></ul></li><li>挑战<ul><li>即玩家在实现目标的路径中可能碰到的障碍</li><li>游戏中设计的障碍结合受孕生理背景共有以下几种：<ul><li>屏幕滚动<ul><li>说明<ul><li>即屏幕会自动向上滚动，超出屏幕范围内的生命体便会消失</li></ul></li><li>寓意<ul><li>想要孕育新的生命需要不断向上，停滞便会被淘汰</li></ul></li></ul></li><li>边界<ul><li>说明<ul><li>生命体碰到边界便会消失</li></ul></li><li>寓意<ul><li>模仿子宫壁，若是生命体在不恰当的位置停留，便会被淘汰<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211027132838.png" alt="子宫壁" style="zoom:67%;" /></li></ul></li></ul></li><li>隔断<ul><li>说明<ul><li>即路径中可能出现的粉色阻隔，生命体碰到便会消失</li></ul></li><li>寓意<ul><li>用绒毛的形象代替受孕生理过程中的阻碍，生命体若碰到便会消失<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211027131926.png" alt="地图中随机生成的绒毛" style="zoom:80%;" /></li></ul></li></ul></li><li>掉落物<ul><li>说明<ul><li>即路径中可能掉落的白色球状物，生命体碰到便会消失</li></ul></li><li>寓意<ul><li>模仿白细胞，若是生命体碰到便会消失<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211027132940.png" alt="随机掉落的白细胞" style="zoom:80%;" /></li></ul></li></ul></li></ul></li></ul></li><li>体验<ul><li>即期望玩家在游玩时获得的情感体验</li><li>在后面部分会展开描述，这里只进行列举<ul><li>生命诞生的不易</li><li>生命诞生的伟大</li><li>恍然大悟</li></ul></li></ul></li></ul><h3 id="目标体验分析"><a href="#目标体验分析" class="headerlink" title="目标体验分析"></a>目标体验分析</h3><p>前面提到了期望玩家能在游玩时获得的目标体验为生命诞生的不易和生命诞生的伟大，以下将对两种目标体验及实现手段进行分析。</p><ul><li>生命诞生的不易<ul><li>理解<ul><li>若想让玩家体会生命诞生的不易，便需要让其<strong>难以轻易通关</strong>，换言之便是会为玩家设计较高的游戏难度</li></ul></li><li>实现手段<ul><li>关卡难度<ul><li>地图设计<ul><li>整体的地图设计虽然简易，但也体现了<strong>先宽后窄</strong>的设计思想，目的是为了让玩家越往后的操作难度越大</li><li>而通过地图中最后的最窄部分也是玩家非线性体验的最高点  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211027150313.png" alt="最难通过的部分" style="zoom:80%;" /></li></ul></li><li>障碍设计<ul><li>不管是在地图中随机生成的阻挡物（绒毛），还是在行进过程中随机掉落的白色球状物（白细胞），其目的都是为了增加玩家通关难度</li></ul></li></ul></li><li>操作难度<ul><li>生命机制<ul><li>最开始有很多生命，但只有一次发射机会，之后只能通过不断操作来操控生命体不断向前，一旦生命体被全部淘汰，整局游戏便结束。</li></ul></li><li>操作机制<ul><li>游戏采取的是反作用力机制<ul><li>即以玩家点击点为中心，会向周围施加反向推力</li></ul></li><li>单次点击所能施加的力很小<ul><li>单次点击所能施加的力很小，这就要求玩家需要高频次地点击屏幕，相对的，也对玩家的<em>微操</em>能力提出了更高的要求</li></ul></li></ul></li><li>这样的生命和操作机制使得想要操控的生命体越多，操作难度便越大。</li></ul></li></ul></li></ul></li><li>生命诞生的伟大<ul><li>理解<ul><li>若想让玩家体会生命诞生的伟大，考虑从量方面入手，一为<strong>增强生命诞生的不易感</strong>，二为<strong>增强通关的获得感和成就感</strong></li></ul></li><li>实现手段<ul><li>增强生命诞生的不易感<ul><li>这一点可以参考上一部分【生命诞生的不易】中的内容</li></ul></li><li>增强通关的获得感和成就感<ul><li>分别从视觉和听觉层面来强化该体验<ul><li>视觉层面<ul><li>即用数字明显标识最终通关的生命体的数量</li></ul></li><li>听觉层面<ul><li>在通关视觉信息呈现的同时，也呈现<strong>婴儿哭声</strong>作为听觉刺激，从而强化通关的获得感和成就感，目的也是为了让玩家体会“自己真的带来了新生命”的感觉<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211027135400.png" alt="通关" style="zoom: 50%;" /></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>恍然大悟<ul><li>解释<ul><li>玩家在开始游玩时其实并不知道整个游戏过程是对于受孕过程的模拟，只有最后通关后看到通关文字以及听到婴儿哭声后才反应过来，从而产生恍然大悟的感觉</li></ul></li><li>实现手段<ul><li>恍然前<ul><li>即揭晓游戏本身的背景是受孕模拟前，需要以尽可能隐喻的方式对游戏元素进行呈现</li></ul></li><li>恍然<ul><li>即揭晓游戏本身是对受孕过程的模拟，这需要强有力的刺激才能让玩家感受到恍然大悟，所以以视觉（文字）+听觉（婴儿哭声）刺激的形式共同呈现</li></ul></li></ul></li></ul></li></ul><h3 id="其他设计细节"><a href="#其他设计细节" class="headerlink" title="其他设计细节"></a>其他设计细节</h3><h4 id="反作用力机制"><a href="#反作用力机制" class="headerlink" title="反作用力机制"></a>反作用力机制</h4><ul><li>设计背景<ul><li>目标平台是手机，所以玩家的可选操作空间较少</li></ul></li><li>设计思考<ul><li>反作用力机制带来的操作不习惯<ul><li>和传统的“指哪儿打哪儿”的操作不同，反作用力机制下，玩家的操作会带来反作用力，一开始可能需要一些时间适应</li></ul></li><li>Fat Fingers Problem（胖手指问题）<ul><li>解释<ul><li>即人们在使用移动设备时因为设备和视觉的限制，导致人们无法直接看到自己所点击的位置，从而出现的误触（想点击的位置和真实被点击的位置不一致）问题</li></ul></li><li>解决<ul><li>视觉呈现<ul><li>通过为玩家点击位置添加【波纹】，来帮助玩家确定所点击的位置，此举同时也可以视作力的一种具象化<img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211027142958.png" alt="通过呈现波纹来缓解 Fat Fingers Problem" style="zoom:80%;" /></li></ul></li><li>全局机制<ul><li>玩家通过点击所造成的影响是全局的，即在屏幕中任意位置都可以对生命体施加反作用力，其中会涉及的两个变量是力的源头和力的大小<ul><li>力的源头<ul><li>以点击点为圆心，向周围方向施加反作用力</li></ul></li><li>力的大小<ul><li>为反作用力设计了衰减机制，距离生命体越远，则生命体最终受到的力便越小</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>反作用力的大小思考<ul><li>背景<ul><li>因为游戏是对着床这一生理现象的模拟，所以需要尽可能还原其自然选择和自由游动的状态</li></ul></li><li>反作用力大小的对比<ul><li>如果反作用力过大，那么会带来以下问题<ul><li>对自由游动这一状态的人为干预过大，对自然状态的还原度下降</li><li>反作用力过大会导致玩家操作难度极大上升，难以实现对生命体的微操</li><li>如果反作用力过大，那么即使是在有波纹的视觉辅助缓解了 Fat Fingers Problem，但是反而会产生的问题是玩家点击位置和最终的反馈点距离过远，即增大了玩家理解其操作所造成影响（系统反馈）的难度，导致玩家的操控感降低，这就是所谓的 Gulf of Evaluation 问题</li></ul></li><li>反之，反作用力小所带来的好处有<ul><li>更好地还原了“需要不断努力向前游动”这一生理过程</li><li>结合波纹，可以更好地感受到反馈</li><li>可以更好地进行微操</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="可能的扩展思路"><a href="#可能的扩展思路" class="headerlink" title="可能的扩展思路"></a>可能的扩展思路</h2><ul><li>关卡优化<ul><li>操作手感调整<ul><li>对力的大小进行调整，越往后的力越小，以凸显“力竭”的状态</li></ul></li><li>障碍物调整<ul><li>随着关卡的不断推进，可以在后期逐渐增多障碍物和掉落物，以增大通关游戏难度</li></ul></li><li>关卡拓展<ul><li>如为最后通关前增加【破壁】环节，以模拟进入卵巢的过程</li></ul></li></ul></li><li>增加社交元素<ul><li>如增加排行榜，以对比玩家表现</li></ul></li></ul><h2 id="可能的商业化思路"><a href="#可能的商业化思路" class="headerlink" title="可能的商业化思路"></a>可能的商业化思路</h2><p>如前所说，该游戏的目标平台是手机，所以最终预期成品的商业化思路是一次性买断制游戏。</p><h2 id="Gamejam-作品官方外链"><a href="#Gamejam-作品官方外链" class="headerlink" title="Gamejam 作品官方外链"></a>Gamejam 作品官方外链</h2><p><a href="https://v3.globalgamejam.org/2018/games/love-0">For Love</a></p>]]></content>
      
      
      <categories>
          
          <category> Study-Game-Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Portfolio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英雄联盟与王者荣耀玩家分段分析</title>
      <link href="2021/07/26/analysis-of-league-of-legends-and-glory-of-kings-players-segmented/"/>
      <url>2021/07/26/analysis-of-league-of-legends-and-glory-of-kings-players-segmented/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>据统计：</p><ul><li>《王者荣耀》玩家段位分布<ul><li>青铜 5.22% </li><li>白银 1.97% </li><li>黄金 10.37% </li><li>铂金 17.48%</li><li>钻石 20.24% </li><li>星耀 28.67%</li><li>最强王者 12.16%</li><li>荣耀王者 3.89% </li></ul></li><li>《英雄联盟》玩家段位分布<ul><li>黑铁 3.3% </li><li>青铜 19.0% </li><li>白银 32.0% </li><li>黄金 29.0% </li><li>铂金 11.0%</li><li>钻石 2.4% </li><li>钻石以上 3.3%</li></ul></li></ul><p>本文希望从该现象出发，分析其出现原因及各自优劣。</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/%E5%88%86%E6%AE%B5%E6%8A%98%E7%BA%BF%E5%9B%BE.png"></p><p>首先以折线图形式看一下二者的分段分布情况，可以看到二者基本呈现正态分布，差异点主要在于英雄联盟玩家的段位分布高峰主要在白银（超过 42.86% 的段位），位居中游；而王者荣耀玩家的段位分布高峰主要在星耀（超过 75 % 的段位），接近最高段位。基于此观察回答进行如下分析：</p><h2 id="为什么存在段位分布上的差异"><a href="#为什么存在段位分布上的差异" class="headerlink" title="为什么存在段位分布上的差异"></a>为什么存在段位分布上的差异</h2><p>首先需要明确的是分段差异出现的原因是因为设计者的设计，个人认为产生分段差异的原因有以下几点：</p><ol><li><p>游玩门槛导致的玩家基数不同</p><ul><li>英雄联盟作为一款 PC 端游，其游玩需要特定的环境与设备支持，存在游玩门槛。</li><li>王者荣耀作为一款手游，与英雄联盟相比，其游玩的门槛大大降低。</li><li>由此导致的结果是王者荣耀的玩家数量远超英雄联盟。设计师需要为大多数玩家带来良好的游戏体验，而在大玩家基数的基础之上，设计师需要为更多不同背景的玩家设计契合的玩法机制。</li></ul></li><li><p>想要打造的游戏体验不同</p><ul><li>英雄联盟想要打造的游戏体验是竞技感<ul><li>作为一款成功的 MOBA 类端游，每一局游戏的胜利都需要玩家投入时间与精力到每一个小细节上，玩家所期待的就是辛苦经营之后的酣畅胜利。整体强调的是有来有回的竞技感、博弈感。所以玩家对于越往后，受到的阻力越大，升段就越难是有心理准备的。</li></ul></li><li>王者荣耀则更加注重娱乐性和满足感<ul><li>作为一款希望玩家能够随时随地掏出手机就能玩的大众手游，玩家所追求的就是时间短、频率高的爽快体验。从玩家角度而言，在爽快娱乐的心理预期下若是花费了时间与精力却总是受挫是不可接受的。设计师需要保障绝大部分玩家都呈现一个段位整体上升的趋势。虽然玩家对于升段有难度一事有心理准备，但要尽可能避免因为玩家产生“本来玩的时间也不多，过了这么久了还总是在原地踏步”这样的挫败感而带来的留存率下降问题。</li></ul></li></ul></li></ol><h2 id="什么系统设计导致了这样的差距"><a href="#什么系统设计导致了这样的差距" class="headerlink" title="什么系统设计导致了这样的差距"></a>什么系统设计导致了这样的差距</h2><p>从策划角度考虑该问题，即设计师为了达到目标体验而设计的不同路径与挑战。</p><ol><li><p>排位机制的不同</p><ul><li>英雄联盟中存在隐藏分机制，隐藏分机制的设置是为了让玩家的段位尽可能地体现出其真实水平，所以存在胜负之后的加减分波动很大的情况。这一点也和目标游戏体验有关，英雄联盟的目标游戏体验就是竞技感，而这一机制的设定也是为了体现竞技场上强者为尊的思想，所以在隐藏分和显示段位接近情况下，基本不可能出现低段位战胜高段位的情况。</li><li>王者荣耀中存在段位保护机制，并且不存在隐藏分机制，玩家的升降段直接由胜负场决定，并且可以显式看到。还是可以从目标游戏体验分析，王者荣耀的目标游戏体验是娱乐性和爽快感，在这过程中应该尽量减少玩家的挫败感，所以王者荣耀甚至为首次到达钻石/星耀的玩家提供了排位保护卡，目的也是为了能够让持续游玩的玩家的段位达到稳定上升的目的。</li></ul></li><li><p>操作复杂度的不同导致的操作上限</p><ul><li>英雄联盟作为 PC 端游，其操作依托键鼠，通常而言左手涉及十六个按键（QWER、ASDF、1234、Tab、Ctrl、Alt、空格），右手需要操控鼠标。</li><li>而王者荣耀作为手游，其操作依托屏幕，通常涉及几个手指。</li><li>由此带来了操作熟练度的上限，对于操作而言，英雄联盟中更高的段位通常意味着对于操作的更高要求，段位越高的玩家通常也越是能“突破极限”。而王者荣耀中由于操作复杂度被简化，更高段位的玩家的操作可能与段位稍低的玩家的操作之间不会有天壤之别，由此减小了玩家之间的差距，从而增加了王者荣耀玩家的升段可能性。</li></ul></li><li><p>其余细节设计</p><ul><li>以下几种机制都加速了王者荣耀的整体游戏进度，使得玩家所控英雄能在更短时间内成型，从而推进游戏进程，使得单位时间内玩家的游戏局数增加，从而增加了王者荣耀玩家的升段可能性。<ul><li>等级机制<ul><li>英雄联盟中满级为 18 级，升到满级基本需要 30 分钟。</li><li>王者荣耀中满级为 15 级，升到满级基本只需要 10 分钟。</li><li>王者荣耀中快速的升级机制使得整体游戏进度加快。</li></ul></li><li>补刀机制<ul><li>英雄联盟中存在补刀机制，即玩家需要对目标进行最后一击达成击杀，如此才可以获取经验和经济。否则只能获取到经验（需在一定范围内）。</li><li>王者荣耀中不存在补刀机制，只要玩家在死亡单位的一定范围内就可以获取经验和经济。</li><li>如此设计同样可以从目标游戏体验出发，结合上面提到的操作复杂度，此设计使得王者荣耀的操作要求变低，玩家更容易获得满足感。这也对英雄联盟玩家的对线操作及专注度提出了更高的要求。</li></ul></li><li>补给机制<ul><li>英雄联盟中，玩家所控制英雄只能通过泉水回复效果、辅助技能效果、物品效果（补给品或者装备特效）三种途径进行回复。</li><li>王者荣耀中，除以上途径外，还有塔后补给包机制以供玩家回复。</li><li>从王者荣耀的目标游戏体验出发，该设计增长了玩家的“作战”时间，从而减少由于“无聊”的回城时间带来的阻滞感。</li></ul></li><li>装备购买机制<ul><li>英雄联盟中，玩家只能在泉水一定范围内进行装备购买。</li><li>王者荣耀中，玩家可在任意位置购买装备。</li><li>从王者荣耀目标游戏体验出发，和补给机制一样，增加了玩家的“作战”时间，降低操作复杂度，目的也是为了降低操作门槛与阻滞感。</li></ul></li><li>地图设计的不同导致战斗爆发频率高<ul><li>英雄联盟中的地图很大，除使用冷却时间很长的传送技能（并且需要在单局游戏开始前选择携带）外只能选择步行，如果爆发战斗的地点太远，很难及时进行支援，这对玩家意识就有了更高的要求，同时也增加了战斗的策略性。</li><li>王者荣耀中的地图较小，这意味着只要进行短时间的周旋就能等到队友的支援。</li><li>如此设计使得王者荣耀中战斗爆发频率更高，从而加快了游戏进程。</li></ul></li></ul></li></ul></li></ol><h2 id="各自的优缺点"><a href="#各自的优缺点" class="headerlink" title="各自的优缺点"></a>各自的优缺点</h2><p>作为各自领域的成功之作，二者的优缺点都是在服务于目标游戏人群及其体验情况下的取舍。</p><ul><li>英雄联盟在玩家分段设计方面的优点<ul><li>很好地服务于竞技感这一目标游戏体验</li><li>能力至上，强者为尊</li></ul></li><li>英雄联盟在玩家分段设计方面的缺点<ul><li>对于普通玩家而言，由于各方面能力差距导致的失败很容易产生挫败感</li></ul></li><li>王者荣耀在玩家分段设计方面的优点<ul><li>很好地服务于娱乐性与满足感的目标游戏体验</li><li>尽可能地满足了更多玩家群体的游戏需要</li></ul></li><li>王者荣耀在玩家分段设计方面的缺点<ul><li>在连胜场数过高情况下出现的胜率制裁等机制，可能使得玩家体验受到影响</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，英雄联盟与王者荣耀的玩家分段不同主要是由于不同的玩家基数与目标游戏体验不同，导致设计师针对目标玩家群体及其游戏体验设计了包括排位、补刀、补给、装备购买、地图设计等不同机制，目的都是为了给玩家们带来更好的游戏体验。</p>]]></content>
      
      
      <categories>
          
          <category> Study-Game-Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Portfolio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神将三国游戏体验报告</title>
      <link href="2021/07/26/shen-jiang-san-guo-game-experience-report/"/>
      <url>2021/07/26/shen-jiang-san-guo-game-experience-report/</url>
      
        <content type="html"><![CDATA[<h1 id="神将三国游戏体验报告"><a href="#神将三国游戏体验报告" class="headerlink" title="神将三国游戏体验报告"></a>神将三国游戏体验报告</h1><h2 id="1-报告基础信息"><a href="#1-报告基础信息" class="headerlink" title="1. 报告基础信息"></a>1. 报告基础信息</h2><h3 id="1-1-游戏名称：神将三国"><a href="#1-1-游戏名称：神将三国" class="headerlink" title="1.1 游戏名称：神将三国"></a>1.1 游戏名称：神将三国</h3><h3 id="1-2-游戏版本：1-17-1"><a href="#1-2-游戏版本：1-17-1" class="headerlink" title="1.2 游戏版本：1.17.1"></a>1.2 游戏版本：1.17.1</h3><h3 id="1-3-体验设备：iPhone-SE2"><a href="#1-3-体验设备：iPhone-SE2" class="headerlink" title="1.3 体验设备：iPhone SE2"></a>1.3 体验设备：iPhone SE2</h3><h3 id="1-4-系统版本：iOS-14-6"><a href="#1-4-系统版本：iOS-14-6" class="headerlink" title="1.4 系统版本：iOS 14.6"></a>1.4 系统版本：iOS 14.6</h3><h3 id="1-5-体验时间：2021-7-19-2021-7-25"><a href="#1-5-体验时间：2021-7-19-2021-7-25" class="headerlink" title="1.5 体验时间：2021.7.19 - 2021.7.25"></a>1.5 体验时间：2021.7.19 - 2021.7.25</h3><h2 id="2-报告目的"><a href="#2-报告目的" class="headerlink" title="2. 报告目的"></a>2. 报告目的</h2><p>体验下载-注册-游玩的全流程，对游戏进行整体体验，分析其游戏定位、整体目标感、核心玩法定位，发掘其设计闪光点及可优化点。</p><h2 id="3-游戏进程及游戏整体分析"><a href="#3-游戏进程及游戏整体分析" class="headerlink" title="3. 游戏进程及游戏整体分析"></a>3. 游戏进程及游戏整体分析</h2><h3 id="3-1-游戏进程"><a href="#3-1-游戏进程" class="headerlink" title="3.1 游戏进程"></a>3.1 游戏进程</h3><p>截止完成报告时，主线任务推进到第七章，势力值达到 354。</p><p>阵营中盟主【贞德】的贡献为 132733，战功为 572，势力值为 21172。</p><ul><li>阵营贡献<ul><li>  主公通过攻占资源地、击败敌对阵营主攻部队、击杀城池守军、攻打城池、捐献资源和预备兵可获得贡献；近侍官职还可通过建设军旗、拒马、箭塔获得贡献</li><li>  每个途径可获得贡献有上限，达到上限后该途径不再获得贡献，每个纪年（8 天）重置一次上限</li></ul></li><li>官职晋升条件<ul><li>  阵营贡献达到官职要求时，可申请晋升官职</li><li>  六阶以上官职将分为武将、文丞、近侍三类，每一类有独立的晋升通道和官职特权</li><li>  同一级不同类的官职可进行调任，调任后一纪年内不可再次调任</li></ul></li><li>服务器中不同官阶玩家贡献及势力值一览<style type="text/css">.tg  {border-collapse:collapse;border-spacing:0;}.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}.tg .tg-baqh{text-align:center;vertical-align:top}.tg .tg-fymr{border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}.tg .tg-0lax{text-align:left;vertical-align:top}</style><table class="tg"><thead><tr>  <th class="tg-fymr">描述 </th>  <th class="tg-1wig">主线进度 </th>  <th class="tg-1wig">官阶 </th>  <th class="tg-0lax"> 贡献需求 </th>  <th class="tg-1wig"> 本年贡献 </th>  <th class="tg-1wig">势力值 </th></tr></thead><tbody><tr>  <td class="tg-0lax">个人进展 </td>  <td class="tg-0lax">第七章 </td>  <td class="tg-0lax">布衣 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">0 </td>  <td class="tg-0lax">354 </td></tr><tr>  <td class="tg-0lax">布衣中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">布衣 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">62913 </td>  <td class="tg-0lax">15322 </td></tr><tr>  <td class="tg-0lax">伍长中贡献最低 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">九阶-伍长 </td>  <td class="tg-baqh" rowspan="2">2000 </td>  <td class="tg-0lax">3595 </td>  <td class="tg-0lax">1257 </td></tr><tr>  <td class="tg-0lax">伍长中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">九阶-伍长 </td>  <td class="tg-0lax">8032 </td>  <td class="tg-0lax">3322 </td></tr><tr>  <td class="tg-0lax">什长中贡献最低 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">八阶-什长 </td>  <td class="tg-baqh" rowspan="2">5000 </td>  <td class="tg-0lax">7076 </td>  <td class="tg-0lax">5227 </td></tr><tr>  <td class="tg-0lax">什长中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">八阶-什长 </td>  <td class="tg-0lax">17050 </td>  <td class="tg-0lax">5077 </td></tr><tr>  <td class="tg-0lax">百人将中贡献最低 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">七阶-百人将 </td>  <td class="tg-baqh" rowspan="2">10000 </td>  <td class="tg-0lax">13259 </td>  <td class="tg-0lax">4644 </td></tr><tr>  <td class="tg-0lax">百人将中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">七阶-百人将 </td>  <td class="tg-0lax">20990 </td>  <td class="tg-0lax">5090 </td></tr><tr>  <td class="tg-0lax">六阶官职中贡献最低 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">六阶-牙门将 </td>  <td class="tg-baqh" rowspan="2">20000 <br> </td>  <td class="tg-0lax">35290 </td>  <td class="tg-0lax">8920 </td></tr><tr>  <td class="tg-0lax">六阶官职中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">六阶-牙门将 </td>  <td class="tg-0lax">49699 </td>  <td class="tg-0lax">14095 </td></tr><tr>  <td class="tg-0lax">五阶官职中贡献最低 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">五阶-虎卫 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">50209 </td>  <td class="tg-0lax">21227 </td></tr><tr>  <td class="tg-0lax">五阶官职中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">五阶-虎卫 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">90978 </td>  <td class="tg-0lax">25773 </td></tr><tr>  <td class="tg-0lax">四阶官职中贡献最低 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">四阶-虎贲骁骑 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">142638 </td>  <td class="tg-0lax">25123 </td></tr><tr>  <td class="tg-0lax">四阶官职中贡献最高 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">四阶- 先登骁骑 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">102613 </td>  <td class="tg-0lax">18063 </td></tr><tr>  <td class="tg-0lax">三阶官职中贡献最低 </td>  <td class="tg-0lax" colspan="5" rowspan="8">空缺 <br> <br> </td></tr><tr>  <td class="tg-0lax">三阶官职中贡献最高 </td></tr><tr>  <td class="tg-0lax">二阶官职中贡献最低 </td></tr><tr>  <td class="tg-0lax">二阶官职中贡献最高 </td></tr><tr>  <td class="tg-0lax">从一阶官职中贡献最低 </td></tr><tr>  <td class="tg-0lax">从一阶官职中贡献最高 </td></tr><tr>  <td class="tg-0lax">一阶官职中贡献最低 </td></tr><tr>  <td class="tg-0lax">一阶官职中贡献最高 </td></tr><tr>  <td class="tg-0lax">盟主 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">盟主 </td>  <td class="tg-0lax"> </td>  <td class="tg-0lax">132733 </td>  <td class="tg-0lax">21172 </td></tr></tbody></table></li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726143343.png"></p><h3 id="3-2-玩家目标分析"><a href="#3-2-玩家目标分析" class="headerlink" title="3.2 玩家目标分析"></a>3.2 玩家目标分析</h3><p>从上表中可以看出，整体而言，官阶越高，则贡献/势力值越高。玩家目标可从以下两方面进行划分：</p><ul><li>战斗+养成目标<ul><li>  势力值不断提高</li></ul></li><li>社交目标<ul><li>  贡献值不断提高</li><li>  官阶不断提高</li></ul></li></ul><h3 id="3-3-差距点设计"><a href="#3-3-差距点设计" class="headerlink" title="3.3 差距点设计"></a>3.3 差距点设计</h3><p>从图中可以看出，整体而言，随着官阶提升，相应贡献有显著提升，但是势力值上涨趋于平缓。</p><ul><li><p>设计者希望玩家拉开差距的地方 - 贡献</p><ul><li><p>原因</p><ul><li><p>贡献可看作玩家在社交+养成系统的投入，如此设计是为了</p><ol><li> 调动玩家社交积极性，鼓励玩家持续游戏</li><li> 调动玩家自豪感+阵营归属感，鼓励阵营内部合作竞争</li></ol></li></ul></li></ul></li><li><p>设计者不希望玩家拉开差距的地方 - 势力</p><ul><li><p>原因</p><ul><li><p>势力可看作玩家战力值的体现，如此设计是为了</p><ol><li> 让玩家的战力最终趋同，使不同阵营间的高等战力有相较之力</li><li> 防止头部玩家对其他玩家形成不可控的碾压局势</li></ol></li></ul></li></ul></li></ul><h3 id="3-4-游戏时长-amp-进度分布"><a href="#3-4-游戏时长-amp-进度分布" class="headerlink" title="3.4 游戏时长 &amp; 进度分布"></a>3.4 游戏时长 &amp; 进度分布</h3><p>以我个人为例，我的有效游戏时间接近 2 小时，物理时间为 7 天，势力值为 354，花费金额为 6 元。以最简单的线性函数来算要达到四阶官阶的时间：</p><ul><li>计算过程<ul><li>  取四阶官阶的势力值均值 = 21593</li><li>计算单位有效时间<ul><li>  2 小时 / 7 天 = 0.2857 小时/天</li></ul></li><li>计算单位有效时间的势力值增长<ul><li>  354 / 单位有效时间 = 1239 势力值 / 小时</li></ul></li><li>计算达到四阶官阶所需的有效时间<ul><li>  21593 / 单位有效时间的势力值增长 = 17.42776 小时</li></ul></li><li>计算物理天数<ul><li>  有效时间 / 单位有效时间 = 60.997 天</li></ul></li></ul></li><li>  也就是以最简单的线性函数估计玩家若是需要到达一个服务器的第一梯队约需要两个月的时间，而根据版本更新记录可知一个赛季时长约为 3-4 个月，计算与实际相符，即玩家在达到第一梯队后还有很长一段时间可以深度参与阵营间的合作竞争。</li></ul><h3 id="3-5-游戏未来设计趋势"><a href="#3-5-游戏未来设计趋势" class="headerlink" title="3.5 游戏未来设计趋势"></a>3.5 游戏未来设计趋势</h3><ul><li>游戏未来设计趋势为<ul><li>加强服务器间竞争<ul><li>  未来服务器合并后，同服务器玩家需要共同对抗外服务器玩家</li></ul></li><li>丰富已有机制<ul><li>  地图</li><li>  资源类型</li><li>  建筑类型</li><li>  兵种</li><li>  副本</li><li>  战役</li></ul></li></ul></li><li>推测依据<ul><li>  更多-天下大势-天下大势-阵营合作+竞争</li><li>  更多-天下大势-赛季说明-阵营竞争</li><li>  版本更新记录</li></ul></li></ul><h2 id="4-详细体验流程"><a href="#4-详细体验流程" class="headerlink" title="4. 详细体验流程"></a>4. 详细体验流程</h2><h3 id="4-1-下载"><a href="#4-1-下载" class="headerlink" title="4.1 下载"></a>4.1 下载</h3><h4 id="搜索情况"><a href="#搜索情况" class="headerlink" title="搜索情况"></a>搜索情况</h4><ul><li>  在 App Store 中搜索神将三国，第一个便是目标游戏。</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726143444.png" style="zoom:25%;" /><h4 id="游戏定位"><a href="#游戏定位" class="headerlink" title="游戏定位"></a>游戏定位</h4><ul><li>  搜索后可看到其名称中已经标注了游戏定位：<code>国战策略 slg 攻城手游</code>。</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726143507.png" style="zoom:25%;" /><h4 id="评分情况"><a href="#评分情况" class="headerlink" title="评分情况"></a>评分情况</h4><ul><li><p>  可以看到其拥有 4301 个评分，总评分高达 4.4/5，在模拟类排行榜中排行 83，是不错的成绩。</p></li><li><p>从截取的最有帮助的和差评中可以提取出以下负面评价关键词，可以为版本迭代提供一些思路</p><ul><li><p>  bug</p></li><li><p>闪退</p></li><li><p>卡顿</p></li><li><p>平衡性太差</p></li><li><p>  工作室太多</p></li></ul></li></ul><blockquote><p>玩家的评价是版本迭代的重要参考之一，既会影响潜在玩家的游玩可能性，也可以提示策划们可以对玩家哪方面的游戏体验进行优化</p></blockquote><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/%E8%AF%84%E5%88%86%E5%8F%8A%E8%AF%84%E8%AE%BA.jpg" style="zoom:25%;" /><h4 id="版本历史记录"><a href="#版本历史记录" class="headerlink" title="版本历史记录"></a>版本历史记录</h4><ul><li><p>  可以看到最早的版本 1.0.0 发布于六个月之前，之后的一个月进行了四次更新，之后的更新频率约为一个月一次，最近一次更新在一周前。</p></li><li><p>  整体更新频率较高，说明项目组活跃程度较高</p></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726143934.png" style="zoom:25%;" /><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><ul><li>  该游戏共提供了俄文、日文、泰文、简体中文、繁体中文、英文、越南文、韩文共 8 种语言，可见其在海外市场也有布局。</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726143955.png" style="zoom:25%;" /><h4 id="游戏大小"><a href="#游戏大小" class="headerlink" title="游戏大小"></a>游戏大小</h4><ul><li><p>  542.5 MB</p></li><li><p>  比起动辄 10G+的手游，该大小让用户不需要太久地等待便可开始游玩。</p></li></ul><h3 id="4-2-注册"><a href="#4-2-注册" class="headerlink" title="4.2 注册"></a>4.2 注册</h3><h4 id="一键试玩"><a href="#一键试玩" class="headerlink" title="一键试玩"></a>一键试玩</h4><ul><li>  可以看到游戏中提供了一键试玩机制，可以让玩家直接进行体验，别有新意</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144014.png" style="zoom:25%;" /><h4 id="登录方式"><a href="#登录方式" class="headerlink" title="登录方式"></a>登录方式</h4><ul><li>  登录方式为手机短信验证，输入验证码后还需设置密码，并且此处设置密码时的默认状态是可见的</li></ul><blockquote><p>迭代建议：将此处密码输入时设置为默认不可见模式，以保护用户隐私。</p></blockquote><h4 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h4><ul><li><p>  画面精美，且有火焰纷飞动效，但不知道为何左上角适龄提示为 12+，在下载页面的适龄提示却是 9+</p></li><li><p>服务器信息</p><ul><li>  会自动进行选择，免去了玩家手动选择的繁琐操作</li></ul></li><li><p>用户服务协议和隐私保护协议</p><ul><li>  需要用户手动勾选，强化用户知情权</li></ul></li><li><p>点击效果</p><ul><li>  有波纹特效，方便用户获知点击位置</li></ul></li></ul><blockquote><p>迭代建议：建议统一 App Store 中与登录界面中的适龄提示信息</p></blockquote><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144033.png" style="zoom:25%;" /><h4 id="意外情况"><a href="#意外情况" class="headerlink" title="意外情况"></a>意外情况</h4><ul><li><p>  点击开始游戏后提示登录失败</p></li><li><p>  有可能是因为在登录界面停留时间过长导致的</p></li></ul><h3 id="4-3-游玩"><a href="#4-3-游玩" class="headerlink" title="4.3 游玩"></a>4.3 游玩</h3><h4 id="4-3-1-角色创建"><a href="#4-3-1-角色创建" class="headerlink" title="4.3.1 角色创建"></a>4.3.1 角色创建</h4><ul><li>角色选择<ul><li>性别选择<ul><li>进入游戏后首先是性别选择，并且在切换时伴有角色声效，增强玩家代入感<ul><li>男：大丈夫生于乱世，当带三尺之剑，立无世之功</li><li>  女：当窗理红妆，对镜贴花黄，也无碍小女子驰骋沙场</li></ul></li></ul></li><li><code>请留下大名</code><ul><li>  会有随机生成的名称，且都具有几分古韵，增强了玩家代入感</li></ul></li></ul></li></ul><h4 id="4-3-2-新手教程-此时注意到是竖版游戏"><a href="#4-3-2-新手教程-此时注意到是竖版游戏" class="headerlink" title="4.3.2 新手教程 - 此时注意到是竖版游戏"></a>4.3.2 新手教程 - 此时注意到是竖版游戏</h4><ul><li>涉及系统<ul><li>战斗<ul><li>队伍配置（上阵）</li><li>征兵（分配兵力）</li><li>下阵</li><li>招募武将（单次可无限重复）</li><li>强调兵种克制机制</li><li>引入战斗资源<ul><li>  消耗体力</li></ul></li><li>到达士气</li><li>行军时间</li><li>行军路线</li><li>路线选择</li><li>  上阵部队</li></ul></li></ul></li><li>社交<ul><li>阵营选择<ul><li>魏国曹操<ul><li>骑兵加伤害 <code>2%</code></li><li>铁矿产量加 <code>300</code></li></ul></li><li>蜀国刘备<ul><li><p>  枪兵加伤害 <code>2%</code></p></li><li><p>  粮草产量加 <code>300</code></p></li></ul></li><li>东吴孙权<ul><li>  弓兵加伤害 <code>2%</code></li><li>  木材产量加 <code>300</code></li><li>  水战伤害提升 <code>15%</code></li></ul></li></ul></li></ul></li><li>养成<ul><li>引入不同资源类型<ul><li>铜币</li><li>木材</li><li>铁矿</li><li>粮草</li></ul></li><li>攻占资源点及领土相关规则介绍</li><li>引入内政升级机制</li><li>引入任务机制</li></ul></li><li>评价<ul><li>  总体而言若中间不停顿，新手教程整体流程在五分钟左右，节奏较快，其中基本涵盖了前期所需所有操作，便于玩家上手。</li></ul></li></ul><h4 id="4-3-3-部分游戏系统体验"><a href="#4-3-3-部分游戏系统体验" class="headerlink" title="4.3.3 部分游戏系统体验"></a>4.3.3 部分游戏系统体验</h4><h5 id="4-3-3-1-阵营重置及深夜保护"><a href="#4-3-3-1-阵营重置及深夜保护" class="headerlink" title="4.3.3.1 阵营重置及深夜保护"></a>4.3.3.1 阵营重置及深夜保护</h5><ul><li><p>情况说明</p><ul><li><p>  第一天下午因为有事出去了没有继续，等晚上重新登录游戏的时候进度回退到了阵营选择阶段，并且此时选择阵营时的推荐阵营奖励已经消失了，这次选择东吴阵营继续。</p></li><li><p>中间有两天没有登录，此时再登录游戏发现又可以重选阵营，为玩家提供了多次阵营选择的设计很人性化。</p></li></ul></li><li><p>深夜保护</p><ul><li><p>  北京时间凌晨 2 点 - 6 点会有深夜保护机制，此时体力消耗翻倍（引出了体力机制）</p></li><li><p>  因为我本人在欧洲时区，所以会稍微受到一点影响</p></li></ul></li></ul><blockquote><p>深夜保护机制还是挺人性化的，防止玩家过度沉迷。</p></blockquote><blockquote><p>但既然游戏语言中有多国语言，说明应该有海外版本，海外版本中应该考虑和当地时区同步的问题</p></blockquote><h5 id="4-3-3-2-签到系统"><a href="#4-3-3-2-签到系统" class="headerlink" title="4.3.3.2 签到系统"></a>4.3.3.2 签到系统</h5><ul><li><p>签到奖励出现时机</p><ul><li>  在完成议政殿任务之后，自动弹出了今日签到奖励，并提示<code>再签到 1 天可获得：孙策（橙）</code></li></ul></li><li><p>目的</p><ul><li>  提高玩家留存率</li></ul></li></ul><h5 id="4-3-3-3-离线收益"><a href="#4-3-3-3-离线收益" class="headerlink" title="4.3.3.3 离线收益"></a>4.3.3.3 离线收益</h5><ul><li>上线后会有离线收益的汇总<ul><li>  让玩家感觉非游戏时间也有所收获</li></ul></li></ul><h5 id="4-3-3-4-任务系统（部分）"><a href="#4-3-3-4-任务系统（部分）" class="headerlink" title="4.3.3.4 任务系统（部分）"></a>4.3.3.4 任务系统（部分）</h5><h6 id="4-3-3-4-1-第一章-展土开疆"><a href="#4-3-3-4-1-第一章-展土开疆" class="headerlink" title="4.3.3.4.1 第一章 展土开疆"></a>4.3.3.4.1 第一章 展土开疆</h6><h6 id="武将招募"><a href="#武将招募" class="headerlink" title="武将招募"></a>武将招募</h6><ul><li><p>任务描述</p><ul><li><p>  这是新手教程后的首个任务，点开后可以发现此时处在第一章 展土开疆</p></li><li><p>并且有三种任务类型</p><ul><li><p>  主线任务</p></li><li><p>支线任务</p></li><li><p>阵营任务</p></li></ul></li><li><p>  此处选择完成主线任务中的招募一名新武将</p></li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144133.png" style="zoom:25%;" /><ul><li>武将招募<ul><li>招募类型<ul><li>可以发现一共有四类招募<ul><li>忠诚名将<ul><li>可招募类型<ul><li>可招募名将（紫色）、良将（蓝色）、偏将（绿色）</li></ul></li><li>招募方式<ul><li><p>  300 铜币招募一次</p></li><li><p>  可连续招募（10 次起底）</p></li></ul></li></ul></li><li>神将群集（默认进入）<ul><li>可招募类型<ul><li>招募 5 次必得<strong>神将（橙）</strong>或<strong>名将（紫）</strong></li></ul></li><li>招募方式<ul><li><p>  首次招募免费（免费机会用掉 11 小时 30 分钟之后会再次有免费机会）</p></li><li><p>  768 金币招募五次（新手教程到此共有 530 金币）</p></li></ul></li></ul></li><li>王佐之才<ul><li>可招募类型<ul><li>招募 5 次必得<strong>神将（橙）</strong>或<strong>名将（紫）</strong></li></ul></li><li>招募方式<ul><li><p>  158 金币招募一次（但是左上角有倒计时显示，预计是倒计时之后会有免费招募一次的机会）</p></li><li><p>  768 金币招募五次（新手教程到此共有 530 金币）</p></li></ul></li></ul></li><li>混世魔王<ul><li>可招募类型<ul><li>招募 5 次必得<strong>神将（橙）</strong>或<strong>名将（紫）</strong></li></ul></li><li>招募方式<ul><li><p>  158 金币招募一次（但是左上角有倒计时显示，预计是倒计时之后会有免费招募一次的机会）</p></li><li><p>  768 金币招募五次（新手教程到此共有 530 金币）</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144151.png" style="zoom:25%;" /><ul><li><p>充值元素</p><ul><li><p>  这里首次明显出现了充值诱导元素，即再招募 5 次必得<strong>神将（橙）</strong>或<strong>名将（紫）</strong>，并且第一次注意到了金币和铜币的区别</p></li><li><p>这里选择使用一次免费的招募机会</p></li><li><p>  招募过程与前面的一致</p></li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144209.png" style="zoom:25%;" /><ul><li>  获得了四星名将（紫）王朗</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144328.png" style="zoom:25%;" /><ul><li><p>  返回发现任务已经完成</p></li><li><p>  领取任务奖励</p></li></ul><h6 id="内政系统"><a href="#内政系统" class="headerlink" title="内政系统"></a>内政系统</h6><p>升级内政【议政殿】</p><ul><li><p>任务描述</p><ul><li>  这是第一章 展土开疆中最后一个未完成的主线任务</li></ul></li><li><p>任务流程</p><ul><li>  点击【前往】按钮后会回到主页面</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144352.png" style="zoom:25%;" /><ul><li><p>此时主城有高亮提示</p><ul><li><p>  但是任务部分也有箭头提示</p></li><li><p>  会让玩家产生不知道该点哪个的错觉</p></li></ul></li></ul><blockquote><p>迭代建议：将此处任务部分的提示箭头去除</p></blockquote><ul><li><p>任务流程（接上）</p><ul><li><p>  点击主城</p></li><li><p>点击入城</p></li><li><p>点击内政</p></li><li><p>选择议政殿</p></li><li><p>点击【研究】按钮</p></li><li><p>  共需要 10 秒完成</p></li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726144409.png" style="zoom:25%;" /><ul><li><p>充值引导</p><ul><li>  此处发现可以通过使用金币来立即完成研究</li></ul></li><li><p>任务流程（接上）</p><ul><li><p>  升级之后发现二级议政殿下级有了<code>仓库</code>和<code>粮草</code>的可升级选项</p></li><li><p>此时返回主界面发现议政殿任务已完成</p></li><li><p>点击相应任务领取奖励</p></li><li><p>完成之前的步骤之后，此时箭头已经提示可以领取展土开疆任务以完成第一章节所有任务</p></li><li><p>  点击领取之后可直接完成</p></li></ul></li></ul><h6 id="4-3-3-4-2-第二章-大兴土木"><a href="#4-3-3-4-2-第二章-大兴土木" class="headerlink" title="4.3.3.4.2 第二章 大兴土木"></a>4.3.3.4.2 第二章 大兴土木</h6><ul><li><p>蔡文姬任务引导</p><ul><li>  蔡文姬发言引出当前阶段应以<strong>内政</strong>发展为重，而<strong>议政殿</strong>又为提升其他内政建筑的基础，应先行修缮。并且修缮需要资源，拓土可以增收，修筑内政建筑可以增收资源</li></ul></li><li><p>完成主线任务</p><ul><li>任务<ul><li>升级粮草</li><li>升级仓库</li><li>升级议政殿</li><li>攻占 2 个一级或更高级资源点<ul><li><p>提示</p><ul><li><p>  主公实力充沛，挑战低级资源点收益不高，浪费体力！</p></li><li><p>更多攻略请前往好友系统——百晓生</p><ul><li>  引出官方问答机制百晓生</li></ul></li><li><p>  胜利之后还需要时间进行占领</p></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>为什么要引入占领机制？</p></blockquote><blockquote><p>从目标游戏体验分析，原因有以下几点：</p><ol><li>增加真实感</li><li>增加节制感，由下方游戏整体目标感分析可知，此举使得玩家只需要间歇性游玩就可以不断实现实力上涨，另一方面也使得持续在线变得没有必要，从而增加了游戏节制感</li></ol></blockquote><h6 id="4-3-3-4-3-第三章-裹粮策马"><a href="#4-3-3-4-3-第三章-裹粮策马" class="headerlink" title="4.3.3.4.3 第三章 裹粮策马"></a>4.3.3.4.3 第三章 裹粮策马</h6><ul><li>主线任务类型<ul><li>外敌<ul><li>攻占敌营时引入了战场场景，存在阶段性胜利</li></ul></li><li>问答</li><li>内政</li><li>占领</li><li>  征兵</li></ul></li></ul><h6 id="4-3-3-4-4-第四章-仓箱可期"><a href="#4-3-3-4-4-第四章-仓箱可期" class="headerlink" title="4.3.3.4.4 第四章 仓箱可期"></a>4.3.3.4.4 第四章 仓箱可期</h6><ul><li>主线任务类型<ul><li>  引入了势力任务</li></ul></li></ul><h6 id="4-3-3-4-6-第六章-青出于蓝"><a href="#4-3-3-4-6-第六章-青出于蓝" class="headerlink" title="4.3.3.4.6 第六章 青出于蓝"></a>4.3.3.4.6 第六章 青出于蓝</h6><ul><li>主线任务类型<ul><li>  引入武技系统</li></ul></li></ul><h6 id="4-3-3-4-6-第七章-休养生息"><a href="#4-3-3-4-6-第七章-休养生息" class="headerlink" title="4.3.3.4.6 第七章 休养生息"></a>4.3.3.4.6 第七章 休养生息</h6><ul><li><p>主线任务类型</p><ul><li><p>  引入战役机制</p></li><li><p>  引入阵营任务</p></li></ul></li></ul><h2 id="5-游戏部分机制-系统拆解"><a href="#5-游戏部分机制-系统拆解" class="headerlink" title="5. 游戏部分机制/系统拆解"></a>5. 游戏部分机制/系统拆解</h2><h3 id="5-1-新手指引系统拆解"><a href="#5-1-新手指引系统拆解" class="headerlink" title="5.1 新手指引系统拆解"></a>5.1 新手指引系统拆解</h3><h4 id="5-1-1-玩法拆解"><a href="#5-1-1-玩法拆解" class="headerlink" title="5.1.1 玩法拆解"></a>5.1.1 玩法拆解</h4><ul><li><p>玩法规则：角色，能力+限制</p><ul><li>角色<ul><li>玩家自己</li><li>单人参与</li></ul></li><li>能力<ul><li>  跟随系统进行指定区域的点击</li></ul></li><li>限制<ul><li><p>  只能点击限定位置</p></li><li><p>只有一次新手指引教程</p></li></ul></li><li>玩法目标：终点+量化指标<ul><li>终点<ul><li>  完成新手指引相关任务</li></ul></li></ul></li></ul><h4 id="5-1-2-设计拆解"><a href="#5-1-2-设计拆解" class="headerlink" title="5.1.2 设计拆解"></a>5.1.2 设计拆解</h4></li><li><p>期望体验</p><ul><li><p>掌控感</p><ul><li>新手指引的目的就是为了让玩家尽可能快速地熟悉游戏基本系统，要让玩家有一种 <em><strong>这个我熟，以后我也知道怎么做了</strong></em> 的掌控感</li></ul></li><li><p>新鲜感和差异感</p><ul><li>  作为玩家游玩的第一部分，新手教程需要让玩家迅速体会到与同类游戏的差异点与新鲜点，从而吸引玩家继续游戏</li></ul></li><li><p>快速</p><ul><li>  新手指引系统需要玩家能尽可能快地完成，因为该过程中玩家可做操作有限，需要防止因为新手流程过长，玩家感到无聊而造成的玩家流失</li></ul></li></ul></li><li><p>目标</p><ul><li><p>  让玩家尽可能短的时间内熟悉游戏基本玩法机制</p></li><li><p>  吸引玩家继续游戏</p></li></ul></li><li><p>路径/挑战</p><ul><li>路径<ul><li>跟随系统进行特定位置的点击</li></ul></li><li>挑战<ul><li>  玩家很容易感到无聊</li></ul></li></ul></li></ul><h3 id="5-2-阵营机制拆解"><a href="#5-2-阵营机制拆解" class="headerlink" title="5.2 阵营机制拆解"></a>5.2 阵营机制拆解</h3><h4 id="5-2-1-玩法拆解"><a href="#5-2-1-玩法拆解" class="headerlink" title="5.2.1 玩法拆解"></a>5.2.1 玩法拆解</h4><ul><li>玩法规则：角色，能力+限制<ul><li>角色<ul><li>同服务器玩家</li><li>多人参与</li></ul></li><li>能力<ul><li><p>  同阵营玩家达成的成就自己也能享受相应奖励</p></li><li><p>与非己方阵营玩家进行作战</p></li></ul></li><li>限制<ul><li><p>  不能与同阵营玩家进行作战</p></li><li><p>作战失败会有资源损失</p></li></ul></li><li>玩法目标：终点+量化指标<ul><li>终点<ul><li>  完成赛季最终阵营任务</li></ul></li></ul></li></ul></li></ul><h4 id="5-2-2-设计拆解"><a href="#5-2-2-设计拆解" class="headerlink" title="5.2.2 设计拆解"></a>5.2.2 设计拆解</h4><ul><li><p>期望体验</p><ul><li>合作感<ul><li>阵营机制设计的期望之一就是让同阵营玩家能够荣辱与共，同阵营玩家达成成就后玩家自己也可以领取相应奖励，如此能够增强玩家的合作感</li></ul></li><li>竞争感<ul><li>  阵营机制设计的另一个期望就是让不同阵营玩家间互相竞争，此举不但能吸引玩家保持游戏积极性，并且也能促进玩家消费</li></ul></li></ul></li><li><p>目标</p><ul><li><p>  让同阵营玩家不断合作，荣辱与共</p></li><li><p>让非己方阵营玩家互相竞争，促进玩家游戏活跃度，刺激玩家消费欲望</p></li></ul></li><li><p>路径/挑战</p><ul><li>路径<ul><li>攻城略池</li></ul></li><li>挑战<ul><li>  失败后玩家可能会产生挫败感</li></ul></li></ul></li></ul><h3 id="5-3-问答系统拆解"><a href="#5-3-问答系统拆解" class="headerlink" title="5.3 问答系统拆解"></a>5.3 问答系统拆解</h3><h4 id="5-3-1-玩法拆解"><a href="#5-3-1-玩法拆解" class="headerlink" title="5.3.1 玩法拆解"></a>5.3.1 玩法拆解</h4><ul><li><p>玩法规则：角色，能力+限制</p><ul><li>角色<ul><li>玩家自己</li><li>  单人参与</li></ul></li></ul></li><li><p>能力</p><ul><li>  可以从备选答案中挑选答案</li></ul></li><li><p>限制</p><ul><li>只能做一次选择<ul><li>  答错了不能再次回答</li></ul></li></ul></li><li><p>玩法目标：终点+量化指标</p><ul><li>终点<ul><li>选择备选答案后无论答案正确与否都会结束</li></ul></li><li>量化指标<ul><li>  答案的正确性</li></ul></li></ul></li></ul><h4 id="5-3-2-设计拆解"><a href="#5-3-2-设计拆解" class="headerlink" title="5.3.2 设计拆解"></a>5.3.2 设计拆解</h4><ul><li><p>期望体验</p><ul><li>不紧张地答题<ul><li>不是设计为紧张的、有排名的、竞争性强的答题</li><li>设计为答对了很好，答错了也不会有什么严重后果的方式<ul><li><p>  减轻玩家答题负担</p></li><li><p>  增加玩家参与度</p></li></ul></li></ul></li><li>意犹未尽<ul><li>  答题机会是随机出现的，并且只有一次错误机会，题量通常小于 5 道，玩家基本能很快答完，无论是答对了还是答错了，都让人有一种意犹未尽的感觉，让玩家有种意犹未尽的感觉，增加玩家对下次答题的期待</li></ul></li><li>收获<ul><li><p>  既能收获游戏内的资源奖励</p></li><li><p>  又能丰富游戏内的玩法知识，从而增进玩家对于游戏的了解，丰富玩法路径</p></li></ul></li></ul></li><li><p>目标</p><ul><li>  通过正确回答问题获取资源</li></ul></li><li><p>路径/挑战</p><ul><li>路径<ul><li>从备选答案中做出选择</li></ul></li><li>挑战<ul><li>  存在错误答案</li></ul></li></ul></li></ul><h2 id="6-报告总结"><a href="#6-报告总结" class="headerlink" title="6. 报告总结"></a>6. 报告总结</h2><h3 id="6-1-游戏定位"><a href="#6-1-游戏定位" class="headerlink" title="6.1 游戏定位"></a>6.1 游戏定位</h3><ul><li>  <code>国战策略 slg 攻城手游</code></li></ul><h3 id="6-2-游戏整体目标感分析"><a href="#6-2-游戏整体目标感分析" class="headerlink" title="6.2 游戏整体目标感分析"></a>6.2 游戏整体目标感分析</h3><p>作为一款三国题材的 SLG 国战手游，游戏的整体目标感可归结为以下几点：</p><ul><li>掌控感<ul><li>调兵遣将<ul><li>  玩家需要作为一方首领来参与到游戏当中，无论是将领的配置还是兵种的选择都让玩家有一种_<strong>自己说了算</strong>_ 的爽快掌控感</li></ul></li><li>攻城略池<ul><li>  作为一方诸侯，玩家需要攻城略池以进行资源补给以及势力/贡献提升，此间对于目标地点的选择也增强了掌控感</li></ul></li></ul></li><li>策略感<ul><li>合纵连横<ul><li>  玩家需要作为阵营中的势力之一来共同影响天下大势，无论是对己方势力的驰援还是对敌对势力的攻占都是阵营内外合作竞争的重要抉择</li></ul></li></ul></li><li>节制感<ul><li>以下几种机制的引入使得玩家只需要间歇性游玩就可以不断实现实力上涨，另一方面也使得持续在线变得没有必要，从而增加了游戏节制感<ul><li>  占领时间</li><li>  研发种类上限</li><li>  深夜保护</li><li>  体力上限</li></ul></li></ul></li></ul><h3 id="6-3-核心玩法定位"><a href="#6-3-核心玩法定位" class="headerlink" title="6.3 核心玩法定位"></a>6.3 核心玩法定位</h3><h4 id="6-3-1-三元素分析"><a href="#6-3-1-三元素分析" class="headerlink" title="6.3.1 三元素分析"></a>6.3.1 三元素分析</h4><ul><li>  从战斗、养成、社交三元素进行分析，本游戏前期偏重战斗与养成，从其游戏定位看后期会偏重养成与社交</li></ul><h5 id="6-3-1-1-战斗"><a href="#6-3-1-1-战斗" class="headerlink" title="6.3.1.1 战斗"></a>6.3.1.1 战斗</h5><ul><li>偏重<ul><li>指令类型<ul><li>去哪儿<ul><li>选择要攻占的地方<ul><li>  涉及体力消耗及胜负</li></ul></li></ul></li><li>怎么打<ul><li><p>  武将的选择</p></li><li><p>兵种的选择</p><ul><li>  涉及兵种克制</li></ul></li></ul></li></ul></li></ul></li></ul><h5 id="6-3-1-2-养成"><a href="#6-3-1-2-养成" class="headerlink" title="6.3.1.2 养成"></a>6.3.1.2 养成</h5><ul><li>主要涉及<ul><li>武将的获取和培养<ul><li>升星<ul><li>抽到同一卡牌之后才能融合升星</li><li>最高为五星</li></ul></li><li>进阶</li><li>装备</li><li>缘分</li><li>武将技能</li></ul></li><li>科技（内政）的升级<ul><li>  快速升级需要消耗金币</li></ul></li><li>资源的获取和消耗<ul><li>  木材</li><li>  铁矿</li><li>  石料</li><li>  粮草</li></ul></li></ul></li></ul><h5 id="6-3-1-3-社交"><a href="#6-3-1-3-社交" class="headerlink" title="6.3.1.3 社交"></a>6.3.1.3 社交</h5><ul><li><p>主要涉及</p><ul><li><p>  势力值的提升</p></li><li><p>贡献度的提升</p></li></ul></li><li><p>  游玩过程中该元素还未较多体现</p></li><li><p>  但从其游戏定位中的<code>国战</code>属性中可知最终肯定会涉及到对抗型 PVP、GVG 元素</p></li></ul><h4 id="6-3-2-围绕核心玩法做了什么"><a href="#6-3-2-围绕核心玩法做了什么" class="headerlink" title="6.3.2 围绕核心玩法做了什么"></a>6.3.2 围绕核心玩法做了什么</h4><ul><li><p>新手引导</p><ul><li>  涵盖武将招募/选择，兵力分配，资源点攻占，兵种克制，土地开拓，任务机制，用户可快速上手</li></ul></li><li><p>主线剧情</p><ul><li>主线剧情的推进使得玩家渐渐熟悉游戏中的各类事务和系统<ul><li>战斗<ul><li>英雄及兵种选择</li></ul></li><li>养成<ul><li>资源获取<ul><li>攻城略池</li></ul></li><li>以战养战<ul><li>  内政升级</li></ul></li></ul></li><li>社交<ul><li><p>  阵营任务</p></li><li><p>  势力提升任务</p></li></ul></li></ul></li></ul></li></ul><h4 id="6-3-3-主要哪些系统为核心玩法服务"><a href="#6-3-3-主要哪些系统为核心玩法服务" class="headerlink" title="6.3.3 主要哪些系统为核心玩法服务"></a>6.3.3 主要哪些系统为核心玩法服务</h4><ul><li><p>战斗相关</p><ol><li><p>武将系统</p><ul><li>  通过抽卡获取（前期盈利点之一）</li></ul></li><li><p> 征兵系统</p></li><li><p> 武技系统</p></li></ol></li><li><p>养成相关</p><ol><li><p>内政系统</p><ul><li>  快速完成需要金币（消费点之一）</li></ul></li><li><p>资源系统</p><ul><li>思路<ul><li>  拓土-获取资源-提升实力</li></ul></li></ul></li><li><p>战役（副本）系统</p><ul><li>  用于获取材料/资源</li></ul></li></ol></li><li><p>社交相关</p><ol><li><p> 贡献系统</p></li><li><p> 势力系统</p></li><li><p>聊天系统</p><ul><li><p>分类</p><ul><li><p>阵营</p><ul><li>  辅助攻略型 PVE 的展开</li></ul></li><li><p>世界</p><ul><li>  辅助攻略型 PVE 、对抗型 PVP 的展开</li></ul></li><li><p>系统</p><ul><li>  了解世界玩家的高光时刻，以对游戏系统有更深地了解</li></ul></li></ul></li></ul></li></ol></li></ul><h4 id="6-3-4-基于核心玩法的设计细节进行拆分"><a href="#6-3-4-基于核心玩法的设计细节进行拆分" class="headerlink" title="6.3.4 基于核心玩法的设计细节进行拆分"></a>6.3.4 基于核心玩法的设计细节进行拆分</h4><ul><li><p>战斗前的战力分析</p><ul><li>  会有文字提示敌我差距，方便玩家进行判断</li></ul></li><li><p>战场场景的引入</p><ul><li>  在进行较大规模战斗（如攻占营地）时会有战场场景的引入，引入阶段性胜利，营造战斗氛围，增强玩家心流及代入感</li></ul></li></ul><h3 id="6-4-分析好不好玩"><a href="#6-4-分析好不好玩" class="headerlink" title="6.4 分析好不好玩"></a>6.4 分析好不好玩</h3><h4 id="6-4-1-上手难易度"><a href="#6-4-1-上手难易度" class="headerlink" title="6.4.1 上手难易度"></a>6.4.1 上手难易度</h4><ul><li><p>从操作分析</p><ul><li><p>  新手引导友好</p></li><li><p>  自动战斗省心</p></li></ul></li><li><p>从表现分析</p><ul><li><p>表现</p><ul><li><p>动作特效</p><ul><li>  形象帅气</li></ul></li><li><p>打击节奏</p><ul><li><p>  自动战斗</p></li><li><p>  频率固定</p></li></ul></li><li><p>打击反馈</p><ul><li>  飘字直观</li></ul></li><li><p>音效</p><ul><li><p>  较为真实</p></li><li><p>  战斗时定期播放</p></li></ul></li></ul></li></ul></li><li><p>从策略分析</p><ul><li><p>广度</p><ul><li><p>  所有武将共有 500 名</p></li><li><p>  所有兵种共有 7 种</p></li></ul></li><li><p>  深度</p></li><li><p>  容错</p></li></ul></li></ul><h4 id="6-4-2-耐玩程度"><a href="#6-4-2-耐玩程度" class="headerlink" title="6.4.2 耐玩程度"></a>6.4.2 耐玩程度</h4><ul><li><p>以下机制的引入使得策略要素大大加强，需要玩家选择_更高性价比_的操作方案</p><ul><li><p>  体力机制</p></li><li><p>  兵种克制</p></li></ul></li><li><p>此外还存在很多机制，玩家拥有很高的定制自由度</p><ul><li><p>城池</p><ul><li><p>内政</p><ul><li><p>  内务</p></li><li><p>  军务</p></li><li><p>  战略</p></li></ul></li><li><p>  马厩</p></li><li><p>  锻造</p></li><li><p>任命</p><ul><li><p>  主政官</p></li><li><p>  巡察使</p></li><li><p>  驯马使</p></li><li><p>  税收官</p></li><li><p>  木材官</p></li><li><p>  冶铁官</p></li><li><p>  …</p></li></ul></li><li><p>  鉴宝</p></li><li><p>  巡查</p></li></ul></li></ul></li></ul><h4 id="6-4-3-额外机制"><a href="#6-4-3-额外机制" class="headerlink" title="6.4.3 额外机制"></a>6.4.3 额外机制</h4><ol><li><p>问答机制</p><ul><li><p>触发</p><ul><li>  随机</li></ul></li><li><p>机制</p><ul><li>  回答问题，答对有奖励</li></ul></li><li><p>引入目的</p><ul><li>  增加额外获取资源的手段，并且可以在玩家没有体力时依然有事可做，从而增加玩家游戏时长</li></ul></li></ul></li><li><p>离线收益机制</p><ul><li><p>触发</p><ul><li>  离线</li></ul></li><li><p>机制</p><ul><li>  离线仍可自动运营，上线后可获取离线时间内自动运营得到的资源</li></ul></li><li><p>引入目的</p><ul><li><p>  使游戏整体呈现碎片化游玩趋势，增强目标游戏体验的节制感</p></li><li><p>  便于玩家安排时间，让玩家在非游戏时间也有参与感</p></li></ul></li></ul></li><li><p>体力机制</p><ul><li>触发<ul><li>  攻城略池时需要驱动部队前往</li></ul></li><li>机制<ul><li>  驱动部队前往城外地点时，根据距离会对体力进行相应扣减</li></ul></li><li>引入目的<ul><li>  控制玩家在线时长，突出目标游戏体验中的节制感</li><li>  要求玩家谨慎操作，增加策略性和真实感</li></ul></li></ul></li><li><p>资源过量机制</p><ul><li>触发<ul><li>  已有资源超出可负载资源上限</li></ul></li><li>机制<ul><li>  即使资源过量，但系统仍会保留该部分资源</li></ul></li><li>引入目的<ul><li>  减轻玩家因未能及时上线而导致过量资源损耗的挫败感</li><li>  强化目标游戏体验中的节制感</li></ul></li></ul></li></ol><h3 id="6-5-优点"><a href="#6-5-优点" class="headerlink" title="6.5 优点"></a>6.5 优点</h3><ul><li><p>表现层</p><ul><li><p>画面</p><ul><li>  精美，且伴有动效</li></ul></li><li><p>音效</p><ul><li>  与画面和文案相契合，较为贴切</li></ul></li><li><p>文案</p><ul><li>  古风古韵，较为贴切</li></ul></li></ul></li><li><p>操作</p><ul><li><p>竖屏显示</p><ul><li>  降低玩家操作负累感</li></ul></li><li><p>自动战斗</p><ul><li>  可让玩家把精力都放在排兵布阵以及攻城略池的策略安排中</li></ul></li></ul></li><li><p>系统设计</p><ul><li><p>深夜保护机制</p><ul><li>  人性化，防沉迷</li></ul></li><li><p>阵营重置机制</p><ul><li>  人性化</li></ul></li><li><p>离线收益</p><ul><li>  可以让玩家充分利用碎片化时间进行游戏，并且不玩游戏时也有参与感</li></ul></li></ul></li></ul><h3 id="6-6-可迭代点"><a href="#6-6-可迭代点" class="headerlink" title="6.6 可迭代点"></a>6.6 可迭代点</h3><ul><li><p>  游戏评价中所提及的问题</p></li><li><p>当前进度示意</p><ul><li>  主线任务中只有当前所在章节，如果能有总的章节提示，将帮助玩家更好地了解目前游戏进度</li></ul></li><li><p>  注册时的密码输入</p></li></ul><blockquote><p>迭代建议：将此处密码输入时设置为默认不可见模式，以保护用户隐私。</p></blockquote><ul><li>  登录界面信息</li></ul><blockquote><p>迭代建议：建议统一 App Store 中与登录界面中的适龄提示信息</p></blockquote><ul><li>  新手引导中升级内政议政殿的提示</li></ul><blockquote><p>迭代建议：将此处任务部分的提示箭头去除</p></blockquote><h3 id="6-7-结语"><a href="#6-7-结语" class="headerlink" title="6.7 结语"></a>6.7 结语</h3><p>总的而言，游戏上手容易，前期玩法较为直观，引导充足，不会让玩家产生_不知道该干什么_的想法，新手教程过度自然，但是由于缺少当前进度与总体进度的对比示意，会让玩家产生_不知道进行到什么程度_，<em>还有多久才算正式脱离新手教程</em> 的感觉。</p><p>整体画面贴图精度不是非常高，放大后还是会有些许模糊的感觉，但动态特效及自然声效的引入使得玩家未操作时也能有良好的观感。</p><p>除主界面中闪光的_首充_标志外，其余付费元素并没有在游戏中进行特别强调，需要玩家自己进行发掘。</p><p>但游戏中的占领机制、体力机制和离线收益等机制使得玩家能够更好地利用碎片化时间进行游玩。竖屏显示也降低了玩家的操作负累感。同一阵营内只要有玩家达成高等级成就则同阵营玩家皆可获利增强了阵营归属感以及荣辱感，并且无论己方阵营处于三大阵营中任意位置都有相应赛季结局，减轻了玩家的挫败感。游戏定位中的国战、SLG、攻城元素都得到了很好地体现，目标游戏体验的掌控感，策略感和节制感也实现得较好。</p><p>以上便是本体验报告的全部内容。</p>]]></content>
      
      
      <categories>
          
          <category> Study-Game-ExperienceReport </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Portfolio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神将三国首充策划案</title>
      <link href="2021/07/26/shen-jiang-san-guo-first-recharge-plan/"/>
      <url>2021/07/26/shen-jiang-san-guo-first-recharge-plan/</url>
      
        <content type="html"><![CDATA[<h1 id="神将三国首充策划案"><a href="#神将三国首充策划案" class="headerlink" title="神将三国首充策划案"></a>神将三国首充策划案</h1><h2 id="版本更新记录"><a href="#版本更新记录" class="headerlink" title="版本更新记录"></a>版本更新记录</h2><table><thead><tr><th>日期</th><th>版本</th><th>说明</th></tr></thead><tbody><tr><td>20210725</td><td>1.0</td><td>初版策划案</td></tr></tbody></table><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过让玩家完成首充，体会到充值带来的能力提升，从而培养玩家付费习惯。</p><h2 id="需求定位"><a href="#需求定位" class="headerlink" title="需求定位"></a>需求定位</h2><ul><li>需要达成的目标<ul><li>  使玩家付费</li><li>  让首充玩家体会到充值带来的提升/拉开与非付费玩家的差距</li><li>  培养玩家付费习惯</li></ul></li><li>需要考虑的因素<ul><li>  如何让玩家发现并愿意花钱</li><li>奖励设定<ul><li>  高性价比</li></ul></li><li>  如何培养玩家付费习惯</li></ul></li></ul><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li>  玩家需要从未进行过充值。</li><li>  在游戏主界面中显示【首充】按钮，点击后将进入【首充】系统页面，点击【首充】页面中的【前往充值】按钮后进入【充值】系统页面。</li><li>  完成首充后获取相应充值奖励。</li><li>  完成首充后根据条件可获取首充奖励。</li><li>  完成首充后根据限制条件（如只能购买一次）对相应系统状态进行更新。</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726123351.png" style="zoom: 67%;" /><h3 id="配置表"><a href="#配置表" class="headerlink" title="配置表"></a>配置表</h3><style type="text/css">.tg  {border-collapse:collapse;border-spacing:0;}.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;  overflow:hidden;padding:10px 5px;word-break:normal;}.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}.tg .tg-baqh{text-align:center;vertical-align:top}.tg .tg-fymr{border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}.tg .tg-0lax{text-align:left;vertical-align:top}</style><table class="tg"><thead>  <tr>    <th class="tg-fymr">涉及页面 </th>    <th class="tg-1wig">元素名称 </th>    <th class="tg-1wig">元素命名 </th>    <th class="tg-1wig">属性名称 </th>    <th class="tg-1wig">属性命名举例 </th>    <th class="tg-1wig">值举例（对应 ICON 的美术字） </th>  </tr></thead><tbody>  <tr>    <td class="tg-0lax" rowspan="2">游戏主界面 </td>    <td class="tg-0lax" rowspan="2">【首充】按钮 </td>    <td class="tg-baqh" rowspan="2">butt_firstRecharge </td>    <td class="tg-0lax">名称 </td>    <td class="tg-0lax">text_firstRecharge </td>    <td class="tg-0lax">首充 </td>  </tr>  <tr>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_firstRecharge </td>    <td class="tg-0lax"> </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">【首充】页面 </td>    <td class="tg-0lax">【X】按钮 </td>    <td class="tg-0lax">butt_FRreturn </td>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_FRreturn </td>    <td class="tg-0lax"> </td>  </tr>  <tr>    <td class="tg-0lax">【前往充值】按钮 </td>    <td class="tg-0lax">butt_ FRrecharge </td>    <td class="tg-0lax">名称 </td>    <td class="tg-0lax">text_FRrecharge </td>    <td class="tg-0lax">前往充值 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="9">【充值页面-新手特惠】页面 </td>    <td class="tg-0lax">【X】按钮 </td>    <td class="tg-0lax">butt_rechargeReturn </td>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_rechargeReturn </td>    <td class="tg-0lax"> </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="3">对应奖励 </td>    <td class="tg-0lax" rowspan="3">elem_rechargeRewards </td>    <td class="tg-0lax">名称 </td>    <td class="tg-0lax">text_rechargeRewards </td>    <td class="tg-0lax">铜币 </td>  </tr>  <tr>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_rechargeRewards </td>    <td class="tg-0lax">- </td>  </tr>  <tr>    <td class="tg-0lax">数量 </td>    <td class="tg-0lax">num_rechargeRewards </td>    <td class="tg-0lax">10000 </td>  </tr>  <tr>    <td class="tg-0lax">价格按钮 </td>    <td class="tg-0lax">butt_price </td>    <td class="tg-0lax">价格 <br> </td>    <td class="tg-0lax">text_price </td>    <td class="tg-0lax">免费 <br>￥6 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">限制条件 </td>    <td class="tg-0lax" rowspan="2">elem_restrictions </td>    <td class="tg-0lax">名称 </td>    <td class="tg-0lax">text_restrictions </td>    <td class="tg-0lax">限购 1 次 </td>  </tr>  <tr>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_restrictions </td>    <td class="tg-0lax"> </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">已有充值点 </td>    <td class="tg-0lax" rowspan="2">elem_rechargePoints </td>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_gold </td>    <td class="tg-0lax">- </td>  </tr>  <tr>    <td class="tg-0lax">数额 </td>    <td class="tg-0lax">num_gold </td>    <td class="tg-0lax">200 </td>  </tr>  <tr>    <td class="tg-0lax">【付款失败】页面 </td>    <td class="tg-0lax">充值失败弹窗 </td>    <td class="tg-0lax">notice_chargeFail </td>    <td class="tg-0lax">提示内容 </td>    <td class="tg-0lax">text_chargeFail </td>    <td class="tg-0lax">充值失败 购买失败 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">【首充完成 - 第一天奖励待领取】页面 </td>    <td class="tg-0lax">【X】按钮 </td>    <td class="tg-0lax">butt_FRreturn </td>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_FRreturn </td>    <td class="tg-0lax"> </td>  </tr>  <tr>    <td class="tg-0lax">【领取】按钮 </td>    <td class="tg-0lax">butt_FRreceive </td>    <td class="tg-0lax"> 名称 </td>    <td class="tg-0lax">text_FRreceive </td>    <td class="tg-0lax"> 领取 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">【首充完成 - 第一天奖励已领取】页面 </td>    <td class="tg-0lax">【X】按钮 </td>    <td class="tg-0lax">butt_FRreturn </td>    <td class="tg-0lax">图标 </td>    <td class="tg-0lax">icon_FRreturn </td>    <td class="tg-0lax"> </td>  </tr>  <tr>    <td class="tg-0lax">【明日再来】按钮 </td>    <td class="tg-0lax">butt_FRtomorrow </td>    <td class="tg-0lax"> 名称 </td>    <td class="tg-0lax">text_FRtomorrow </td>    <td class="tg-0lax"> 明日再来 </td>  </tr></tbody></table><h3 id="界面交互功能"><a href="#界面交互功能" class="headerlink" title="界面交互功能"></a>界面交互功能</h3><style type="text/css">.tg  {border-collapse:collapse;border-spacing:0;}.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;  overflow:hidden;padding:10px 5px;word-break:normal;}.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}.tg .tg-fymr{border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}.tg .tg-0lax{text-align:left;vertical-align:top}</style><table class="tg"><thead>  <tr>    <th class="tg-fymr">涉及页面 </th>    <th class="tg-1wig">点击位置 </th>    <th class="tg-1wig">元素名称 </th>    <th class="tg-1wig">点击效果 </th>  </tr></thead><tbody>  <tr>    <td class="tg-0lax">游戏主界面 </td>    <td class="tg-0lax">【首充】按钮 </td>    <td class="tg-0lax">首充 </td>    <td class="tg-0lax">前往【首充】页面 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="3">【首充】页面 </td>    <td class="tg-0lax">【X】 </td>    <td class="tg-0lax">返回 </td>    <td class="tg-0lax">返回【游戏主界面】 </td>  </tr>  <tr>    <td class="tg-0lax">【前往充值】按钮 </td>    <td class="tg-0lax">前往充值 </td>    <td class="tg-0lax">前往【充值】页面 </td>  </tr>  <tr>    <td class="tg-0lax">对应充值奖励 </td>    <td class="tg-0lax">- </td>    <td class="tg-0lax">显示该奖励的物品信息 </td>  </tr>  <tr>    <td class="tg-0lax">【首充页面-物品信息】 </td>    <td class="tg-0lax">除物品信息栏外的部分或者【→】 </td>    <td class="tg-0lax">- <br> </td>    <td class="tg-0lax">返回【首充】页面 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="3">【充值页面-新手特惠】 </td>    <td class="tg-0lax">【→】 </td>    <td class="tg-0lax">返回 </td>    <td class="tg-0lax">返回【首充】页面 </td>  </tr>  <tr>    <td class="tg-0lax">对应充值奖励 </td>    <td class="tg-0lax">- </td>    <td class="tg-0lax">显示该奖励的物品信息 </td>  </tr>  <tr>    <td class="tg-0lax">充值方案对应金额 </td>    <td class="tg-0lax">价格 </td>    <td class="tg-0lax">调用付款系统 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">【充值奖励领取】 </td>    <td class="tg-0lax">对应充值奖励 </td>    <td class="tg-0lax">- </td>    <td class="tg-0lax">显示该奖励的物品信息 </td>  </tr>  <tr>    <td class="tg-0lax">除物品信息栏外的部分 </td>    <td class="tg-0lax">- </td>    <td class="tg-0lax">返回【充值】页面 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="3">【首充完成 - 第一天奖励待领取】 </td>    <td class="tg-0lax">【X】 </td>    <td class="tg-0lax">返回 </td>    <td class="tg-0lax">返回【游戏主界面】 </td>  </tr>  <tr>    <td class="tg-0lax">【领取】按钮 </td>    <td class="tg-0lax">领取 </td>    <td class="tg-0lax">显示领取的奖励 </td>  </tr>  <tr>    <td class="tg-0lax">对应充值奖励 </td>    <td class="tg-0lax">- </td>    <td class="tg-0lax">显示该奖励的物品信息 </td>  </tr>  <tr>    <td class="tg-0lax" rowspan="2">【首充完成 - 第一天奖励已领取】 </td>    <td class="tg-0lax">【X】 </td>    <td class="tg-0lax">返回 <br> </td>    <td class="tg-0lax">返回【游戏主界面】 </td>  </tr>  <tr>    <td class="tg-0lax">对应充值奖励 </td>    <td class="tg-0lax">- </td>    <td class="tg-0lax">显示该奖励的物品信息 </td>  </tr></tbody></table><h2 id="数值需求"><a href="#数值需求" class="headerlink" title="数值需求"></a>数值需求</h2><ul><li>整体目标<ul><li>  需要让首充玩家体会到很高的性价比</li><li>  需要让首充玩家感觉与没充值时有了提升</li></ul></li></ul><h2 id="美术需求"><a href="#美术需求" class="headerlink" title="美术需求"></a>美术需求</h2><h3 id="涉及页面原型"><a href="#涉及页面原型" class="headerlink" title="涉及页面原型"></a>涉及页面原型</h3><h4 id="游戏主界面"><a href="#游戏主界面" class="headerlink" title="游戏主界面"></a>游戏主界面</h4><img src="https://4399.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGE1ZjBiZTAwMzhlNDNmZDVlNTQzNTY0MTc0MzcyNzdfcm50S21hR0VEMktkancyckd3bzlRcWY2Y3V3VEF4R2hfVG9rZW46Ym94Y25iUlczaTV6VjRLVmNvb1lzdW9jOVJiXzE2MjcyOTU0MzU6MTYyNzI5OTAzNV9WNA" style="zoom: 33%;" /><h4 id="【首充】页面"><a href="#【首充】页面" class="headerlink" title="【首充】页面"></a>【首充】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10291627172769_.pic_hd.jpg" style="zoom: 33%;" /><h4 id="【充值】页面"><a href="#【充值】页面" class="headerlink" title="【充值】页面"></a>【充值】页面</h4><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10301627172771_.pic_hd.jpg" style="zoom:30%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10311627172772_.pic_hd.jpg" style="zoom: 25%;" /></p><h4 id="【付款】页面"><a href="#【付款】页面" class="headerlink" title="【付款】页面"></a>【付款】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210726142456.png" style="zoom: 33%;" /><h4 id="【付款失败】页面"><a href="#【付款失败】页面" class="headerlink" title="【付款失败】页面"></a>【付款失败】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10351627172776_.pic_hd.jpg" style="zoom: 33%;" /><h4 id="【付款成功】页面"><a href="#【付款成功】页面" class="headerlink" title="【付款成功】页面"></a>【付款成功】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10351627172776_.pic_hd.jpg" style="zoom: 33%;" /><h4 id="【充值奖励获取】页面"><a href="#【充值奖励获取】页面" class="headerlink" title="【充值奖励获取】页面"></a>【充值奖励获取】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10361627172781_.pic_hd.jpg" style="zoom: 33%;" /><h4 id="【首充完成-第一天奖励待领取】页面"><a href="#【首充完成-第一天奖励待领取】页面" class="headerlink" title="【首充完成 - 第一天奖励待领取】页面"></a>【首充完成 - 第一天奖励待领取】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10371627172783_.pic_hd.jpg" style="zoom: 33%;" /><h4 id="【首充完成-第一天奖励已领取】页面"><a href="#【首充完成-第一天奖励已领取】页面" class="headerlink" title="【首充完成 - 第一天奖励已领取】页面"></a>【首充完成 - 第一天奖励已领取】页面</h4><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10391627173172_.pic_hd.jpg" style="zoom: 33%;" /><h3 id="图标-amp-UI-amp-特效需求-ICON-位置-式样-特效"><a href="#图标-amp-UI-amp-特效需求-ICON-位置-式样-特效" class="headerlink" title="图标 &amp; UI &amp; 特效需求 - ICON/位置/式样/特效"></a>图标 &amp; UI &amp; 特效需求 - ICON/位置/式样/特效</h3><style type="text/css">.tg  {border-collapse:collapse;border-spacing:0;}.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;  overflow:hidden;padding:10px 5px;word-break:normal;}.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}.tg .tg-fymr{border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}</style><table class="tg"><thead>  <tr>    <th class="tg-fymr">涉及页面 </th>    <th class="tg-fymr">目标元素 </th>    <th class="tg-fymr"> ICON </th>    <th class="tg-fymr">位置 </th>    <th class="tg-fymr">式样 </th>    <th class="tg-fymr">特效 </th>    <th class="tg-fymr">对应原型 </th>  </tr></thead><tbody>  <tr>    <td class="tg-0pky">游戏主界面 </td>    <td class="tg-0pky">【首充】按钮 </td>    <td class="tg-0pky">首充能获得的奖励 </td>    <td class="tg-0pky">需与主界面中其他 ICON 放置在一起 </td>    <td class="tg-0pky">需要突出显示，能与别的图标区分开 </td>    <td class="tg-0pky">按钮边缘高亮，需要能吸引玩家注意力 </td>    <td class="tg-0pky"><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10381627172812_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-c3ow" rowspan="4">【首充】页面 </td>    <td class="tg-0pky">【X】 </td>    <td class="tg-0pky">叉.jpg </td>    <td class="tg-0pky">屏幕右上方 </td>    <td class="tg-0pky">符合整体美术风格 </td>    <td class="tg-0pky">- </td>    <td class="tg-c3ow" rowspan="4"> <br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10291627172769_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-0pky">首充奖励中最好的奖励 </td>    <td class="tg-0pky">奖励的图片 </td>    <td class="tg-0pky">画面主体 </td>    <td class="tg-0pky">立绘 </td>    <td class="tg-0pky">动态显示 </td>  </tr>  <tr>    <td class="tg-0pky">对应充值奖励 </td>    <td class="tg-0pky">对应奖励的图标 </td>    <td class="tg-0pky">主体奖励下方 </td>    <td class="tg-0pky">分天显示 <br>每个奖励用框体框柱 <br>每个奖励根据其物品等级用不同颜色框体及颜色显示 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">【前往充值】按钮 </td>    <td class="tg-0pky">前往充值美术字 </td>    <td class="tg-0pky">首充奖励下方 </td>    <td class="tg-0pky">显示在框体中 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-c3ow" rowspan="6">【充值页面-新手特惠】 </td>    <td class="tg-0pky">充值方案的分类 </td>    <td class="tg-0pky">宝箱 </td>    <td class="tg-0pky">每个充值方案的左方 </td>    <td class="tg-0pky">符合整体美术风格 </td>    <td class="tg-0pky">- </td>    <td class="tg-c3ow" rowspan="6"> <br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10311627172772_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-0pky">对应充值奖励 </td>    <td class="tg-0pky">对应奖励的图标 </td>    <td class="tg-0pky">每个充值方案的主体 </td>    <td class="tg-0pky">每个奖励用框体框柱 <br>每个奖励根据其物品等级用不同颜色框体及颜色显示 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">充值方案的特殊说明 </td>    <td class="tg-0pky">对应说明的美术字 </td>    <td class="tg-0pky">每个充值方案的右方 </td>    <td class="tg-0pky">挂坠 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">充值方案的价格 </td>    <td class="tg-0pky">对应价格的美术字 </td>    <td class="tg-0pky">每个充值方案的下方 </td>    <td class="tg-0pky">用框体框柱 <br>高对比度 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">当前所有玉帛 </td>    <td class="tg-0pky">玉帛.jpg </td>    <td class="tg-0pky">页面左下方 </td>    <td class="tg-0pky">见原型 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">当前所有金币 </td>    <td class="tg-0pky">金币.jpg </td>    <td class="tg-0pky">玉帛右方 </td>    <td class="tg-0pky">见原型 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">【付款失败】 </td>    <td class="tg-0pky">付款失败提醒 </td>    <td class="tg-0pky">- </td>    <td class="tg-0pky">屏幕中部 </td>    <td class="tg-0pky">弹窗 </td>    <td class="tg-0pky">- </td>    <td class="tg-0pky"><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10351627172776_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-0pky">【充值奖励领取】 </td>    <td class="tg-0pky">对应充值奖励 </td>    <td class="tg-0pky">对应奖励的图标 </td>    <td class="tg-0pky">主体奖励下方 </td>    <td class="tg-0pky">每个奖励用框体框柱 <br>每个奖励根据其物品等级用不同颜色框体及颜色显示 </td>    <td class="tg-0pky">- </td>    <td class="tg-0pky"><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10361627172781_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-c3ow" rowspan="4">【首充完成 - 第一天奖励待领取】 </td>    <td class="tg-0pky">【X】 </td>    <td class="tg-0pky">叉.jpg </td>    <td class="tg-0pky">屏幕右上方 </td>    <td class="tg-0pky">符合整体美术风格 </td>    <td class="tg-0pky">- </td>    <td class="tg-c3ow" rowspan="4"> <br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10371627172783_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-0pky">首充奖励中最好的奖励 </td>    <td class="tg-0pky">奖励的图片 </td>    <td class="tg-0pky">画面主体 </td>    <td class="tg-0pky">立绘 </td>    <td class="tg-0pky">动态显示 </td>  </tr>  <tr>    <td class="tg-0pky">对应充值奖励 </td>    <td class="tg-0pky">对应奖励的图标 </td>    <td class="tg-0pky">主体奖励下方 </td>    <td class="tg-0pky">分天显示 <br>每个奖励用框体框柱 <br>每个奖励根据其物品等级用不同颜色框体及颜色显示 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">【领取】按钮 </td>    <td class="tg-0pky">领取美术字 </td>    <td class="tg-0pky">首充奖励下方 </td>    <td class="tg-0pky">显示在框体中 <br>高对比度 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-c3ow" rowspan="5">【首充完成 - 第一天奖励已领取】 </td>    <td class="tg-0pky">【X】 </td>    <td class="tg-0pky">叉.jpg </td>    <td class="tg-0pky">屏幕右上方 </td>    <td class="tg-0pky">符合整体美术风格 </td>    <td class="tg-0pky">- </td>    <td class="tg-c3ow" rowspan="5"> <br><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/10391627173172_.pic_hd.jpg"> </td>  </tr>  <tr>    <td class="tg-0pky">首充奖励中最好的奖励 </td>    <td class="tg-0pky">奖励的图片 </td>    <td class="tg-0pky">画面主体 </td>    <td class="tg-0pky">立绘 </td>    <td class="tg-0pky">动态显示 </td>  </tr>  <tr>    <td class="tg-0pky">对应充值奖励 <br> </td>    <td class="tg-0pky">对应奖励的图标 </td>    <td class="tg-0pky">主体奖励下方 </td>    <td class="tg-0pky">分天显示 <br>每个奖励用框体框柱 <br>每个奖励根据其物品等级用不同颜色框体及颜色显示 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">【已领取】提示 </td>    <td class="tg-0pky">已领取.jpg </td>    <td class="tg-0pky">显示在已领取的奖励前面 </td>    <td class="tg-0pky">半透明 <br>将已领取的奖励置为已领取状态 </td>    <td class="tg-0pky">- </td>  </tr>  <tr>    <td class="tg-0pky">【明日再来】按钮 </td>    <td class="tg-0pky">明日再来美术字 </td>    <td class="tg-0pky">首充奖励下方 </td>    <td class="tg-0pky">显示在框体中 </td>    <td class="tg-0pky">- </td>  </tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Study-Game-Proposal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Portfolio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)</title>
      <link href="2021/07/16/games101-8-20200306-20210708-shading-2-shading-pipeline-and-texture-mapping/"/>
      <url>2021/07/16/games101-8-20200306-20210708-shading-2-shading-pipeline-and-texture-mapping/</url>
      
        <content type="html"><![CDATA[<h1 id="8-20200306-20210708-Shading-2-Shading-Pipeline-and-Texture-Mapping"><a href="#8-20200306-20210708-Shading-2-Shading-Pipeline-and-Texture-Mapping" class="headerlink" title="8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)"></a>8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)</h1><h2 id="A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="A Simple Shading Model (Blinn-Phong Reflectance Model)"></a>A Simple Shading Model (Blinn-Phong Reflectance Model)</h2><h3 id="Diffuse-Term-last-time"><a href="#Diffuse-Term-last-time" class="headerlink" title="Diffuse Term (last time)"></a>Diffuse Term (last time)</h3><h3 id="Specular-Term-Blinn-Phong"><a href="#Specular-Term-Blinn-Phong" class="headerlink" title="Specular Term (Blinn-Phong)"></a>Specular Term (Blinn-Phong)</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709111209.png" alt="Specular Term (Blinn-Phong)" style="zoom: 25%;" /><ul><li><p>高光项是因为观察方向和镜面反射方向足够接近（$\bf{v,R}$ 足够接近）</p></li><li><p>相当于法线方向 $\vec n$ 和半程向量 $\vec h$（即 $\bf{I,v}$ 向量加和后归一的方向）很接近</p></li><li><p>diffuse<br>$L_d = k_d (I/r^2)\max(0,\bf{n · l})$</p></li><li><p>specular<br>$L_s = k_s (I/r^2)\max(0,\cos \alpha)^p\<br>= k_s (I/r^2)\max(0,\bf{n · h})^p$</p><ul><li><p>这里按理也要考虑能量吸收 $\max(0,\bf{n · l})$<br>但因为 blinn-phong 是经验模型 所以简化掉了</p></li><li><p>$p$ 指数为高光修正 用于控制高光可见范围  为保证只有小范围能看到高光 可能值为 100-200</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112445.png" alt="Cosine Power Plots" style="zoom:33%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112607.png" alt="Specular Term (Blinn-Phong)" style="zoom:33%;" /></li></ul></li></ul><h3 id="Ambient-Term-Blinn-Phong"><a href="#Ambient-Term-Blinn-Phong" class="headerlink" title="Ambient Term (Blinn-Phong)"></a>Ambient Term (Blinn-Phong)</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112712.png" alt="Ambient Term (Blinn-Phong)" style="zoom:33%;" /><ul><li>$L_a = k_a I_a$<ul><li>环境光不管从哪里进来 和 v 无关</li><li>假设在哪里看都一样    和 w 无关</li><li>环境光是常数 作用是保证没有地方是完全黑的</li><li>精确计算需要环境光照</li></ul></li></ul><h3 id="Sum-Blinn-Phong-Reflection-Model"><a href="#Sum-Blinn-Phong-Reflection-Model" class="headerlink" title="Sum: Blinn-Phong Reflection Model"></a>Sum: Blinn-Phong Reflection Model</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112858.png" alt="Sum: Blinn-Phong Reflection Model" style="zoom:33%;" /><ul><li>$L = L_a + L_d + L_s$</li></ul><h1 id="Shading-Frequencies-着色频率"><a href="#Shading-Frequencies-着色频率" class="headerlink" title="Shading Frequencies 着色频率"></a>Shading Frequencies 着色频率</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709113253.png" alt="Shading Frequencies" style="zoom:33%;" /><ul><li><p>着色频率：（着色粒度）着色应用在哪些点</p><ul><li>分别表示着色在平面/顶点/像素上</li></ul></li><li><p>每个平面着色 (flat shading)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709113347.png" alt="flat shading" style="zoom:33%;" /></li><li><p>每个顶点着色 (Gouraud shading)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713181855.png" alt="Gouraud shading" style="zoom:33%;" /><ul><li>内部插值</li></ul></li><li><p>每个像素着色 (Phong shading)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210716125759.png" alt="Phong shading" style="zoom:33%;" /><ul><li>not the blinn-phong reflectance model (model 是着色模型，phong shading 是着色频率)</li></ul></li><li><p>计算量开销不一定谁大</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709113559.png" alt="计算量开销不一定谁大" style="zoom:33%;" /></li></ul><h2 id="Defining-Per-Vertex-Normal-Vectors-算逐顶点法线"><a href="#Defining-Per-Vertex-Normal-Vectors-算逐顶点法线" class="headerlink" title="Defining Per-Vertex Normal Vectors 算逐顶点法线"></a>Defining Per-Vertex Normal Vectors 算逐顶点法线</h2><ul><li><p>做顶点所关联的面的法线做加权平均</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709113816.png" alt="Defining Per-Vertex Normal Vectors" style="zoom:33%;" /></li></ul><h2 id="Defining-Per-Pixel-Normal-Vectors-算逐像素法线"><a href="#Defining-Per-Pixel-Normal-Vectors-算逐像素法线" class="headerlink" title="Defining Per-Pixel Normal Vectors 算逐像素法线"></a>Defining Per-Pixel Normal Vectors 算逐像素法线</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709113854.png" alt="Defining Per-Pixel Normal Vectors" style="zoom:33%;" /><ul><li>需要用重心坐标</li></ul><hr><blockquote><p>把以上内容合起来</p></blockquote><h1 id="Graphics-Real-time-Rendering-Pipeline"><a href="#Graphics-Real-time-Rendering-Pipeline" class="headerlink" title="Graphics (Real-time Rendering) Pipeline"></a>Graphics (Real-time Rendering) Pipeline</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709114026.png" alt="Graphics (Real-time Rendering) Pipeline" style="zoom:33%;" /><ul><li><p>Graphics Pipeline</p><ul><li><p>vertex processing 输入一堆点</p></li><li><p>MVP 投影到屏幕上</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709114447.png" alt="Graphics Pipeline - MVP" style="zoom:33%;" /></li><li><p>Triangle Processing 形成三角形</p></li><li><p>Rasterization 光栅化离散成 fragments  （fragment 类比于像素）</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709114533.png" alt="Graphics Pipeline - Rasterization" style="zoom:33%;" /></li><li><p>Fragment Processing 着色 shading</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709114644.png" alt="Graphics Pipeline - Fragment Processing - Z-Buffer" style="zoom:33%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709114724.png" alt="Graphics Pipeline - Fragment Processing - Shading" style="zoom:33%;" /><ul><li>需要看到底是顶点着色还是像素着色</li><li>控制顶点/像素着色的着色器：shader</li><li>texture mapping 纹理映射</li></ul></li><li><p>显示 output</p></li></ul></li></ul><h1 id="Shader-Programs"><a href="#Shader-Programs" class="headerlink" title="Shader Programs"></a>Shader Programs</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709114910.png" alt="Shader Programs" style="zoom:33%;" /><ul><li><p>每个顶点/fragment会执行一次 所以只考虑一个顶点/像素的操作</p></li><li><p>写的是通用程序</p><ul><li>如果写的是顶点操作 - vertex shader</li><li>如果写的是fragment - fragment shader</li></ul><p>  <a href="http://shadertoy.com/">Shadertoy BETA</a></p>  <img src="https://p88.tr2.n0.cdn.getcloudapp.com/items/eDuxj2Rd/Image+2020-03-06+at+10.49.08.png?v=2373a38c9d045c08edbe031686411c97.png" alt="Snail Shader Program" style="zoom: 50%;" /></li><li><p>Inigo Quilez</p><ul><li>Procedurally modeled, 800 line shader.</li><li><a href="http://shadertoy.com/view/ld3Gz2">http://shadertoy.com/view/ld3Gz2</a></li></ul></li></ul><hr><blockquote><p>线代图形学发展</p></blockquote><h1 id="Goal-Highly-Complex-3D-Scenes-in-Realtime"><a href="#Goal-Highly-Complex-3D-Scenes-in-Realtime" class="headerlink" title="Goal: Highly Complex 3D Scenes in Realtime"></a>Goal: Highly Complex 3D Scenes in Realtime</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709115545.png" alt="Goal: Highly Complex 3D Scenes in Realtime" style="zoom:33%;" /><h1 id="Graphics-Pipeline-Implementation-GPUs"><a href="#Graphics-Pipeline-Implementation-GPUs" class="headerlink" title="Graphics Pipeline Implementation: GPUs"></a>Graphics Pipeline Implementation: GPUs</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709115704.png" alt="Graphics Pipeline Implementation: GPUs" style="zoom:33%;" /><ul><li><p>实现</p></li><li><p>三角形怎么光栅化</p></li><li><p>如何投影</p></li><li><p>…</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709115812.png" alt="GPU" style="zoom:33%;" /><ul><li>GPU：可以理解为高度并行化的处理器</li></ul></li></ul><blockquote><p>以上为图形管线</p></blockquote><hr><h1 id="Texture-Mapping-纹理映射"><a href="#Texture-Mapping-纹理映射" class="headerlink" title="Texture Mapping 纹理映射"></a>Texture Mapping 纹理映射</h1><ul><li><p>Different Colors at different places</p>  <img src="https://p88.tr2.n0.cdn.getcloudapp.com/items/YEuARGkY/Image+2020-03-06+at+10.55.37.png?v=bcc81dcc9d56d81285227e584eea545d.png" alt="Different Colors at different places" style="zoom: 50%;" /></li><li><p>引入纹理映射的原因：在物体不同位置引入不同属性</p><ul><li>如漫反射属性</li></ul></li><li><p>纹理和着色的区别：</p><ul><li>纹理：定义着色的时候各个不同点的属性 不希望每个点都以相同方式进行着色</li></ul></li><li><p>Surfaces are 2D</p>  <img src="https://p88.tr2.n0.cdn.getcloudapp.com/items/Z4u5olD6/Image+2020-03-06+at+10.57.18.png?v=4af3e8b64feaa103359e7f0bbbef350a.png" alt="Surfaces are 2D" style="zoom: 50%;" /><ul><li>每个三维物体的表面都是二维</li><li>纹理：就是一张图 有一一对应关系</li></ul></li><li><p>Texture Applied to Surface</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709120336.png" alt="Texture Applied to Surface" style="zoom:33%;" /></li><li><p>如何把空间中的三角形映射到纹理上？</p><ul><li>美工/程序人工映射</li><li>自动映射 parameterazation 参数化 很难</li></ul></li><li><p>Visualization of Texutre Coordinates</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709120613.png" alt="Visualization of Texutre Coordinates" style="zoom:33%;" /></li><li><p>uv 纹理坐标系</p><ul><li>范围 0-1</li></ul></li><li><p>可重复使用</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709120714.png" alt="Texture Applied to Surface" style="zoom:33%;" /></li><li><p>Textures can be used multiple times</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709120757.png" alt="Textures can be used multiple times" style="zoom:33%;" /><ul><li>纹理设计得好就可以无缝衔接</li><li>tileable texture</li><li>Wang tiling</li></ul></li></ul><hr><ul><li>next：知道三角形三个顶点 uv<br>如何知道三角形内部 uv - 插值</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-7 20200303 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)</title>
      <link href="2021/07/16/games101-7-20200303-20210708-shading-1-illumination-shading-and-graphics-pipeline/"/>
      <url>2021/07/16/games101-7-20200303-20210708-shading-1-illumination-shading-and-graphics-pipeline/</url>
      
        <content type="html"><![CDATA[<h1 id="7-20200303-20210708-Shading-1-Illumination-Shading-and-Graphics-Pipeline"><a href="#7-20200303-20210708-Shading-1-Illumination-Shading-and-Graphics-Pipeline" class="headerlink" title="7 20200303 / 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)"></a>7 20200303 / 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)</h1><h1 id="深度缓存：解决可见性-遮挡问题"><a href="#深度缓存：解决可见性-遮挡问题" class="headerlink" title="深度缓存：解决可见性/遮挡问题"></a>深度缓存：解决可见性/遮挡问题</h1><h2 id="Painter’s-Algorithm"><a href="#Painter’s-Algorithm" class="headerlink" title="Painter’s Algorithm"></a>Painter’s Algorithm</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708125836.png" alt="Painter's Algorithm" style="zoom: 50%;" /><ul><li>从后向前绘制，<strong>overwrite</strong> in the frame buffer</li><li>需要考虑绘制顺序</li><li>Requires sorting in depth (O(n log n) for n triangles) Can have unresolvable depth order<ul><li>但会出现无法定义深度关系的情况</li></ul></li></ul><h3 id="Z-Buffer-深度缓存"><a href="#Z-Buffer-深度缓存" class="headerlink" title="Z-Buffer 深度缓存"></a>Z-Buffer 深度缓存</h3><ul><li><p>This is the algorithm that eventually won.</p></li><li><p>Idea:</p><ul><li>Store current min. z-value for each sample (pixel) 记录像素最浅深度</li><li>Needs an additional buffer for depth values</li><li>frame buffer stores color values (color buffer)</li><li>depth buffer (z-buffer) stores depth (depth buffer)</li></ul></li><li><p>IMPORTANT: For simplicity we suppose</p><ul><li><p>z is always positive<br>(smaller z -&gt; closer, larger z -&gt; further)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708130237.png" alt="Z-Buffer examples" style="zoom: 33%;" /></li></ul></li><li><p>Algorighm</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708130440.png" alt="Z-Buffer Algorithm" style="zoom: 33%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708130621.png" alt="Z-Buffer Algorithm cont." style="zoom: 33%;" /><ul><li>初始深度无限远</li><li>把三角形做光栅化为像素</li><li>找到像素后找到其深度</li><li>z 值小就更新</li></ul></li><li><p>z-buffer Complexity</p></li><li><p>O(n) for n triangles (assuming constant coverage)</p></li><li><p>How is it possible to sort n triangles in linear time?</p><ul><li>并没有排序 只是进行了比较 找最小值</li></ul></li><li><p>绘制顺序不同不影响结果</p><ul><li>两个浮点数基本不可能完全相等</li></ul></li><li><p>Most important visibility algorithm</p><ul><li>Implemented in hardware for all GPUs</li></ul></li><li><p>z-buffer 处理不了透明物体</p></li></ul><h1 id="What-we’ve-covered-so-far"><a href="#What-we’ve-covered-so-far" class="headerlink" title="What we’ve covered so far"></a>What we’ve covered so far</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708131319.png" alt="What we've covered so far" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708131557.png" alt="Rotating Cubes" style="zoom:33%;" /><h1 id="Shading-着色"><a href="#Shading-着色" class="headerlink" title="Shading 着色"></a>Shading 着色</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ul><li>In Merriam-Webster Dictionary<ul><li>shading,  noun<br>The darkening or coloring of an illustration or diagram with parallel lines or a block of color.</li><li>In this course<ul><li>The process of applying a material to an object.</li></ul></li></ul></li></ul><h2 id="A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="A Simple Shading Model (Blinn-Phong Reflectance Model)"></a>A Simple Shading Model (Blinn-Phong Reflectance Model)</h2><ul><li><p>Perceptual Observations</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708132803.png" alt="Perceptual Observations" style="zoom:33%;" /><ul><li>高光 specular highlights</li><li>漫反射 diffuse reflection</li><li>环境光 ambient lighting</li></ul></li><li><p>Shading is Local - 着色局部性只看自己 不考虑其他任何物体的存在 所以没有阴影 (shading ≠ shadow)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708133217.png" alt="Shading is Local" style="zoom:33%;" /></li></ul><h3 id="Diffuse-Reflection"><a href="#Diffuse-Reflection" class="headerlink" title="Diffuse Reflection"></a>Diffuse Reflection</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708133534.png" alt="Diffuse Reflection" style="zoom:33%;" /><ul><li><p>把光看作能量 （Lambert）<br>看着色点周围单位面积能够接收到多少能量<br>直射接收到的能量 &gt; 折射接收到的能量</p></li><li><p>Light Falloff</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708133918.png" alt="Light Falloff" style="zoom:33%;" /><ul><li>能量守恒 - 单位点的能量越来越小 （不同球体表面积所含能量相同）</li></ul></li><li><p>Lambertian (Diffuse) Shading</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708134228.png" alt="Lambertian (Diffuse) Shading" style="zoom:33%;" /></li><li><p>$L_d = k_d (I/r^2)\max(0,\bf{n · l})$</p><ul><li>$k_d$: 着色点对于光的吸收率<ul><li>如果 $k_d = 1$<ul><li>表示该点完全不吸收能量 - 最亮</li></ul></li><li>如果 $k_d = 0$<ul><li>表示该点完全吸收能量没有能量反射出去 - 最暗</li></ul></li><li>如果定义为三通道的 rgb 分别有 01<ul><li>那么就可以定义颜色值</li></ul></li></ul></li><li>$I/r^2$：传播到着色点的强度（结合能量球来看 总面积为 $4\pi r^2$ 距离为 r，那么单位强度就是 $\frac{I}{4\pi r^2}$，为平方反比关系）<ul><li>I: 点光源在单位距离上的强度</li><li>r: 点光源和着色点的距离</li></ul></li><li>$max(0, \bf{n · l})$<ul><li>为什么有 0<ul><li>如果是负数代表从反面照射没有意义</li></ul></li><li>$\bf{n · l}$ 为余弦角</li><li>整体表示被着色点能接收到的能量的比例</li></ul></li><li>漫反射与V无关 - 和观测点无关</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-6 20200228 20210708 Rasterization 2 anti - aliasing and Z - buffering</title>
      <link href="2021/07/16/games101-6-20200228-20210708-rasterization-2-anti-aliasing-and-z-buffering/"/>
      <url>2021/07/16/games101-6-20200228-20210708-rasterization-2-anti-aliasing-and-z-buffering/</url>
      
        <content type="html"><![CDATA[<h1 id="6-20200228-20210708-Rasterization-2-anti-aliasing-and-Z-buffering"><a href="#6-20200228-20210708-Rasterization-2-anti-aliasing-and-Z-buffering" class="headerlink" title="6 20200228/20210708 Rasterization 2 anti-aliasing and Z-buffering"></a>6 20200228/20210708 Rasterization 2 anti-aliasing and Z-buffering</h1><h2 id="Sampling-Artifacts-Errors-Mistakes-Inaccuracies-in-Computer-Graphics"><a href="#Sampling-Artifacts-Errors-Mistakes-Inaccuracies-in-Computer-Graphics" class="headerlink" title="Sampling Artifacts (Errors / Mistakes / Inaccuracies) in Computer Graphics"></a>Sampling Artifacts (Errors / Mistakes / Inaccuracies) in Computer Graphics</h2><ul><li><p>采样的例子</p><ul><li>rasterization = sample 2d positions</li><li>photograph = sample image sensor plane</li></ul></li><li><p>video = sample time</p></li><li><p>采样瑕疵的例子 sampling artifacts</p><ul><li><p>Jaggies (staircase pattern)</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105306.png" alt="Jaggies (staircase pattern)" style="zoom: 25%;" /></li><li><p>Moiré Patterns in Imaging</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105327.png" alt="Moiré Patterns in Imaging" style="zoom: 25%;" /></li><li><p>Wagon Wheel Illusion (False Motion)</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105353.png" alt="Wagon Wheel Illusion (False Motion)" style="zoom: 25%;" /><ul><li>原因：人眼在时间上的采样跟不上运动速度</li></ul></li></ul></li><li><p>采样瑕疵的本质</p><ul><li>Signals are changing too fast (high frequency), but sampled too slowly</li></ul></li></ul><h1 id="Antialiasing-Idea-Blurring-Pre-Filtering-Before-Sampling"><a href="#Antialiasing-Idea-Blurring-Pre-Filtering-Before-Sampling" class="headerlink" title="Antialiasing Idea: Blurring (Pre-Filtering) Before Sampling"></a>Antialiasing Idea: Blurring (Pre-Filtering) Before Sampling</h1><ul><li><p>先模糊滤波再采样</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105614.png" alt="Rasterization: Point Sampling in Space" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105628.png" alt="Rasterization: Antialiased Sampling" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105754.png" alt="效果对比" style="zoom:25%;" /></li></ul><h1 id="But-why"><a href="#But-why" class="headerlink" title="But why?"></a>But why?</h1><ol><li>Why undersampling introduces aliasing?</li><li>Why pre-filtering then sampling can do antialiasing?</li></ol><ul><li><p>Let’s dig into fundamental reasons</p><p>And look at how to implement antialiased rasterization</p></li><li><p>为什么先采样再模糊不行</p><ul><li>先采样后 频谱已经发生了混叠</li><li>此时再模糊 得到的结果还是混叠的频谱</li></ul></li></ul><h1 id="Frequency-domain-频域"><a href="#Frequency-domain-频域" class="headerlink" title="Frequency domain 频域"></a>Frequency domain 频域</h1><ul><li><p>Frequencies</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105917.png" alt="Frequencies" style="zoom:25%;" /></li></ul><h2 id="Fourier-Transform"><a href="#Fourier-Transform" class="headerlink" title="Fourier Transform"></a>Fourier Transform</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110031.png" alt="Fourier Transform" style="zoom:25%;" /><ul><li><p>傅里叶级数展开：任何一个周期函数都可以写成一系列正弦余弦函数线性组合以及一个常数项</p><ul><li>任何一个函数都可分解为不同频率</li></ul></li><li><p>fourier Transform Decomposes A Signal into Frequencies 傅里叶变换（把一个函数变为另一个，或者反过来）把函数分解为不同频率的段并分别显示出来</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110225.png" alt="fourier Transform Decomposes A Signal into Frequencies" style="zoom:25%;" /></li><li><p>Higher Frequencies Need Faster Sampling</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110352.png" alt="Higher Frequencies Need Faster Sampling" style="zoom:25%;" /></li><li><p>Undersampling Creates Frequency Aliases 欠采样导致了频率瑕疵以频率定义走样：假如蓝色和黑色分别是两个不同的函数 二者采样方法相同 但本身频率不同 导致了采样结果相同</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110544.png" alt="Undersampling Creates Frequency Aliases" style="zoom:25%;" /></li></ul><h2 id="Filtering-Getting-rid-of-certain-frequency-contents"><a href="#Filtering-Getting-rid-of-certain-frequency-contents" class="headerlink" title="Filtering = Getting rid of certain frequency contents"></a>Filtering = Getting rid of certain frequency contents</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110721.png" alt="Viasualizing Image Frequency Content" style="zoom:25%;" /><ul><li><p>傅里叶变换把图像从时域变成了频域</p></li><li><p>中心是最低频 周围是高频</p></li><li><p>多数信息集中在低频（中心）</p></li><li><p>水平和竖直亮线</p><ul><li>分析信号时会假设信号周期性重复（即假设图片水平重叠放置 AAAA）</li><li>但实际上并不重复</li><li>那么在左右边界部分会产生剧烈信号变化 - 产生高频</li><li>则产生白线</li><li>若分析单幅内容 可忽略</li></ul></li><li><p>高通滤波（抹掉低频信号）可得到图像内容轮廓边界 - 和周围内容相差巨大 - 信号变化非常大 - 高频信号</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708111303.png" alt="高通滤波" style="zoom:25%;" /></li><li><p>低通滤波（只有低频信号通过，抹掉高频信息）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708112533.png" alt="低通滤波" style="zoom:25%;" /><ul><li>边界被抹去</li><li>水波纹</li></ul></li><li><p>去掉了高和低频率信息</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708112640.png" alt="同时过滤高低频信息" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708112659.png" alt="同时过滤高低频信息 cont." style="zoom:25%;" /><ul><li>提取到了不太明显的轮廓特征</li><li>数字图像处理</li></ul></li></ul><h1 id="Filtering-Convolution-卷积-Averaging-加权平均"><a href="#Filtering-Convolution-卷积-Averaging-加权平均" class="headerlink" title="Filtering = Convolution 卷积 (= Averaging) 加权平均"></a>Filtering = Convolution 卷积 (= Averaging) 加权平均</h1><ul><li><p>Convolution 卷积</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708113238.png" alt="Convolution" style="zoom:25%;" /></li><li><p>图形学中的简化定义</p><ul><li>卷积：通过窗口来进行点乘获取中心值（相当于加权平均）</li></ul></li><li><p>Convolution Theorem（卷积定理）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708113517.png" alt="Convolution Theorem" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708113559.png" alt="Convolution Theorem cont." style="zoom:25%;" /><ul><li>Convolution in the spatial domain is equal to multiplication in the frequency domain, and vice versa - 在时域上想对信号进行卷积相当于在频域上进行乘积，反之亦然</li><li>Option 1:<ul><li>Filter by convolution in the spatial domain</li></ul></li><li>Option 2:<ul><li>Transform to frequency domain (Fourier transform)</li><li>Multiply by Fourier transform of convolution kernel</li><li>Transform back to spatial domain (inverse Fourier)</li></ul></li></ul></li></ul><h2 id="Box-Filter-低通滤波器"><a href="#Box-Filter-低通滤波器" class="headerlink" title="Box Filter 低通滤波器"></a>Box Filter 低通滤波器</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708114556.png" alt="Box Filter" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708114539.png" alt="Box Filter - Works as “Low Pass” Filter" style="zoom:25%;" /><ul><li>box 越大结果越模糊（留下的频率越低）<ul><li>相当于画笔变大</li></ul></li><li>考虑极端情况<ul><li>box 超级大 - 只有最中间有采样信息</li><li>box 超级小 - 全部频率都被留下来</li></ul></li></ul><h1 id="Sampling-Repeating-Frequency-Contents"><a href="#Sampling-Repeating-Frequency-Contents" class="headerlink" title="Sampling = Repeating Frequency Contents"></a>Sampling = Repeating Frequency Contents</h1><ul><li><p>冲激函数（某些位置有值有些没有，为0）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708114726.png" alt="冲激函数" style="zoom:25%;" /><ul><li>采样：给定函数与冲激函数相乘得到采样结果</li><li>采样（从频域角度理解）：就是在重复原始信号的频谱</li></ul></li></ul><p>$$时域的乘积 = 频域的卷积$$</p><ul><li><p>为什么会走样</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708115306.png" alt="为什么会走样" style="zoom:25%;" /><ul><li>采样率不足（不够快），导致原始信号复制粘贴距离不够大，频率的频谱发生了混叠，即走样</li><li>相当于采样低 = 稀疏采样</li></ul></li></ul><h1 id="Anti-Aliasing"><a href="#Anti-Aliasing" class="headerlink" title="Anti-Aliasing"></a>Anti-Aliasing</h1><ul><li>How Can We Reduce Aliasing Error?</li><li>Option 1: Increase sampling rate<ul><li>Essentially increasing the distance between replicas in the<br>Fourier domain</li><li>Higher resolution displays, sensors, framebuffers…</li><li>But: costly &amp; may need very high resolution</li></ul></li><li>Option 2: Antialiasing<ul><li>Making Fourier contents “narrower” before repeating</li><li>i.e. Filtering out high frequencies before sampling</li></ul></li><li>步骤<ul><li>先卷积</li><li>再采样</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708115851.png" alt="如何反走样" style="zoom:25%;" /><ul><li><p>模糊之后的频谱覆盖范围小</p></li><li><p>所以采样堆叠几率小</p></li><li><p>如何模糊</p><ul><li><p>用一定大小的低通滤波器来处理图像</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708120101.png" alt="A Practical Pre-Filter" style="zoom:25%;" /></li></ul></li></ul><h2 id="Antialiasing-by-averaging-values-in-pixel-area"><a href="#Antialiasing-by-averaging-values-in-pixel-area" class="headerlink" title="Antialiasing by averaging values in pixel area"></a>Antialiasing by averaging values in pixel area</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708120227.png" alt="Antialiasing by averaging values in pixel area" style="zoom:25%;" /><ul><li><p>Solution:</p><ul><li>Convolve f(x,y) by a 1-pixel box-blur<ul><li>convolving = filtering = averaging</li></ul></li><li>Then sample at every pixel’s center</li></ul></li><li><p>怎么把三角形在像素内覆盖的区域算出来：</p></li></ul><h2 id="Antialiasing-By-Supersampling-MSAA"><a href="#Antialiasing-By-Supersampling-MSAA" class="headerlink" title="Antialiasing By Supersampling (MSAA)"></a>Antialiasing By Supersampling (MSAA)</h2><blockquote><p> 解决的是对信号的模糊操作 不是靠提升分辨率解决问题 只是为了解决三角形覆盖问题</p></blockquote><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708120523.png" alt="Supersampling" style="zoom:25%;" /><ul><li>给像素内部加采样点 看像素覆盖率</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708122814.png" alt="Supersampling cont." style="zoom:25%;" /><h2 id="Antialiasing-Today"><a href="#Antialiasing-Today" class="headerlink" title="Antialiasing Today"></a>Antialiasing Today</h2><ul><li>No free lunch!What’s the cost of MSAA?<ul><li>增加了计算量</li></ul></li><li>Milestones (personal idea)<ul><li>FXAA (Fast Approximate AA)<ul><li>和采样无关 相当于后期处理</li><li>得到一幅图 有锯齿 找到边界 将有锯齿的边界换成没有锯齿的边界</li></ul></li><li>TAA (Temporal AA)<ul><li>复用上一帧信息 在当前帧不引入新信息</li></ul></li></ul></li><li>Super resolution / super sampling 超分辨率<ul><li>From low resolution to high resolution</li><li>Essentially still “not enough samples“ problem</li><li>DLSS (Deep Learning Super Sampling)<ul><li>一切猜测 深度学习都适合</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-5 20200225 20210706 07 Rasterization 1 (Triangles)</title>
      <link href="2021/07/16/games101-5-20200225-20210706-07-rasterization-1-triangles/"/>
      <url>2021/07/16/games101-5-20200225-20210706-07-rasterization-1-triangles/</url>
      
        <content type="html"><![CDATA[<h1 id="5-20200225-20210706-07-Rasterization-1-Triangles"><a href="#5-20200225-20210706-07-Rasterization-1-Triangles" class="headerlink" title="5 20200225 / 20210706/07 Rasterization 1 (Triangles)"></a>5 20200225 / 20210706/07 Rasterization 1 (Triangles)</h1><h3 id="Perspective-Projection"><a href="#Perspective-Projection" class="headerlink" title="Perspective Projection"></a>Perspective Projection</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210706094119.png" alt="Perspective Projection" style="zoom:50%;" /><ul><li><p>红线夹角（field-of-view, FOY）：垂直可视角度</p></li><li><p>How to convert from fovY and aspect to l,r,b,t?</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210706094725.png" alt="How to convert from fovY and aspect to l,r,b,t?" style="zoom:50%;" /></li></ul><h3 id="What’s-after-MVP"><a href="#What’s-after-MVP" class="headerlink" title="What’s after MVP?"></a>What’s after MVP?</h3><ul><li>Model transformation (placing objects)</li><li>View transformation (placing camera)</li><li>Projection transformation<ul><li>Orthographic projection (cuboid to “canonical” cube $[-1, 1]^3$)</li><li>Perspective projection (frustum to “canonical” cube)</li></ul></li><li>Canonical Cube to Screen （画在屏幕上）</li></ul><h3 id="Canonical-Cube-to-Screen"><a href="#Canonical-Cube-to-Screen" class="headerlink" title="Canonical Cube to Screen"></a>Canonical Cube to Screen</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707113705.png" alt="Canonical Cube to Screen" style="zoom:50%;" /><ul><li><p>What is a screen?</p><ul><li>An array of pixels</li><li>Size of the array: resolution</li><li>A typical kind of raster display</li></ul></li><li><p>Raster (光栅) == screen in German</p><ul><li>Rasterize == drawing onto the screen</li></ul></li><li><p>Pixel (FYl short for “picture element”)</p><ul><li>For now: A pixel is a little square with uniform color</li><li>Color is a mixture of (red, green, blue)</li></ul></li><li><p>Defining the screen space</p><ul><li><p>Slightly different from the “tiger book”</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707113221.png" alt="Canonical Cube to Screen - Defining the screen space" style="zoom:50%;" /></li><li><p>像素覆盖屏幕空间（宽 * 高）</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707113531.png" alt="Canonical Cube to Screen - Transform in xy plane" style="zoom:50%;" /></li></ul></li><li><p>Irrelevant to z</p></li><li><p>Transform in xy plane: $[-1: 1]^2$ to [o, width] x [o, height]</p></li><li><p>Viewport transform matrix: 视口变换</p><ul><li>先把 $[-1, 1]^2$ 映射到 $[0,width] x [0, height]$</li><li>再把屏幕中心左下角定义到原点 所以有平移变换</li><li>忽略 z 轴</li></ul></li></ul><h1 id="Rasterizing-Triangles-into-Pixels-光栅化"><a href="#Rasterizing-Triangles-into-Pixels-光栅化" class="headerlink" title="Rasterizing Triangles into Pixels 光栅化"></a>Rasterizing Triangles into Pixels 光栅化</h1><ul><li><p>Drawing machine</p><ul><li>CNC Sharpie Drawing Machine</li></ul>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713171942.png" alt="CNC Sharpie Drawing Machine" style="zoom: 33%;" /><ul><li>Laser Cutters</li></ul>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713170022.png" alt="Laser Cutters" style="zoom: 33%;" /></li></ul><h2 id="Different-Raster-Displays"><a href="#Different-Raster-Displays" class="headerlink" title="Different Raster Displays"></a>Different Raster Displays</h2><ul><li><p>Oscilloscope 示波器</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713170200.png" alt="Oscilloscope" style="zoom: 33%;" /></li></ul><h3 id="示波器成像原理-Cathode-Ray-Tube-CRT-阴极射线管"><a href="#示波器成像原理-Cathode-Ray-Tube-CRT-阴极射线管" class="headerlink" title="示波器成像原理 - Cathode Ray Tube (CRT) 阴极射线管"></a>示波器成像原理 - Cathode Ray Tube (CRT) 阴极射线管</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707114713.png" alt="Cathode Ray Tube (CRT) 阴极射线管" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713170311.png" alt="Cathode Ray Tube (CRT) - Television" style="zoom: 25%;" /><ul><li>隔行扫描 （利用视觉暂留效应）高速运动画面会造成严重画面撕裂</li></ul><h3 id="Frame-Buffer-Memory-for-a-Raster-Display"><a href="#Frame-Buffer-Memory-for-a-Raster-Display" class="headerlink" title="Frame Buffer: Memory for a Raster Display"></a>Frame Buffer: Memory for a Raster Display</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707120919.png" alt="Frame Buffer: Memory for a Raster Display" style="zoom:50%;" /><h3 id="Flat-Panel-Displays"><a href="#Flat-Panel-Displays" class="headerlink" title="Flat Panel Displays"></a>Flat Panel Displays</h3><ul><li><p>LCD (liquid Crystal Display) Pixel</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121123.png" alt="LCD (liquid Crystal Display) Pixel" style="zoom:50%;" /><ul><li>Principle: block or transmit light by twisting polarization</li><li>Illumination from backlight (e.g. fluorescent or LED)</li><li>Intermediate intensity levels by partial twist</li></ul></li><li><p>OLED</p></li><li><p>LED Array Display 发光二极管</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121229.png" alt="LED Array Display 发光二极管" style="zoom:50%;" /></li><li><p>Electrophoretic (Electronic Ink) Display</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121242.png" alt="Electrophoretic (Electronic Ink) Display" style="zoom:50%;" /><ul><li>问题<ul><li>刷新率比较低（肉眼可见）</li></ul></li></ul></li></ul><h1 id="Rasterization-Drawing-to-Raster-Displays"><a href="#Rasterization-Drawing-to-Raster-Displays" class="headerlink" title="Rasterization: Drawing to Raster Displays"></a>Rasterization: Drawing to Raster Displays</h1><h2 id="Triangles-Fundamental-Shape-Primitives"><a href="#Triangles-Fundamental-Shape-Primitives" class="headerlink" title="Triangles - Fundamental Shape Primitives"></a>Triangles - Fundamental Shape Primitives</h2><ul><li><p>Why triangles?</p><ul><li>Most basic polygon</li><li>Break up other polygons 其他多边形可被拆为三角形</li></ul></li><li><p>Unique properties</p><ul><li>Guaranteed to be planar 三角形内部一定在同一平面</li><li>Well-defined interior 内外定义清晰</li><li>Well-defined method for interpolating values at vertices over triangle (barycentric interpolation) 定义三个顶点属性后 可以根据位置方便地插值</li></ul></li><li><p>What Pixel Values Approximate a Triangle</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121757.png" alt="What Pixel Values Approximate a Triangle" style="zoom:50%;" /></li></ul><h1 id="A-simple-approach-sampling"><a href="#A-simple-approach-sampling" class="headerlink" title="A simple approach - sampling"></a>A simple approach - sampling</h1><h2 id="Sampling-a-Function"><a href="#Sampling-a-Function" class="headerlink" title="Sampling a Function"></a>Sampling a Function</h2><ul><li>definition<ul><li>Evaluating a function at a point is sampling.<br>We can discretize a function by sampling.<br>采样就是把函数离散化的过程</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">for (int x &#x3D; 0; x &lt; xmax; ++x;output [x] &#x3D; f(x);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Sampling is a core idea in graphics.<br>We sample time (1D), area (2D), direction (2D), volume (3D) …</li></ul><h2 id="看给定点像素中心是否在三角形内"><a href="#看给定点像素中心是否在三角形内" class="headerlink" title="看给定点像素中心是否在三角形内"></a>看给定点像素中心是否在三角形内</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122155.png" alt="Rasterization As 2D Sampling" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122204.png" alt="Sample if Each Pixel Center Is Inside Triangle" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122216.png" alt="Sample if Each Pixel Center Is Inside Triangle cont." style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122225.png" alt="Define Binary Function" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122234.png" alt="Rasterization = Sampling A 2D Indicator Function" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122337.png" alt="Recall: Sample Location" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122357.png" alt="Evaluating inside" style="zoom: 33%;" /><ul><li><p>方法：叉乘</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122408.png" alt="方法：叉乘" style="zoom: 33%;" /></li></ul><h2 id="Edge-Cases"><a href="#Edge-Cases" class="headerlink" title="Edge Cases"></a>Edge Cases</h2><ul><li><p>不作处理</p></li><li><p>都做特殊处理</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122603.png" alt="Edge Cases" style="zoom: 33%;" /></li></ul><h2 id="Cheking-all-pixels-on-the-screen"><a href="#Cheking-all-pixels-on-the-screen" class="headerlink" title="Cheking all pixels on the screen"></a>Cheking all pixels on the screen</h2><ul><li><p>包围盒 Axis-aligned bounding box AABB</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122729.png" alt="Cheking all pixels on the screen" style="zoom: 33%;" /></li><li><p>Incremental Triangle Traversal</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122833.png" alt="Incremental Triangle Traversal" style="zoom: 33%;" /><ul><li>适用于细长型三角形（像素少，但 bounding box 大）</li></ul></li></ul><h1 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h1><ul><li><p>Real LCD Screen Pixel (Closeup)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122958.png" alt="Real LCD Screen Pixel (Closeup)" style="zoom: 33%;" /></li><li><p>Bayer pattern（右方）</p><ul><li>绿色的点比其他的多（红蓝几乎相等）</li><li>因为人眼对绿色更敏感</li></ul></li><li><p>Aside: What about other display methods</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123414.png" alt="Aside: What about other display methods" style="zoom: 33%;" /></li><li><p>Assume display pixels emit square of light</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123721.png" alt="Assume display pixels emit square of light" style="zoom: 33%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123823.png" alt="The Display Physically Emits This Signal" style="zoom: 33%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123843.png" alt="Compare: The Continous Triangle Function" style="zoom: 33%;" /></li><li><p>question</p><ul><li>锯齿<ul><li>原因：采样率不够高</li><li>解决：next</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-4 20200221 20210705 Transformation Cont</title>
      <link href="2021/07/16/games101-4-20200221-20210705-transformation-cont/"/>
      <url>2021/07/16/games101-4-20200221-20210705-transformation-cont/</url>
      
        <content type="html"><![CDATA[<h1 id="4-20200221-20210705-Transformation-Cont"><a href="#4-20200221-20210705-Transformation-Cont" class="headerlink" title="4 20200221 / 20210705 Transformation Cont."></a>4 20200221 / 20210705 Transformation Cont.</h1><ul><li><p>旋转的逆就是旋转的转置（正交）</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705215358.png" alt="旋转的逆就是旋转的转置"></p></li><li><p>3D transformations</p></li><li><p>Viewing (观测) transformation</p><ul><li>View (视图) / Camera transformation</li><li>Projection (投影) transformation<ul><li>Orthographic (正交) projection</li><li>Perspectve (透视) projection</li></ul></li></ul></li></ul><h3 id="3D-transformations"><a href="#3D-transformations" class="headerlink" title="3D transformations"></a>3D transformations</h3><ul><li><p>Use homogeneous coordinates again:</p><ul><li>3D point = (x, y, z, 1]</li><li>3D vector = (x, y, z, 0)</li></ul></li><li><p>In general, (x, y, z, w) (w != 0) is the 3D point:<br>(x/w, y/w, z/w)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705215936.png" alt="3D transformations" style="zoom:50%;" /></li><li><p>Rotation</p><ul><li>循环对称使得y的矩阵和xz不同，因为是 z 叉乘 x 而不是 x 叉乘 z，所以符号反</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705215949.png" alt="3D transformations - Rotation" style="zoom:50%;" /></li><li><p>3D Rotations</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705220226.png" alt="3D transformations - 3D Rotations" style="zoom:50%;" /><ul><li><p>把任意旋转拆解为 x/y/z 旋转</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221000.png" alt="3D transformations - 3D Rotations cont." style="zoom:50%;" /></li></ul></li><li><p>Rodrigues’ Rotation Formula</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221044.png" alt="Rodrigues’ Rotation Formula" style="zoom:50%;" /><ul><li>默认轴过原点，方向为 $n$</li><li>若要沿着任意轴旋转<ul><li>先把旋转的起点平移到原点</li><li>旋转后再平移回来（逆操作）</li></ul></li><li><strong>四元数</strong> （）的引入是为了旋转的差值应用<ul><li>转 10°和转 30°的均值并不是转 20°</li></ul></li></ul></li></ul><h1 id="Viewing-transformation"><a href="#Viewing-transformation" class="headerlink" title="Viewing transformation"></a>Viewing transformation</h1><h2 id="View-Camera-transformation-视图-相机变换"><a href="#View-Camera-transformation-视图-相机变换" class="headerlink" title="View/ Camera transformation (视图/相机变换)"></a>View/ Camera transformation (视图/相机变换)</h2><ul><li><p>what is view transformation （MVP）</p><ul><li>Think about how to take a photo (MVP)<ul><li>Find a good place and arrange people (model transformation) 找物体位置 - 模型变换</li><li>Find a good “angle” to put the camera (view transformation) 找相机位置 - 视图变换</li><li>Cheese! (projection transformation) - 投影变换</li></ul></li></ul></li><li><p>How to perform view transformation</p><ul><li>Define the camera first<ul><li>Position $\vec e$</li><li>Look-at / gaze direction</li><li>Up direction $\hat t$</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221707.png" alt="View/ Camera transformation" style="zoom:50%;" /></li><li><p>Key observation</p><ul><li><p>如果相机和所有物体一起移动，那么成像一致</p></li><li><p>所以把相机位置固定到原点沿着-z方向看（所有物体的位置也做变换）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221756.png" alt="View/ Camera transformation - Key observation" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221950.png" alt="View/ Camera transformation - Transform the camera" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705222442.png" alt="View/ Camera transformation - $M_{view}$ in math" style="zoom:50%;" /></li></ul></li><li><p>先平移再旋转</p><ul><li>先把中心移动到原点（平移）</li><li>将所看方向旋转至 -z 方向</li><li>将 up 方向旋转到 y 方向</li><li>$g \times t$ 旋转到 x 方向</li></ul></li><li><p>正着写难写<br>$g \rightarrow -Z, t \rightarrow Y, (g · t \rightarrow X)$<br>反过来写好写<br>$X \rightarrow (g · t), Y \rightarrow t, Z \rightarrow -g$<br>（先求逆矩阵再求原矩阵-对逆矩阵求转置矩阵）</p><ul><li>因为是正交矩阵</li><li>所以对视图矩阵求逆就是求其转置</li></ul></li><li><p>summary</p></li><li><p>Transform objects together with the camera</p></li><li><p>Until camera’s at the origin, up at Y, look at -Z</p></li><li><p>Also known as ModelView Transformation 模型视图变换</p></li></ul><h2 id="Projection-transformation"><a href="#Projection-transformation" class="headerlink" title="Projection transformation"></a>Projection transformation</h2><ul><li>正交投影（平行光 平截头体）<ul><li>平行的线永远平行</li></ul></li><li>透视投影（点光源 锥形体）<ul><li>平行的线会相交</li><li>近大远小</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705223855.png" alt="Projection transformation" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705223921.png" alt="Projection transformation - Comparasion" style="zoom:50%;" /><h3 id="Orthographic-projection-正交投影"><a href="#Orthographic-projection-正交投影" class="headerlink" title="Orthographic projection 正交投影"></a>Orthographic projection 正交投影</h3><ul><li><p>A simple way of understanding</p><ul><li>Camera located at origin, looking at -Z, up at Y (looks familiar?)</li><li>Drop Z coordinate</li><li>Translate and scale the resulting rectangle to $[-1, 1]^2$</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224348.png" alt="Orthographic projection - A simple way of understanding" style="zoom:50%;" /></li><li><p>In general</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224415.png" alt="Orthographic projection - In general" style="zoom:50%;" /><ul><li><p>We want to map a cuboid [I, r] x [b, t] x [f, n] to<br>the “canonical ( 正 则 、 规 范 、 标 准 )“ cube $[-1, 1]^3$</p></li><li><p>Slightly different orders (to the “simple way”)</p><ul><li><p>Center cuboid by translating</p></li><li><p>Scale into “canonical” cube</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224642.png" alt="Orthographic projection - Slightly different orders" style="zoom:50%;" /></li><li><p>Transformation matrix<br>先将各方向的中心平移到原点</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224716.png" alt="Orthographic projection - Transformation matrix" style="zoom:50%;" /></li></ul></li></ul></li><li><p>Caveat</p><ul><li>Looking at / along -Z is making near and far not intuitive (n &gt; f)</li><li>FYI: that’s why OpenGL (a Graphics API) uses left hand coords. （观测方向为 z 方向：n 为正的 f 为负的 n &gt; f， -z 方向：n 为负的 far 为正的 n &lt; f）</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224856.png" alt="Orthographic projection - Caveat" style="zoom:50%;" /><h3 id="Perspective-projection-透视投影-近大远小"><a href="#Perspective-projection-透视投影-近大远小" class="headerlink" title="Perspective projection 透视投影 近大远小"></a>Perspective projection 透视投影 近大远小</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705225239.png" alt="Perspective projection" style="zoom:50%;" /><ul><li><p>Most common in Computer Graphics, art, visual system</p></li><li><p>Further objects are smaller 近大远小</p></li><li><p>Parallel lines not parallel; converge to single point</p></li><li><p>Euclid</p><ul><li>平行线永不相交</li><li>但透视投影中会相交</li></ul></li><li><p>Before we move on</p></li><li><p>Recall: property of homogeneous coordinates</p><ul><li>(x,y,z,1), (kx, ky, kz, k != 0), (xz, yz, $z^2$, z != 0) all represent the same point (x, y, z) in 3D<ul><li>e.g. (1, 0, 0, 1) and (2, 0, 0, 2) both represent (1, 0, 0)</li></ul></li></ul></li><li><p>Simple, but useful</p></li><li><p>How to do perspective projection</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705225521.png" alt="How to do perspective projection" style="zoom:50%;" /><ul><li>把透视投影分解为两步骤<ul><li>1.挤压成长方体</li><li>2.进行正交投影</li></ul></li><li>如何挤压<ul><li>原则<ul><li>近平面永远不变</li><li>挤了之后各自平面z不变</li><li>远平面中心点挤后不变</li></ul></li><li>任何一个点变换前后z不变</li><li>中间一个点经过挤压后如何变化</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230045.png" alt="Perspective Projection" style="zoom:50%;" /><ul><li>相似三角形</li><li>y’ 和 y 的关系 $y’ = \frac{n}{z}y$</li><li>x’ 和 x 的关系 $x’ = \frac{n}{z}x$ (与 y 同理)</li></ul></li><li><p>齐次坐标下乘以一个非零数 k 依然为原来那个点（都乘 z）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230359.png" alt="Perspective Projection" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230537.png" alt="Perspective Projection cont." style="zoom:50%;" /></li><li><p>如何求剩余矩阵</p><ul><li><p>两个观察</p><ul><li><p>1.近平面上任意点都不会变</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230936.png" alt="近平面上任意点都不会变" style="zoom:50%;" /><ul><li><p>$n^2$和 x y 无关</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231317.png" alt="$n^2$和 x y 无关" style="zoom:50%;" /></li></ul></li><li><p>2.远平面上任意点的 z 不会变</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231150.png" alt="Perspective Projection" style="zoom:50%;" /><ul><li><p>取远平面中心点</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231329.png" alt="远平面上任意点的 z 不会变" style="zoom:50%;" /></li></ul></li></ul></li><li><p>求解方程之后可知 AB，则 $M_{persp \rightarrow ortho}$ 得解</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231401.png" alt="求解方程" style="zoom: 67%;" /></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-3 20200218 20210704 Transformation</title>
      <link href="2021/07/16/games101-3-20200218-20210704-transformation/"/>
      <url>2021/07/16/games101-3-20200218-20210704-transformation/</url>
      
        <content type="html"><![CDATA[<h1 id="3-20200218-20210704-Transformation"><a href="#3-20200218-20210704-Transformation" class="headerlink" title="3 20200218 / 20210704 Transformation"></a>3 20200218 / 20210704 Transformation</h1><h1 id="Why-study-transformation"><a href="#Why-study-transformation" class="headerlink" title="Why study transformation"></a>Why study transformation</h1><ul><li>type<ul><li>Modeling 模型变换<ul><li>摄像机移动</li><li>rotation</li><li>scaling 皮克斯动画</li></ul></li><li>Viewing 视图变换 （3D to 2D projection）<ul><li>光栅化</li><li>投影</li></ul></li></ul></li><li>2D transformations</li><li>Homogeneous coordinates</li></ul><h1 id="2D-transformations"><a href="#2D-transformations" class="headerlink" title="2D transformations"></a>2D transformations</h1><h2 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h2><ul><li><p>uniform ($S_{0.5}$)</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011357.png" alt="Scale Transform" style="zoom: 67%;" /><ul><li><p>scale matrix</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011424.png" alt="Scale Matrix" style="zoom:67%;" /></li></ul></li><li><p>non-uniform</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011507.png" alt="Scale (Non-Uniform)" style="zoom:67%;" /></li></ul><h2 id="Reflection-Matrix"><a href="#Reflection-Matrix" class="headerlink" title="Reflection Matrix"></a>Reflection Matrix</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011606.png" alt="Reflection Matrix" style="zoom: 50%;" /><h2 id="Shear-Matrix-错切"><a href="#Shear-Matrix-错切" class="headerlink" title="Shear Matrix 错切"></a>Shear Matrix 错切</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011632.png" alt="Shear Matrix" style="zoom: 50%;" /><h2 id="Rotate-围绕-0-0-逆时针"><a href="#Rotate-围绕-0-0-逆时针" class="headerlink" title="Rotate 围绕(0,0)逆时针"></a>Rotate 围绕(0,0)逆时针</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011945.png" alt="Rotate 围绕(0,0)逆时针" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012002.png" alt="Rotation Matrix" style="zoom: 50%;" /><h2 id="Linear-Transforms-Matrices"><a href="#Linear-Transforms-Matrices" class="headerlink" title="Linear Transforms = Matrices"></a>Linear Transforms = Matrices</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012456.png" alt="Linear Transforms = Matrices" style="zoom:67%;" /><h1 id="Homogeneous-coordinates"><a href="#Homogeneous-coordinates" class="headerlink" title="Homogeneous coordinates"></a>Homogeneous coordinates</h1><ul><li>why</li></ul><blockquote><p>低一维的加法可以用高一维的乘法替换，所以有了齐次坐标目的：用齐次坐标统一所有变换 trade-off</p></blockquote><h2 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012724.png" alt="Translation" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012803.png" alt="Why Homogeneous Coordinates" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013029.png" alt="Solution: Homogenous Coordinates" style="zoom:50%;" /><blockquote><p>向量具有平移不变性</p></blockquote><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013352.png" alt="Homogenous Coordinates" style="zoom:50%;" /><blockquote><p>point + point = 两点中点</p></blockquote><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013517.png" alt="Affine Transformations" style="zoom:50%;" /><h2 id="Affine-Transformations-仿射变换-（线性变换（左上角矩阵）-平移变换（最后一列））"><a href="#Affine-Transformations-仿射变换-（线性变换（左上角矩阵）-平移变换（最后一列））" class="headerlink" title="Affine Transformations 仿射变换 （线性变换（左上角矩阵）+平移变换（最后一列））"></a>Affine Transformations 仿射变换 （线性变换（左上角矩阵）+平移变换（最后一列））</h2><ul><li><p>先线性变换再平移</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013617.png" alt="Affine Transformations"  /></li></ul><h2 id="2D-Transformations"><a href="#2D-Transformations" class="headerlink" title="2D Transformations"></a>2D Transformations</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705213256.png" alt="2D Transformations" style="zoom:67%;" /><blockquote><p>只有二维情况下仿射变换最后一行才是 001</p></blockquote><h2 id="Inverse-Transform-逆变换"><a href="#Inverse-Transform-逆变换" class="headerlink" title="Inverse Transform 逆变换"></a>Inverse Transform 逆变换</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705213700.png" alt="Inverse Transform" style="zoom:67%;" /><h2 id="Composing-Transform-组合变换"><a href="#Composing-Transform-组合变换" class="headerlink" title="Composing Transform 组合变换"></a>Composing Transform 组合变换</h2><ul><li><p>复杂变换可通过简单变换得到</p></li><li><p>变换的顺序很重要（矩阵乘法不满足交换律）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705213946.png" alt="Transform Odering Matters!" style="zoom:50%;" /></li><li><p>矩阵放左边*向量</p></li><li><p>矩阵变换<strong>从右至左</strong>应用</p></li><li><p>矩阵没交换律但有结合律</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214134.png" alt="Composing Transforms" style="zoom:50%;" /></li><li><p>可用一个矩阵表述非常复杂的变换</p></li></ul><h2 id="Decomposing-Complex-Transfroms-分解复杂矩阵"><a href="#Decomposing-Complex-Transfroms-分解复杂矩阵" class="headerlink" title="Decomposing Complex Transfroms 分解复杂矩阵"></a>Decomposing Complex Transfroms 分解复杂矩阵</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214331.png" alt="Decomposing Complex Transfroms" style="zoom:50%;" /><ul><li>想要以某点为中心进行旋转<ul><li>先将该点移动到原点 - T(-c)</li><li>进行旋转 - R (a)</li><li>然后再逆操作移动到原位置 - T(c)</li><li>$T(c) · R(\alpha) · T(-c)$</li></ul></li></ul><h1 id="3D-Transforms"><a href="#3D-Transforms" class="headerlink" title="3D Transforms"></a>3D Transforms</h1><blockquote><p>和 2D 做类比</p></blockquote><ul><li>用四个数表示<ul><li>点则末尾加 1</li><li>向量则末尾加 0</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214740.png" alt="3D Transformations" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214749.png" alt="3D Transformations 2" style="zoom:50%;" /><blockquote><p>仿射变换 = 线性变换 + 平移变换<br>先线性变换（缩放/旋转） 再平移变换</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-2 20200214 20210704 A Swift and Brutal Introduction to Linear Algebra</title>
      <link href="2021/07/16/games101-2-20200214-20210704-a-swift-and-brutal-introduction-to-linear-algebra/"/>
      <url>2021/07/16/games101-2-20200214-20210704-a-swift-and-brutal-introduction-to-linear-algebra/</url>
      
        <content type="html"><![CDATA[<h1 id="2-20200214-20210704-A-Swift-and-Brutal-Introduction-to-Linear-Algebra"><a href="#2-20200214-20210704-A-Swift-and-Brutal-Introduction-to-Linear-Algebra" class="headerlink" title="2 20200214 / 20210704 A Swift and Brutal Introduction to Linear Algebra!"></a>2 20200214 / 20210704 A Swift and Brutal Introduction to Linear Algebra!</h1><p>(in fact it’s relatively easy…)</p><ul><li>Graphics’ Dependencies<ul><li>Basic mathematics<ul><li>Linear algebra, calculus, statistics</li></ul></li><li>Basic physics<ul><li>Optics, Mechanics</li></ul></li><li>Misc<ul><li>Signal processing, Numerical analysis</li></ul></li><li>And a bit of aesthetics</li></ul></li></ul><h2 id="This-Course"><a href="#This-Course" class="headerlink" title="This Course"></a>This Course</h2><ul><li>More dependent on Linear Algebra<ul><li>Vectors (dot products, cross products, …)</li><li>Matrices (matrix-matrix, matrix-vector mult., …)</li></ul></li><li>For example,<ul><li>Apoint is a vector (?)</li><li>An operation like translating or rotating objects<br>can be matrix-vector multiplication</li></ul></li></ul><h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003508.png" alt="Vectors" style="zoom:33%;" /><ul><li>Usually written as $\vec a$  or in bold $\bf{a}$</li><li>Or using start and end points $\vec{AB}=B-A$</li><li>Direction and length</li><li>No absolute starting position</li></ul><h3 id="Vector-Normalization"><a href="#Vector-Normalization" class="headerlink" title="Vector Normalization"></a>Vector Normalization</h3><ul><li>Magnitude (length) of a vector written as $||\vec a||$</li><li>Unit vector .<ul><li>Avector with magnitude of 1</li><li>Finding the unit vector of a vector (normalization): $\hat a = \vec a / ||\vec a||$</li><li>Used to represent directions</li></ul></li></ul><h3 id="Vector-Addition"><a href="#Vector-Addition" class="headerlink" title="Vector Addition"></a>Vector Addition</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003523.png" alt="Vector Addition" style="zoom:33%;" /><ul><li>Geometrically: Parallelogram law &amp; Triangle law</li><li>Algebraically: Simply add coordinates</li></ul><h3 id="Cartesian-Coordinates"><a href="#Cartesian-Coordinates" class="headerlink" title="Cartesian Coordinates"></a>Cartesian Coordinates</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003535.png" alt="Cartesian Coordinates" style="zoom:33%;" /><ul><li>X and Y can be any (usually orthogonal unit) vectors<ul><li>$A =<br>\left{<br>\begin{matrix}<br>x\<br>y<br>\end{matrix}<br>\right}$</li><li>$A =  |  A^T = (x,y) |$</li><li>$||A|| = \sqrt{x^2 + y^2}$</li></ul></li></ul><h3 id="Vector-Multiplication"><a href="#Vector-Multiplication" class="headerlink" title="Vector Multiplication"></a>Vector Multiplication</h3><ul><li>Dot product</li><li>Cross product</li><li>Orthonormal bases and coordinate frames</li></ul><h3 id="Dos-scalar-Product-点乘"><a href="#Dos-scalar-Product-点乘" class="headerlink" title="Dos (scalar) Product 点乘"></a>Dos (scalar) Product 点乘</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003555.png" alt="Dos (scalar) Product" style="zoom:33%;" /><ul><li><p>Properties</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003606.png" alt="Properties of Dot (scalar) Product" style="zoom:33%;" /></li><li><p>Dot Product in Cartesian Coordinates</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003623.png" alt="Dot Product in Cartesian Coordinates" style="zoom: 33%;" /></li><li><p>Dot Product in Graphics</p><ul><li>Find angle between two vectors<br>(e.g. cosine of angle between light source and surface) 找夹角</li><li>Finding projection of one vector on another 找投影</li></ul></li><li><p>Dot Product for Projection</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004106.png" alt="Dot Product for Projection" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004125.png" alt="Dot Product for Projection 2" style="zoom: 33%;" /><ul><li><p>Measure how close two directions are （两个向量方向上接近就是1 垂直就0 相反就-1）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003958.png" alt="Dot Product in Graphics" style="zoom:50%;" /></li><li><p>Decompose a vector</p></li><li><p>Determine forward / backward</p><ul><li>应用：镜面反射 入射光 高光</li></ul></li></ul></li></ul><h3 id="Cross-product"><a href="#Cross-product" class="headerlink" title="Cross product"></a>Cross product</h3><ul><li><p>Cross (vector) Product</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004440.png" alt="Cross (vector) Product" style="zoom:50%;" /><ul><li>Cross product is orthogonal to two initial vectors</li><li>Direction determined by right-hand rule 不满足交换律</li><li>Useful in constructing coordinate systems (later)</li></ul></li><li><p>Properties</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004642.png" alt="Properties of Cross Product" style="zoom:50%;" /><ul><li>向量叉乘得到的还是向量</li></ul></li><li><p>Cartesian Formula</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004949.png" alt="Cartesian Formula" style="zoom:50%;" /></li><li><p>Cross Product in Graphics 应用</p><ul><li><p>Determine left / right 左侧-叉乘结果为正</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005045.png" alt="Cross Product in Graphics" style="zoom:50%;" /></li><li><p>Determine inside / outside</p><blockquote><p>ab x ap<br>bc x bp<br>ca x cp<br>如果三个结果符号相同 那么就在内部 若结果为0则为Cornercase 可内可外</p></blockquote></li><li><p>应用 - 光栅化</p></li></ul></li></ul><h3 id="Orthonormal-Bases-Coordinate-Frames"><a href="#Orthonormal-Bases-Coordinate-Frames" class="headerlink" title="Orthonormal Bases / Coordinate Frames"></a>Orthonormal Bases / Coordinate Frames</h3><ul><li><p>Important for representing points, positions, locations</p></li><li><p>Often, many sets of coordinate systems</p></li><li><p>Global, local, world, model, parts of model (head, hands, …)</p></li><li><p>Critical issue is transforming between these systems/ bases</p></li><li><p>A topic for next week</p></li><li><p>Orthonormal Coordinate Frames 坐标系</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005439.png" alt="Orthonormal Coordinate Frames" style="zoom:50%;" /></li></ul><hr><h3 id="Matrices"><a href="#Matrices" class="headerlink" title="Matrices"></a>Matrices</h3><ul><li><p>Magical 2D arrays that haunt in every CS course</p></li><li><p>In Graphics, pervasively used to represent transformations</p><ul><li>Translation, rotation, shear, scale (more details in the next lecture)</li></ul></li><li><p>What is a matrix</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005611.png" alt="What is a matrix" style="zoom:50%;" /></li><li><p>Matrix-Matrix Multiplication</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005701.png" alt="Matrix-Matrix Multiplication" style="zoom: 50%;" /></li><li><p>Properties</p><ul><li><p><strong>Non-commutative</strong><br>(AB and BA are different in general)</p></li><li><p>Associative and distributive</p><ul><li>(AB)C=A(BC)</li><li>A(B+C) = AB+AC</li><li>(A+B)C = AC + BC</li></ul></li><li><p>Matrix-Vector Multiplication</p><ul><li><p>Treat vector as a column matrix (mx1)</p></li><li><p>Key for transforming points (next lecture)</p></li><li><p>Official spoiler: 2D reflection about y-axis</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005923.png" alt="Matrix-Vector Multiplication" style="zoom:50%;" /></li></ul></li><li><p>Transpose of a Matrix</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704010001.png" alt="Transpose of a Matrix" style="zoom: 50%;" /></li><li><p>Identity Matrix and Inverses</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704010020.png" alt="Identity Matrix and Inverses" style="zoom:33%;" /></li><li><p>Vector multiplication in matrix form</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704010030.png" alt="Vector multiplication in matrix form" style="zoom:33%;" /></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-1 20200211 20210703 Overview of CG</title>
      <link href="2021/07/16/games101-1-20200211-20210703-overview-of-cg/"/>
      <url>2021/07/16/games101-1-20200211-20210703-overview-of-cg/</url>
      
        <content type="html"><![CDATA[<h1 id="1-20200211-20210703-Overview-of-CG"><a href="#1-20200211-20210703-Overview-of-CG" class="headerlink" title="1 20200211 / 20210703 Overview of CG"></a>1 20200211 / 20210703 Overview of CG</h1><ul><li>Topics</li></ul><h2 id="What-is-CG"><a href="#What-is-CG" class="headerlink" title="What is CG"></a>What is CG</h2><blockquote><p>The use of computers to <strong>synthesize</strong> and <strong>manipulate</strong> visual information.</p></blockquote><h2 id="Why-study"><a href="#Why-study" class="headerlink" title="Why study"></a>Why study</h2><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><ul><li>Video Games<ul><li>什么是好的画面 - 看画面是否足够亮 - 全局光照做得好不好<ul><li>只狼</li><li>无主之地3</li></ul></li></ul></li><li>Movies<ul><li>The Matrix<ul><li>Special Effects</li><li>特效是图形学中最简单的一类 - 平常见不到 - 做得不对也不会觉得意外</li><li>最困难的是最常见的</li></ul></li></ul></li><li>Avatar<ul><li>引入了面部/动作捕捉</li></ul></li><li>Animations<ul><li>Zootopia - 疯狂动物城</li><li>Frozen 2 - 冰雪奇缘 2</li></ul></li><li>Design<ul><li>Autodesk Gallary</li><li>CAD<ul><li>环境模拟</li><li>碰撞检测</li></ul></li><li>Ikea</li></ul></li><li>Visualization<ul><li>Science</li><li>Engineering</li><li>Medicine</li><li>Journalism</li></ul></li><li>Virtual Reality<ul><li>Augmented Reality</li><li>Digital Illustration<ul><li>PS</li></ul></li></ul></li><li>Simulation<ul><li>The Dust Bowl phenomena</li><li>Black hole from Interstellar</li></ul></li><li>Graphical User Interfaces - GUI</li><li>Typography - 字体<ul><li>The Quick Brown Fox Jumps Over The Lazy Dog - 字体测试中的常见句</li><li>矢量图</li></ul></li></ul><h3 id="Fundamental-Intellectual-Challenges"><a href="#Fundamental-Intellectual-Challenges" class="headerlink" title="Fundamental Intellectual Challenges"></a>Fundamental Intellectual Challenges</h3><ul><li>Creates and interacts with realistic virtual world</li><li>Requires understanding of all aspects of physical world</li><li>New computing methods, displays, technologies</li></ul><h3 id="Technical-Challenges"><a href="#Technical-Challenges" class="headerlink" title="Technical Challenges"></a>Technical Challenges</h3><ul><li>Math of (perspective) projections, curves, surfaces</li><li>Physics of lighting and shading</li><li>Representing / operating shapes in 3D</li><li>Animation / simulation</li><li><del>3D graphics software programming and hardware</del></li></ul><h2 id="WHY-CG-is-AWESOME"><a href="#WHY-CG-is-AWESOME" class="headerlink" title="WHY - CG is AWESOME"></a>WHY - CG is AWESOME</h2><h3 id="Course-Topics-mainly-4-parts"><a href="#Course-Topics-mainly-4-parts" class="headerlink" title="Course Topics (mainly 4 parts)"></a>Course Topics (mainly 4 parts)</h3><ul><li>Rasterization<ul><li>Project geometry primitives (3D triangles / polygons) onto the screen</li><li>Break projected primitives into fragments (pixels)</li><li>Gold standard in Video Games (<strong>Real-time</strong> (30fps) Applications)</li></ul></li><li>Curves and Meshes<ul><li>How to represent geometry in Computer Graphics</li></ul></li><li>Ray Tracing<ul><li>Shoot rays from the camera though each pixel</li><li>Calculate <strong>intersection</strong> and <strong>shading</strong></li><li><strong>Continue to bounce</strong> the rays till they hit light sources</li><li>Gold standard in Animations / Movies (Offline Applications)</li><li>trad off - 慢但效果好</li><li>两个都要 - 实时光线追踪</li></ul></li><li>Animation / Simulation<ul><li>Key frame Animation</li><li>Mass-spring System</li></ul></li></ul><h3 id="GAMES101-is-NOT-about"><a href="#GAMES101-is-NOT-about" class="headerlink" title="GAMES101 is NOT about"></a>GAMES101 is NOT about</h3><ul><li>Using OpenGL / DirectX / Vulcan</li><li>The syntax of Shaders</li><li>3D modeling using Maya / 3DS MAX / Blender, or VR / game development using Unity / Unreal Engine (where can I learn them?)</li><li>Computer Vision / Deep Learning topics, e.g. XYZ-GAN (where can I learn them?)</li><li>CV - 一切需要猜测的内容</li><li>We learn Graphics, not Graphics APIs!</li><li>After this course, you’ll be able to learn these by yourself (I promise)</li></ul><h3 id="CG-V-S-CV"><a href="#CG-V-S-CV" class="headerlink" title="CG V.S. CV"></a>CG V.S. CV</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003415.png" alt="Differences of CG and CV" style="zoom: 33%;" /><h2 id="Course-Logic"><a href="#Course-Logic" class="headerlink" title="Course Logic"></a>Course Logic</h2><h3 id="General-Information"><a href="#General-Information" class="headerlink" title="General Information"></a>General Information</h3><ul><li>Modern Course<ul><li>Comprehensive but<br>without hardware programming!</li><li>Pace/ contents subject to change</li></ul></li><li>Course Website<ul><li><a href="http://www.cs.ucsb.edu/~lingqi/teaching/games101.html">http://www.cs.ucsb.edu/~lingqi/teaching/games101.html</a></li><li>Has all the needed information</li><li>Syllabus, slides, reading materials, etc.</li></ul></li><li>Course slides and (pre)-reading materials</li><li>No Required Textbooks<ul><li>Reading materials (if any) will available online before lectures</li><li>Lecture slides will be available after class</li></ul></li><li>Most recommended reference<ul><li>Steve Marschner and Peter Shirley, “Fundamentals of Computer Graphics”, 3rd or later edition.</li><li>Sign up on our BBS for discussion<br>(<a href="http://games-cn.org/forums/forum/games-online-course-forum/">http://games-cn.org/forums/forum/games-online-course-forum/</a>)</li></ul></li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Mostly programming tasks with provided code skeletons and virtual machine image</li><li>Weekly (usually no more than 20 lines of code per week)</li><li>Language: C++</li></ul><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>Submit your project by 11:59PM on/before the due dates (strictly enforced)</li><li>Feedback will be provided in a week</li><li>Assignment Submission Website<br>(<a href="http://www.smartchair.org/GAMES2020Course-YLQ/">http://www.smartchair.org/GAMES2020Course-YLQ/</a>)</li><li>No Exams</li><li>Course Project / Final Project<ul><li>Starting midway of this course</li><li>References will be provided, but you decide the topic</li><li>Best work will be posted online for showing off</li></ul></li></ul><h3 id="Use-An-IDE"><a href="#Use-An-IDE" class="headerlink" title="Use An IDE!"></a>Use An IDE!</h3><ul><li>IDE: Integrated Development Environment</li><li>Helps you parse a entire project<ul><li>And gives hints on syntax / usages of member functions, etc.</li></ul></li><li>Recommended IDEs<ul><li>Visual Studio (Windows only) / Visual Studio Code (cross platform)</li><li>Qt Creator (personal)</li></ul></li><li>Not Recommended IDEs (for C++ programming)<ul><li>CLion (慢), Eclipse (代码分析不好)</li><li>Sublime Text, Vi / Vim, Emacs (not even IDEs)</li></ul></li><li>Work alone for regular assignments<ul><li>no copy-pasting from any other sources</li></ul></li><li>Do not publish your code (on Github, etc.) for assignments using our skeleton code</li><li>Do not post your solution online<ul><li>Discussion / explanation is welcomed</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-Introduction To Mordern Computer Graphics</title>
      <link href="2021/07/16/games101-introduction-to-mordern-computer-graphics/"/>
      <url>2021/07/16/games101-introduction-to-mordern-computer-graphics/</url>
      
        <content type="html"><![CDATA[<h1 id="GAMES101——现代计算机图形学入门笔记"><a href="#GAMES101——现代计算机图形学入门笔记" class="headerlink" title="GAMES101——现代计算机图形学入门笔记"></a>GAMES101——现代计算机图形学入门笔记</h1><h2 id="Why-Note"><a href="#Why-Note" class="headerlink" title="Why Note"></a>Why Note</h2><p>为投递腾讯的技术研究-计算机图形学岗位，其中要求熟练掌握计算机图形学基本理论和算法，遂学习之，特此记录。</p><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><ul><li>以下基本信息引用自<a href="http://games-cn.org/intro-graphics/">课程官网</a>：<ul><li><strong>课程简介</strong><ul><li>本课程将全面而系统地介绍现代计算机图形学的四大组成部分：（1）光栅化成像，（2）几何表示，（3）光的传播理论，以及（4）动画与模拟。每个方面都会从基础原理出发讲解到实际应用，并介绍前沿的理论研究。通过本课程，你可以学习到计算机图形学背后的数学和物理知识，并锻炼实际的编程能力。</li><li>顾名思义，作为入门，本课程会尽可能的覆盖图形学的方方面面，把每一部分的基本概念都尽可能说清楚，让大家对计算机图形学有一个完整的、自上而下的全局把握。全局的理解很重要，学完本课程后，你会了解到图形学不等于OpenGL，不等于光线追踪，而是一套生成整个虚拟世界的方法。从本课程的标题，大家还可以看到“现代”二字，也就是说，这门课所要给大家介绍的都是现代化的知识，也都是现代图形学工业界需要的图形学基础。</li><li>本课程与其它图形学教程还有一个重要的区别，那就是本课程不会讲授OpenGL，甚至不会提及这个概念。本课程所讲授的内容是图形学背后的原理，而不是如何使用一个特定的图形学API。在学习完这门课的时候，你一定有能力自己使用OpenGL写实时渲染的程序。另外，本课程并不涉及计算机视觉、图像视频处理、深度学习，也不会介绍游戏引擎与三维建模软件的使用。</li><li>具体课程内容请参见课程大纲:<a href="http://games-cn.org/intro-graphics%E3%80%82">http://games-cn.org/intro-graphics。</a></li></ul></li><li><strong>教师简介</strong><ul><li>闫令琪，博士，加州大学圣芭芭拉分校（UCSB）助理教授。闫令琪教授于2013年在清华大学获得学士学位，并于2018年在加州大学伯克利分校（UCB）获得博士学位。他的主要研究方向是真实感图形渲染（旧称绘制），具体请参考学术主页：<a href="https://sites.cs.ucsb.edu/~lingqi/%E3%80%82%E7%AE%80%E8%80%8C%E8%A8%80%E4%B9%8B%EF%BC%8C%E9%97%AB%E4%BB%A4%E7%90%AA%E6%95%99%E6%8E%88%E7%9B%AE%E5%89%8D%E6%9C%89%E4%B8%89%E4%B8%AA%E6%88%90%E5%B0%B1%EF%BC%9A%EF%BC%881%EF%BC%89%E5%9C%A8%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%EF%BC%8C%E4%BB%96%E4%BF%9D%E6%8C%81%E7%9D%80%E5%8D%9A%E5%A3%AB%E6%9C%9F%E9%97%B4%EF%BC%885%E5%B9%B4%EF%BC%89%E4%BB%A5%E7%AC%AC%E4%B8%80%E4%BD%9C%E8%80%85%E8%BA%AB%E4%BB%BD%E5%8F%91%E8%A1%A87%E7%AF%87SIGGRAPH%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87%E7%9A%84%E6%9C%80%E9%AB%98%E7%BA%AA%E5%BD%95%EF%BC%88SIGGRAPH%EF%BC%8CSIGGRAPH">https://sites.cs.ucsb.edu/~lingqi/。简而言之，闫令琪教授目前有三个成就：（1）在图形渲染领域，他保持着博士期间（5年）以第一作者身份发表7篇SIGGRAPH系列论文的最高纪录（SIGGRAPH，SIGGRAPH</a> Asia，Transaction on Graphics）；（2）他的博士论文于2019年获得SIGGRAPH最佳博士论文奖，并得到官方盛赞“每章都可以作为一篇独立的博士论文”；（3）他的科研成果被直接应用于工业界，如影片《猩球崛起3：终极之战》与《狮子王2019》，以及与 NVIDIA 合作推动了实时光线追踪技术的产生；（4）在本课程的第一节课上，大家会了解到第四点也是最重要的一点：）</li></ul></li><li><strong>直播方式</strong><ul><li><a href="http://games虎牙直播间webinar.games-cn.org/">GAMES虎牙直播间webinar.games-cn.org</a></li></ul></li><li><strong>课程主页：</strong><ul><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html</a></li></ul></li><li><strong>课程BBS：</strong><ul><li><a href="http://games-cn.org/forums/forum/graphics-intro/">http://games-cn.org/forums/forum/graphics-intro/</a></li></ul></li><li><strong>课程PPT和视频：</strong><ul><li><a href="http://games-cn.org/graphics-intro-ppt-video/">http://games-cn.org/graphics-intro-ppt-video/</a></li></ul></li><li><strong>课程需求：</strong><ul><li>【必须】：高等数学（微积分、线性代数）、算法、数据结构</li><li>【非必须】：信号处理、数值分析、大学物理（光学）</li></ul></li><li><strong>课程安排：</strong><ul><li>【课时】：共安排20节课，每节一小时，每周两节，安排在北京时间周二和周五上午10:00-11:00，2020年2月11日开始</li><li>【作业（非必须）】：共7次小作业，1次大作业，全部是编程任务，会提供代码框架。作业不作强制要求，自愿完成</li><li>【考试】：无考试安排</li><li>【其它】：中文授课，英文课件，采用直播互动形式，以轻松愉快为主，每课结束当天会放出录像</li></ul></li><li><strong>教材：</strong><ul><li>【非必须】：Steve Marschner and Peter Shirley, “Fundamentals of Computer Graphics”, 第三版或更新版本。很遗憾中文版应该只有第二版，大家也可以对照着看。不过英文版写得非常好，浅显易懂，所以应该并无太大问题</li></ul></li></ul></li></ul><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ol><li><p><a href="https://medill-east.github.io/2021/07/16/games101-1-20200211-20210703-overview-of-cg/">GAMES101-1 20200211 20210703 Overview of CG</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-2-20200214-20210704-a-swift-and-brutal-introduction-to-linear-algebra/">GAMES101-2 20200214 20210704 A Swift and Brutal Introduction to Linear Algebra</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-3-20200218-20210704-transformation/">GAMES101-3 20200218 20210704 Transformation</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-4-20200221-20210705-transformation-cont/">GAMES101-4 20200221 20210705 Transformation Cont</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-5-20200225-20210706-07-rasterization-1-triangles/">GAMES101-5 20200225 20210706 07 Rasterization 1 (Triangles)</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-6-20200228-20210708-rasterization-2-anti-aliasing-and-z-buffering/">GAMES101-6 20200228 20210708 Rasterization 2 anti - aliasing and Z - buffering</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-7-20200303-20210708-shading-1-illumination-shading-and-graphics-pipeline/">GAMES101-7 20200303 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-8-20200306-20210708-shading-2-shading-pipeline-and-texture-mapping/">GAMES101-8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)</a></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 搭建 Blog (MacOS)</title>
      <link href="2021/05/24/my-first-post/"/>
      <url>2021/05/24/my-first-post/</url>
      
        <content type="html"><![CDATA[<h2 id="20210524-Start-to-build"><a href="#20210524-Start-to-build" class="headerlink" title="20210524 Start to build"></a>20210524 Start to build</h2><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>最近在学产品经理的课，有了呈现作品集的需求，遂在网上寻找教程搭建 Blog，最终选定了<a href="https://zhuanlan.zhihu.com/p/35668237">这篇</a>详细的教程，在此记录搭建过程。</p><h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><h4 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h4><p>去到官网下载<a href="https://nodejs.org/zh-cn/download/">Node.js 安装包</a>，按提示安装就好啦。</p><p>之后打开命令行输入以下指令，若出现版本号则证明安装成功：</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h4><p><a href="https://git-scm.com/downloads">Git 下载页面</a></p><blockquote><p>因为很久之前已经安装过 Git，所以详细步骤先按下不表</p></blockquote><h4 id="Github-注册及仓库新建"><a href="#Github-注册及仓库新建" class="headerlink" title="Github 注册及仓库新建"></a>Github 注册及仓库新建</h4><h5 id="Github-注册"><a href="#Github-注册" class="headerlink" title="Github 注册"></a>Github 注册</h5><p>移步 <a href="https://github.com/">Github 官网</a> 完成注册。</p><blockquote><p>详细过程这里也按下不表，理由同上</p></blockquote><h5 id="仓库搭建"><a href="#仓库搭建" class="headerlink" title="仓库搭建"></a>仓库搭建</h5><p>注册完账号后回到自己的页面，然后选择新建仓库：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524114739.png"></p><p>这里对项目名字进行更改，其中名字需要有 <code>github.io</code> 后缀，<code>这里的名字一定要和自己的 github name 相同！</code>，然后记得选中 <code>Add a README file</code>：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524114910.png"></p><p>然后找到该 repository 之后，点击 <code>settings</code>：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524115240.png"></p><p>直接往下滑之后会看到 <code>Github Pages</code>：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524115314.png"></p><p>点进去之后 <code>Choose a theme</code> 可以先随机挑选一个主题，之后回到 <code>GitHub Pages</code>，可以看到下面的界面：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524115755.png"></p><p>点进去之后就能看到自己的网页啦。</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524121147.png"></p><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p><a href="https://zhuanlan.zhihu.com/p/35668237">教程</a>中这里是在本地找了一个位置新建了一个文件夹来存放博客文件，暂时没搞懂和直接放 <code>github</code> 上的区别… </p><p>这里我先用 <a href="https://desktop.github.com/">Github Desktop</a> 把之前新建的仓库下载到本地：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524121018.png"></p><p>所以我就先也在 之前新建的仓库文件夹下创建新的 <code>blog</code> 文件夹。</p><p>用命令行进入到该路径下，输入如下指令安装 Hexo，此处若有报错可无视：</p><pre class="line-numbers language-none"><code class="language-none">sudo npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后输入如下指令验证安装结果：</p><pre class="line-numbers language-none"><code class="language-none">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后输入如下指令初始化网站：</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入如下指令安装必备组件：</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上完成了本地的网站配置，然后是如下几个有用的指令：</p><ul><li><p>生成静态网页</p><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开本地服务器</p></li></ul><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后在浏览器键入<a href="http://localhost:4000/">http://localhost:4000/</a>就可以打开查看啦。</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524121816.png"></p><p>然后按 <code>ctrl + c</code> 关闭本地服务器。</p><h4 id="连接-Github-与本地"><a href="#连接-Github-与本地" class="headerlink" title="连接 Github 与本地"></a>连接 Github 与本地</h4><p>打开命令行后输入如下指令，记得将相应用户名和邮箱改成自己的：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;YourGitName&quot;git config --global user.email &quot;YourEmail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后生成密钥：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;haodong.liao@gmail.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里会提示你键入保存密钥的地址，只需要不断回车即可：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524122153.png"></p><p>打开自己的 <a href="https://github.com/">github</a>，点击头像之后点击 <code>settings</code>，然后选择 <code>SSH and GPG keys</code>，新建一个 SSH，名字我起名为 <code>blog</code>，然后在命令行中输入以下指令：</p><pre class="line-numbers language-none"><code class="language-none">cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将输出的内容保存到密钥的内容框中，点击保存。</p><p>之后在命令行中键入如下内容，若出现用户名则成功：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524122557.png"></p><p>打开博客根目录下的 <code>_config.yml</code> 文件，即博客的配置文件，修改以下配置为你自己的配置：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:Medill-East&#x2F;haodong.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意 <code>repository</code> 的地址可以从仓库的这里获取：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524122756.png"></p><h4 id="写文章-发布文章"><a href="#写文章-发布文章" class="headerlink" title="写文章 发布文章"></a>写文章 发布文章</h4><p>在博客根目录下输入以下指令安装扩展：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入以下指令以新建文章：</p><pre class="line-numbers language-none"><code class="language-none">hexo new post &quot;my first post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在路径 <code>.\blog\source\_posts</code> 目录下就可以看到多出了 <code>my-first-post.md</code> 文件，这就是文章文件啦。</p><p>对 md 文件进行相应编辑后，在根目录下键入以下指令以生成静态网页和进行本地预览：</p><ul><li><p>生成静态网页</p><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开本地服务器</p></li></ul><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上传到 github</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意需要确保 <code>Github Pages</code> <code>settings</code> 下的 <code>Source</code> 下的 <code>Branch</code> 为 <code>master</code></p></blockquote><blockquote><p>然后如果本地做过一些改动的话需要同步到 github 上</p></blockquote><hr><h2 id="20210526-解决-CSS-样式不加载的问题"><a href="#20210526-解决-CSS-样式不加载的问题" class="headerlink" title="20210526 解决 CSS 样式不加载的问题"></a>20210526 解决 CSS 样式不加载的问题</h2><p>按照如上步骤配置之后出现了一个问题：在本地预览能够看到的效果部署到网页之后没了 CSS 的效果，所以这里先对这个问题进行一下解决。</p><p>尝试了多篇帖子的办法，最终以如下途径成功加载上了 CSS：</p><ol><li><p>把仓库名改为了<br><code>your github name.github.io</code><br>比如我的 github name 为 <code>Medill-East</code><br>那么仓库名就需要为 <code>medill-east.github.io</code></p></li><li><p>更改根目录下的 _config.yml 配置文件的开头部分 <code>URL</code> 和 <code>root</code> 配置：</p></li></ol><pre class="line-numbers language-none"><code class="language-none"># URLurl: https:&#x2F;&#x2F;medill-east.github.io&#x2F; # 这里记得改成自己的 url 哦root: &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>感谢这篇帖子：<a href="https://github.com/hexojs/hexo/issues/1121">生成路径的问题，导致css，js无法加载 #1121</a></p><hr><h2 id="20210527-更换主题"><a href="#20210527-更换主题" class="headerlink" title="20210527 更换主题"></a>20210527 更换主题</h2><p>这里和 <a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a> 中一样，采用的是 <a href="https://blinkfox.github.io/">blinkfox</a> 的 <a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a> 该主题。</p><p>以下为过程记录。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>进入根目录的 <code>themes</code> 文件夹下，用命令行下载：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h4><p>修改根目录下 <code>_config.yml</code> 的 <code>theme</code> 的值：</p><pre class="line-numbers language-none"><code class="language-none">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>建议修改</li><li> 两个 <code>per_page</code> 的分页条数设为 <code>6</code> 的倍数，以优化显示</li><li> 若是中文用户可以修改 <code>language</code> 的值为 <code>zh-CN</code></li></ul><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p><code>categories</code> 用于展示所有分类， 若是 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2021-05-27 11:44:43type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p><code>tags</code>页用于展示所有标签，若是 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2021-05-27 11:44:43type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p><code>about</code> 页用于展示关于我和我的博客的信息，若是 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2021-05-27 11:49:31type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建友链-friends-页（可选）"><a href="#新建友链-friends-页（可选）" class="headerlink" title="新建友链 friends 页（可选）"></a>新建友链 friends 页（可选）</h4><p><code>friends</code> 页用于展示友情链接，若是 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;friends&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: friendsdate: 2021-05-27 11:51:08type: &quot;friends&quot;layout: &quot;friends&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">[&#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;1_qq_27922023.jpg&quot;,    &quot;name&quot;: &quot;码酱&quot;,    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;luokangyuan.com&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;4027734.jpeg&quot;,    &quot;name&quot;: &quot;闪烁之狐&quot;,    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;blinkfox.github.io&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;ja_rome&quot;,    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,    &quot;url&quot;: &quot;ttps:&#x2F;&#x2F;me.csdn.net&#x2F;jlh912008548&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>使用了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件做代码高亮。返回根目录 <code>blog</code> 之后运行如下代码：</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改根目录下 <code>_config.yml</code> 文件中的 <code>higlight.enable</code> 值为 <code>false</code>，并新增 <code>prism</code> 插件相关配置：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="20210530"><a href="#20210530" class="headerlink" title="20210530"></a>20210530</h2><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>主题中使用了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，先回到根目录后，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="中文链接转拼音（可选）"><a href="#中文链接转拼音（可选）" class="headerlink" title="中文链接转拼音（可选）"></a>中文链接转拼音（可选）</h4><p>Hexo 默认会使得名称为中文的文章的永久链接中也有中文，这样会降低兼容性，而且 <code>gitment</code> 评论对中文链接也不支持，这里和教程中一样，使用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin </a> Hexo 插件在生成文章时生成中文拼音的永久链接：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="文章字数统计（可选）"><a href="#文章字数统计（可选）" class="headerlink" title="文章字数统计（可选）"></a>文章字数统计（可选）</h4><p>这里和教程中一样，使用 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount </a> Hexo 插件统计文章字数、阅读时长信息：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: true  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加-RSS-订阅支持（可选）"><a href="#添加-RSS-订阅支持（可选）" class="headerlink" title="添加 RSS 订阅支持（可选）"></a>添加 RSS 订阅支持（可选）</h4><p>这里和教程中一样，使用 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed </a> Hexo 插件提供 RSS 订阅功能：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<br><code>hexo clean &amp;&amp; hexo g</code></p><p>重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>页脚修改的配置文件在主题文件(即<code>themes/hexo-theme-matery</code>文件夹)的<br><code>/layout/_partial/footer.ejs</code>，包括站点、使用的主题、访问量等。</p><p>这里我对作者信息进行了一下修改，需要到 <code>_config.yml</code> 文件中找到 <code>author:</code> 然后改成自己的信息。之后别忘了</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有同步 <code>github</code> 哦</p><h4 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h4><p>在主题 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>/<code>Github</code>和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;blinkfox&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;    &lt;i class&#x3D;&quot;fa fa-github&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：fa-github）你可以在 <a href="https://fontawesome.com/v5.15/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: fa-facebook</li><li>Twitter: fa-twitter</li><li>Google-plus: fa-google-plus</li><li>Linkedin: fa-linkedin</li><li>Tumblr: fa-tumblr</li><li>Medium: fa-medium</li><li>Slack: fa-slack</li><li>新浪微博: fa-weibo</li><li>微信: fa-wechat</li><li>QQ: fa-qq</li></ul><h4 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="配置音乐播放器（可选）"><a href="#配置音乐播放器（可选）" class="headerlink" title="配置音乐播放器（可选）"></a>配置音乐播放器（可选）</h4><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[&#123;    &quot;name&quot;: &quot;五月雨变奏电音&quot;,    &quot;artist&quot;: &quot;AnimeVibe&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music1.mp3&quot;,    &quot;cover&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music-cover1.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Take me hand&quot;,    &quot;artist&quot;: &quot;DAISHI DANCE,Cecile Corbel&quot;,    &quot;url&quot;: &quot;&#x2F;medias&#x2F;music&#x2F;music2.mp3&quot;,    &quot;cover&quot;: &quot;&#x2F;medias&#x2F;music&#x2F;cover2.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Shape of You&quot;,    &quot;artist&quot;: &quot;J.Fla&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music3.mp3&quot;,    &quot;cover&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music-cover3.png&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class="line-numbers language-none"><code class="language-none"># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h4 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为非必填的。但教程的作者仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th align="right">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td>title</td><td align="right">Markdown 的文件标题</td><td align="center">文章标题，<strong>强烈建议填写此选项</strong></td></tr><tr><td>date</td><td align="right">文件创建时的日期时间</td><td align="center">发布时间，<strong>强烈建议填写此选</strong>项，且最好保证<strong>全局唯一</strong></td></tr><tr><td>author</td><td align="right">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="center">文章作者</td></tr><tr><td>img</td><td align="right">featureImages 中的某个值</td><td align="center">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等，我自己使用的是 picgo + github )来做图片的路径. 如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td align="right">true</td><td align="center">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td align="right">false</td><td align="center">v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td align="right">无</td><td align="center">v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td align="right">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td align="right">true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td align="right">false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td align="right">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td align="right">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td align="right">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p>注意:</p></blockquote><blockquote><p>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 id 是通过 date 的值来作为唯一标识的。<br>如果要对文章设置阅读验证密码的功能，不仅要在 <code>Front-matter</code> 中设置采用了 SHA256 加密的 <code>password</code> 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="https://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</p></blockquote><p>以下为教程作者给出的示例：</p><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动添加文章头"><a href="#自动添加文章头" class="headerlink" title="自动添加文章头"></a>自动添加文章头</h4><p>这里参考 <a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a> 中所写，把 <code>/scaffolds/post.md</code> 修改为如下代码，这样创建新 <code>post</code> 的时候就不用手动填充，只需要修改对应信息了：</p><pre class="line-numbers language-none"><code class="language-none">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;top: falsecover: falsepassword:toc: truemathjax: truesummary:tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="20210605"><a href="#20210605" class="headerlink" title="20210605"></a>20210605</h2><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><h3 id="更多修改可能性"><a href="#更多修改可能性" class="headerlink" title="更多修改可能性"></a>更多修改可能性</h3><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #373B44 0%, #4286f4 100%);&#125;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，原教程中主题代码中是每天动态切换一张，只需 7 张即可。<br>这里我从自己照的照片找了 26 张出来，所以稍微做了一些更改：<br>找到 <code>banner</code> 切换的  <code>JavaScript</code> 代码位置 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-none"><code class="language-none">var num &#x3D; new Date().getSeconds() % 26;$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + num + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>/source/medias/featureimages</code> 文件夹中默认有 24 张图片，我也将其改为了 26 张图片，并在主题文件夹下的 <code>_config.yml</code> 的 <code>featureImages</code> 部分做同步修改。</p><h4 id="修改了主页的打字效果相关文字"><a href="#修改了主页的打字效果相关文字" class="headerlink" title="修改了主页的打字效果相关文字"></a>修改了主页的打字效果相关文字</h4><p>主题文件夹下的 <code>_config.yml</code> 中找到 <code>sutitle</code> 部分的 <code>sub</code> 部分可以对文字进行相应修改</p><h4 id="更改了-myGallery"><a href="#更改了-myGallery" class="headerlink" title="更改了 myGallery"></a>更改了 myGallery</h4><p><code>关于</code> 页面的 <code>我的相册</code> 部分可以展示图片，这里我也是把所有的图片都摆上来了：</p><pre class="line-numbers language-none"><code class="language-none">myGallery:  enable: true  data:    - &#x2F;medias&#x2F;featureimages&#x2F;0.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;1.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;2.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;3.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;4.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;5.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;6.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;7.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;8.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;9.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;10.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;11.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;12.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;13.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;14.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;15.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;16.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;17.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;18.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;19.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;20.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;21.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;22.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;23.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;24.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;25.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;26.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其余更改"><a href="#其余更改" class="headerlink" title="其余更改"></a>其余更改</h4><ul><li>更改 favicon</li><li>更改 logo</li><li>更改 githubLink 为 false</li><li>更新 profile</li><li>把 my projects 和 my skills 暂时留空</li><li>更改了 根目录 <code>_config.yml</code> 文件中的 <code>description</code></li><li>因为出现了 <code>can not get /</code> 问题，所以暂时删掉了 contact 页面</li></ul><hr><h2 id="20211116-添加评论功能"><a href="#20211116-添加评论功能" class="headerlink" title="20211116 添加评论功能"></a>20211116 添加评论功能</h2><p>和教程中一样，这里也使用了畅言评论插件。</p><ol><li>首先<a href="http://changyan.kuaizhan.com/">在这里</a>注册一个畅言账号。</li><li>打开<code>进入工作台-安装畅言-通用代码安装</code>页面，复制页面中的代码：</li></ol><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116142114.png"></p><ol start="3"><li>打开 <code>.../blog/themes/hexo-theme-matery/layout/post.ejs</code></li><li>将上面的代码复制到最底部就可以啦！</li></ol><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20211116142429.png"></p><h2 id="Todo：域名问题"><a href="#Todo：域名问题" class="headerlink" title="Todo：域名问题"></a>Todo：域名问题</h2><p>暂时先凑合用，后面再琢磨域名问题(￣▽￣)”</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a></li><li><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></li><li><a href="https://github.com/hexojs/hexo/issues/1121">生成路径的问题，导致css，js无法加载 #1121</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog-building </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
