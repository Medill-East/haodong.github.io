<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GAMES101-7 20200303 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)</title>
      <link href="2021/07/16/games101-7-20200303-20210708-shading-1-illumination-shading-and-graphics-pipeline/"/>
      <url>2021/07/16/games101-7-20200303-20210708-shading-1-illumination-shading-and-graphics-pipeline/</url>
      
        <content type="html"><![CDATA[<h1 id="7-20200303-20210708-Shading-1-Illumination-Shading-and-Graphics-Pipeline"><a href="#7-20200303-20210708-Shading-1-Illumination-Shading-and-Graphics-Pipeline" class="headerlink" title="7 20200303 / 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)"></a>7 20200303 / 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)</h1><h1 id="深度缓存：解决可见性-遮挡问题"><a href="#深度缓存：解决可见性-遮挡问题" class="headerlink" title="深度缓存：解决可见性/遮挡问题"></a>深度缓存：解决可见性/遮挡问题</h1><h2 id="Painter’s-Algorithm"><a href="#Painter’s-Algorithm" class="headerlink" title="Painter’s Algorithm"></a>Painter’s Algorithm</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708125836.png" alt="Painter's Algorithm" style="zoom: 50%;" /><ul><li>从后向前绘制，<strong>overwrite</strong> in the frame buffer</li><li>需要考虑绘制顺序</li><li>Requires sorting in depth (O(n log n) for n triangles) Can have unresolvable depth order<ul><li>但会出现无法定义深度关系的情况</li></ul></li></ul><h3 id="Z-Buffer-深度缓存"><a href="#Z-Buffer-深度缓存" class="headerlink" title="Z-Buffer 深度缓存"></a>Z-Buffer 深度缓存</h3><ul><li><p>This is the algorithm that eventually won.</p></li><li><p>Idea:</p><ul><li>Store current min. z-value for each sample (pixel) 记录像素最浅深度</li><li>Needs an additional buffer for depth values</li><li>frame buffer stores color values (color buffer)</li><li>depth buffer (z-buffer) stores depth (depth buffer)</li></ul></li><li><p>IMPORTANT: For simplicity we suppose</p><ul><li><p>z is always positive<br>(smaller z -&gt; closer, larger z -&gt; further)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708130237.png" alt="Z-Buffer examples" style="zoom: 33%;" /></li></ul></li><li><p>Algorighm</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708130440.png" alt="Z-Buffer Algorithm" style="zoom: 33%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708130621.png" alt="Z-Buffer Algorithm cont." style="zoom: 33%;" /><ul><li>初始深度无限远</li><li>把三角形做光栅化为像素</li><li>找到像素后找到其深度</li><li>z 值小就更新</li></ul></li><li><p>z-buffer Complexity</p></li><li><p>O(n) for n triangles (assuming constant coverage)</p></li><li><p>How is it possible to sort n triangles in linear time?</p><ul><li>并没有排序 只是进行了比较 找最小值</li></ul></li><li><p>绘制顺序不同不影响结果</p><ul><li>两个浮点数基本不可能完全相等</li></ul></li><li><p>Most important visibility algorithm</p><ul><li>Implemented in hardware for all GPUs</li></ul></li><li><p>z-buffer 处理不了透明物体</p></li></ul><h1 id="What-we’ve-covered-so-far"><a href="#What-we’ve-covered-so-far" class="headerlink" title="What we’ve covered so far"></a>What we’ve covered so far</h1><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708131319.png" alt="What we've covered so far" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708131557.png" alt="Rotating Cubes" style="zoom:33%;" /><h1 id="Shading-着色"><a href="#Shading-着色" class="headerlink" title="Shading 着色"></a>Shading 着色</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ul><li>In Merriam-Webster Dictionary<ul><li>shading,  noun<br>The darkening or coloring of an illustration or diagram with parallel lines or a block of color.</li><li>In this course<ul><li>The process of applying a material to an object.</li></ul></li></ul></li></ul><h2 id="A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="A Simple Shading Model (Blinn-Phong Reflectance Model)"></a>A Simple Shading Model (Blinn-Phong Reflectance Model)</h2><ul><li><p>Perceptual Observations</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708132803.png" alt="Perceptual Observations" style="zoom:33%;" /><ul><li>高光 specular highlights</li><li>漫反射 diffuse reflection</li><li>环境光 ambient lighting</li></ul></li><li><p>Shading is Local - 着色局部性只看自己 不考虑其他任何物体的存在 所以没有阴影 (shading ≠ shadow)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708133217.png" alt="Shading is Local" style="zoom:33%;" /></li></ul><h3 id="Diffuse-Reflection"><a href="#Diffuse-Reflection" class="headerlink" title="Diffuse Reflection"></a>Diffuse Reflection</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708133534.png" alt="Diffuse Reflection" style="zoom:33%;" /><ul><li><p>把光看作能量 （Lambert）<br>看着色点周围单位面积能够接收到多少能量<br>直射接收到的能量 &gt; 折射接收到的能量</p></li><li><p>Light Falloff</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708133918.png" alt="Light Falloff" style="zoom:33%;" /><ul><li>能量守恒 - 单位点的能量越来越小 （不同球体表面积所含能量相同）</li></ul></li><li><p>Lambertian (Diffuse) Shading</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708134228.png" alt="Lambertian (Diffuse) Shading" style="zoom:33%;" /></li><li><p>$L_d = k_d (I/r^2)\max(0,\bf{n · l})$</p><ul><li>$k_d$: 着色点对于光的吸收率<ul><li>如果 $k_d = 1$<ul><li>表示该点完全不吸收能量 - 最亮</li></ul></li><li>如果 $k_d = 0$<ul><li>表示该点完全吸收能量没有能量反射出去 - 最暗</li></ul></li><li>如果定义为三通道的 rgb 分别有 01<ul><li>那么就可以定义颜色值</li></ul></li></ul></li><li>$I/r^2$：传播到着色点的强度（结合能量球来看 总面积为 $4\pi r^2$ 距离为 r，那么单位强度就是 $\frac{I}{4\pi r^2}$，为平方反比关系）<ul><li>I: 点光源在单位距离上的强度</li><li>r: 点光源和着色点的距离</li></ul></li><li>$max(0, \bf{n · l})$<ul><li>为什么有 0<ul><li>如果是负数代表从反面照射没有意义</li></ul></li><li>$\bf{n · l}$ 为余弦角</li><li>整体表示被着色点能接收到的能量的比例</li></ul></li><li>漫反射与V无关 - 和观测点无关</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-6 20200228 20210708 Rasterization 2 anti - aliasing and Z - buffering</title>
      <link href="2021/07/16/games101-6-20200228-20210708-rasterization-2-anti-aliasing-and-z-buffering/"/>
      <url>2021/07/16/games101-6-20200228-20210708-rasterization-2-anti-aliasing-and-z-buffering/</url>
      
        <content type="html"><![CDATA[<h1 id="6-20200228-20210708-Rasterization-2-anti-aliasing-and-Z-buffering"><a href="#6-20200228-20210708-Rasterization-2-anti-aliasing-and-Z-buffering" class="headerlink" title="6 20200228/20210708 Rasterization 2 anti-aliasing and Z-buffering"></a>6 20200228/20210708 Rasterization 2 anti-aliasing and Z-buffering</h1><h2 id="Sampling-Artifacts-Errors-Mistakes-Inaccuracies-in-Computer-Graphics"><a href="#Sampling-Artifacts-Errors-Mistakes-Inaccuracies-in-Computer-Graphics" class="headerlink" title="Sampling Artifacts (Errors / Mistakes / Inaccuracies) in Computer Graphics"></a>Sampling Artifacts (Errors / Mistakes / Inaccuracies) in Computer Graphics</h2><ul><li><p>采样的例子</p><ul><li>rasterization = sample 2d positions</li><li>photograph = sample image sensor plane</li></ul></li><li><p>video = sample time</p></li><li><p>采样瑕疵的例子 sampling artifacts</p><ul><li><p>Jaggies (staircase pattern)</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105306.png" alt="Jaggies (staircase pattern)" style="zoom: 25%;" /></li><li><p>Moiré Patterns in Imaging</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105327.png" alt="Moiré Patterns in Imaging" style="zoom: 25%;" /></li><li><p>Wagon Wheel Illusion (False Motion)</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105353.png" alt="Wagon Wheel Illusion (False Motion)" style="zoom: 25%;" /><ul><li>原因：人眼在时间上的采样跟不上运动速度</li></ul></li></ul></li><li><p>采样瑕疵的本质</p><ul><li>Signals are changing too fast (high frequency), but sampled too slowly</li></ul></li></ul><h1 id="Antialiasing-Idea-Blurring-Pre-Filtering-Before-Sampling"><a href="#Antialiasing-Idea-Blurring-Pre-Filtering-Before-Sampling" class="headerlink" title="Antialiasing Idea: Blurring (Pre-Filtering) Before Sampling"></a>Antialiasing Idea: Blurring (Pre-Filtering) Before Sampling</h1><ul><li><p>先模糊滤波再采样</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105614.png" alt="Rasterization: Point Sampling in Space" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105628.png" alt="Rasterization: Antialiased Sampling" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105754.png" alt="效果对比" style="zoom:25%;" /></li></ul><h1 id="But-why"><a href="#But-why" class="headerlink" title="But why?"></a>But why?</h1><ol><li>Why undersampling introduces aliasing?</li><li>Why pre-filtering then sampling can do antialiasing?</li></ol><ul><li><p>Let’s dig into fundamental reasons</p><p>And look at how to implement antialiased rasterization</p></li><li><p>为什么先采样再模糊不行</p><ul><li>先采样后 频谱已经发生了混叠</li><li>此时再模糊 得到的结果还是混叠的频谱</li></ul></li></ul><h1 id="Frequency-domain-频域"><a href="#Frequency-domain-频域" class="headerlink" title="Frequency domain 频域"></a>Frequency domain 频域</h1><ul><li><p>Frequencies</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708105917.png" alt="Frequencies" style="zoom:25%;" /></li></ul><h2 id="Fourier-Transform"><a href="#Fourier-Transform" class="headerlink" title="Fourier Transform"></a>Fourier Transform</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110031.png" alt="Fourier Transform" style="zoom:25%;" /><ul><li><p>傅里叶级数展开：任何一个周期函数都可以写成一系列正弦余弦函数线性组合以及一个常数项</p><ul><li>任何一个函数都可分解为不同频率</li></ul></li><li><p>fourier Transform Decomposes A Signal into Frequencies 傅里叶变换（把一个函数变为另一个，或者反过来）把函数分解为不同频率的段并分别显示出来</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110225.png" alt="fourier Transform Decomposes A Signal into Frequencies" style="zoom:25%;" /></li><li><p>Higher Frequencies Need Faster Sampling</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110352.png" alt="Higher Frequencies Need Faster Sampling" style="zoom:25%;" /></li><li><p>Undersampling Creates Frequency Aliases 欠采样导致了频率瑕疵以频率定义走样：假如蓝色和黑色分别是两个不同的函数 二者采样方法相同 但本身频率不同 导致了采样结果相同</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110544.png" alt="Undersampling Creates Frequency Aliases" style="zoom:25%;" /></li></ul><h2 id="Filtering-Getting-rid-of-certain-frequency-contents"><a href="#Filtering-Getting-rid-of-certain-frequency-contents" class="headerlink" title="Filtering = Getting rid of certain frequency contents"></a>Filtering = Getting rid of certain frequency contents</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708110721.png" alt="Viasualizing Image Frequency Content" style="zoom:25%;" /><ul><li><p>傅里叶变换把图像从时域变成了频域</p></li><li><p>中心是最低频 周围是高频</p></li><li><p>多数信息集中在低频（中心）</p></li><li><p>水平和竖直亮线</p><ul><li>分析信号时会假设信号周期性重复（即假设图片水平重叠放置 AAAA）</li><li>但实际上并不重复</li><li>那么在左右边界部分会产生剧烈信号变化 - 产生高频</li><li>则产生白线</li><li>若分析单幅内容 可忽略</li></ul></li><li><p>高通滤波（抹掉低频信号）可得到图像内容轮廓边界 - 和周围内容相差巨大 - 信号变化非常大 - 高频信号</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708111303.png" alt="高通滤波" style="zoom:25%;" /></li><li><p>低通滤波（只有低频信号通过，抹掉高频信息）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708112533.png" alt="低通滤波" style="zoom:25%;" /><ul><li>边界被抹去</li><li>水波纹</li></ul></li><li><p>去掉了高和低频率信息</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708112640.png" alt="同时过滤高低频信息" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708112659.png" alt="同时过滤高低频信息 cont." style="zoom:25%;" /><ul><li>提取到了不太明显的轮廓特征</li><li>数字图像处理</li></ul></li></ul><h1 id="Filtering-Convolution-卷积-Averaging-加权平均"><a href="#Filtering-Convolution-卷积-Averaging-加权平均" class="headerlink" title="Filtering = Convolution 卷积 (= Averaging) 加权平均"></a>Filtering = Convolution 卷积 (= Averaging) 加权平均</h1><ul><li><p>Convolution 卷积</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708113238.png" alt="Convolution" style="zoom:25%;" /></li><li><p>图形学中的简化定义</p><ul><li>卷积：通过窗口来进行点乘获取中心值（相当于加权平均）</li></ul></li><li><p>Convolution Theorem（卷积定理）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708113517.png" alt="Convolution Theorem" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708113559.png" alt="Convolution Theorem cont." style="zoom:25%;" /><ul><li>Convolution in the spatial domain is equal to multiplication in the frequency domain, and vice versa - 在时域上想对信号进行卷积相当于在频域上进行乘积，反之亦然</li><li>Option 1:<ul><li>Filter by convolution in the spatial domain</li></ul></li><li>Option 2:<ul><li>Transform to frequency domain (Fourier transform)</li><li>Multiply by Fourier transform of convolution kernel</li><li>Transform back to spatial domain (inverse Fourier)</li></ul></li></ul></li></ul><h2 id="Box-Filter-低通滤波器"><a href="#Box-Filter-低通滤波器" class="headerlink" title="Box Filter 低通滤波器"></a>Box Filter 低通滤波器</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708114556.png" alt="Box Filter" style="zoom:25%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708114539.png" alt="Box Filter - Works as “Low Pass” Filter" style="zoom:25%;" /><ul><li>box 越大结果越模糊（留下的频率越低）<ul><li>相当于画笔变大</li></ul></li><li>考虑极端情况<ul><li>box 超级大 - 只有最中间有采样信息</li><li>box 超级小 - 全部频率都被留下来</li></ul></li></ul><h1 id="Sampling-Repeating-Frequency-Contents"><a href="#Sampling-Repeating-Frequency-Contents" class="headerlink" title="Sampling = Repeating Frequency Contents"></a>Sampling = Repeating Frequency Contents</h1><ul><li><p>冲激函数（某些位置有值有些没有，为0）</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708114726.png" alt="冲激函数" style="zoom:25%;" /><ul><li>采样：给定函数与冲激函数相乘得到采样结果</li><li>采样（从频域角度理解）：就是在重复原始信号的频谱</li></ul></li></ul><p>$$时域的乘积 = 频域的卷积$$</p><ul><li><p>为什么会走样</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708115306.png" alt="为什么会走样" style="zoom:25%;" /><ul><li>采样率不足（不够快），导致原始信号复制粘贴距离不够大，频率的频谱发生了混叠，即走样</li><li>相当于采样低 = 稀疏采样</li></ul></li></ul><h1 id="Anti-Aliasing"><a href="#Anti-Aliasing" class="headerlink" title="Anti-Aliasing"></a>Anti-Aliasing</h1><ul><li>How Can We Reduce Aliasing Error?</li><li>Option 1: Increase sampling rate<ul><li>Essentially increasing the distance between replicas in the<br>Fourier domain</li><li>Higher resolution displays, sensors, framebuffers…</li><li>But: costly &amp; may need very high resolution</li></ul></li><li>Option 2: Antialiasing<ul><li>Making Fourier contents “narrower” before repeating</li><li>i.e. Filtering out high frequencies before sampling</li></ul></li><li>步骤<ul><li>先卷积</li><li>再采样</li></ul></li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708115851.png" alt="如何反走样" style="zoom:25%;" /><ul><li><p>模糊之后的频谱覆盖范围小</p></li><li><p>所以采样堆叠几率小</p></li><li><p>如何模糊</p><ul><li><p>用一定大小的低通滤波器来处理图像</p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708120101.png" alt="A Practical Pre-Filter" style="zoom:25%;" /></li></ul></li></ul><h2 id="Antialiasing-by-averaging-values-in-pixel-area"><a href="#Antialiasing-by-averaging-values-in-pixel-area" class="headerlink" title="Antialiasing by averaging values in pixel area"></a>Antialiasing by averaging values in pixel area</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708120227.png" alt="Antialiasing by averaging values in pixel area" style="zoom:25%;" /><ul><li><p>Solution:</p><ul><li>Convolve f(x,y) by a 1-pixel box-blur<ul><li>convolving = filtering = averaging</li></ul></li><li>Then sample at every pixel’s center</li></ul></li><li><p>怎么把三角形在像素内覆盖的区域算出来：</p></li></ul><h2 id="Antialiasing-By-Supersampling-MSAA"><a href="#Antialiasing-By-Supersampling-MSAA" class="headerlink" title="Antialiasing By Supersampling (MSAA)"></a>Antialiasing By Supersampling (MSAA)</h2><blockquote><p> 解决的是对信号的模糊操作 不是靠提升分辨率解决问题 只是为了解决三角形覆盖问题</p></blockquote><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708120523.png" alt="Supersampling" style="zoom:25%;" /><ul><li>给像素内部加采样点 看像素覆盖率</li></ul><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708122814.png" alt="Supersampling cont." style="zoom:25%;" /><h2 id="Antialiasing-Today"><a href="#Antialiasing-Today" class="headerlink" title="Antialiasing Today"></a>Antialiasing Today</h2><ul><li>No free lunch!What’s the cost of MSAA?<ul><li>增加了计算量</li></ul></li><li>Milestones (personal idea)<ul><li>FXAA (Fast Approximate AA)<ul><li>和采样无关 相当于后期处理</li><li>得到一幅图 有锯齿 找到边界 将有锯齿的边界换成没有锯齿的边界</li></ul></li><li>TAA (Temporal AA)<ul><li>复用上一帧信息 在当前帧不引入新信息</li></ul></li></ul></li><li>Super resolution / super sampling 超分辨率<ul><li>From low resolution to high resolution</li><li>Essentially still “not enough samples“ problem</li><li>DLSS (Deep Learning Super Sampling)<ul><li>一切猜测 深度学习都适合</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-5 20200225 20210706 07 Rasterization 1 (Triangles)</title>
      <link href="2021/07/16/games101-5-20200225-20210706-07-rasterization-1-triangles/"/>
      <url>2021/07/16/games101-5-20200225-20210706-07-rasterization-1-triangles/</url>
      
        <content type="html"><![CDATA[<h1 id="5-20200225-20210706-07-Rasterization-1-Triangles"><a href="#5-20200225-20210706-07-Rasterization-1-Triangles" class="headerlink" title="5 20200225 / 20210706/07 Rasterization 1 (Triangles)"></a>5 20200225 / 20210706/07 Rasterization 1 (Triangles)</h1><h3 id="Perspective-Projection"><a href="#Perspective-Projection" class="headerlink" title="Perspective Projection"></a>Perspective Projection</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210706094119.png" alt="Perspective Projection" style="zoom:50%;" /><ul><li><p>红线夹角（field-of-view, FOY）：垂直可视角度</p></li><li><p>How to convert from fovY and aspect to l,r,b,t?</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210706094725.png" alt="How to convert from fovY and aspect to l,r,b,t?" style="zoom:50%;" /></li></ul><h3 id="What’s-after-MVP"><a href="#What’s-after-MVP" class="headerlink" title="What’s after MVP?"></a>What’s after MVP?</h3><ul><li>Model transformation (placing objects)</li><li>View transformation (placing camera)</li><li>Projection transformation<ul><li>Orthographic projection (cuboid to “canonical” cube $[-1, 1]^3$)</li><li>Perspective projection (frustum to “canonical” cube)</li></ul></li><li>Canonical Cube to Screen （画在屏幕上）</li></ul><h3 id="Canonical-Cube-to-Screen"><a href="#Canonical-Cube-to-Screen" class="headerlink" title="Canonical Cube to Screen"></a>Canonical Cube to Screen</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707113705.png" alt="Canonical Cube to Screen" style="zoom:50%;" /><ul><li><p>What is a screen?</p><ul><li>An array of pixels</li><li>Size of the array: resolution</li><li>A typical kind of raster display</li></ul></li><li><p>Raster (光栅) == screen in German</p><ul><li>Rasterize == drawing onto the screen</li></ul></li><li><p>Pixel (FYl short for “picture element”)</p><ul><li>For now: A pixel is a little square with uniform color</li><li>Color is a mixture of (red, green, blue)</li></ul></li><li><p>Defining the screen space</p><ul><li><p>Slightly different from the “tiger book”</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707113221.png" alt="Canonical Cube to Screen - Defining the screen space" style="zoom:50%;" /></li><li><p>像素覆盖屏幕空间（宽 * 高）</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707113531.png" alt="Canonical Cube to Screen - Transform in xy plane" style="zoom:50%;" /></li></ul></li><li><p>Irrelevant to z</p></li><li><p>Transform in xy plane: $[-1: 1]^2$ to [o, width] x [o, height]</p></li><li><p>Viewport transform matrix: 视口变换</p><ul><li>先把 $[-1, 1]^2$ 映射到 $[0,width] x [0, height]$</li><li>再把屏幕中心左下角定义到原点 所以有平移变换</li><li>忽略 z 轴</li></ul></li></ul><h1 id="Rasterizing-Triangles-into-Pixels-光栅化"><a href="#Rasterizing-Triangles-into-Pixels-光栅化" class="headerlink" title="Rasterizing Triangles into Pixels 光栅化"></a>Rasterizing Triangles into Pixels 光栅化</h1><ul><li><p>Drawing machine</p><ul><li>CNC Sharpie Drawing Machine</li></ul>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713171942.png" alt="CNC Sharpie Drawing Machine" style="zoom: 33%;" /><ul><li>Laser Cutters</li></ul>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713170022.png" alt="Laser Cutters" style="zoom: 33%;" /></li></ul><h2 id="Different-Raster-Displays"><a href="#Different-Raster-Displays" class="headerlink" title="Different Raster Displays"></a>Different Raster Displays</h2><ul><li><p>Oscilloscope 示波器</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713170200.png" alt="Oscilloscope" style="zoom: 33%;" /></li></ul><h3 id="示波器成像原理-Cathode-Ray-Tube-CRT-阴极射线管"><a href="#示波器成像原理-Cathode-Ray-Tube-CRT-阴极射线管" class="headerlink" title="示波器成像原理 - Cathode Ray Tube (CRT) 阴极射线管"></a>示波器成像原理 - Cathode Ray Tube (CRT) 阴极射线管</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707114713.png" alt="Cathode Ray Tube (CRT) 阴极射线管" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210713170311.png" alt="Cathode Ray Tube (CRT) - Television" style="zoom: 33%;" /><ul><li>隔行扫描 （利用视觉暂留效应）高速运动画面会造成严重画面撕裂</li></ul><h3 id="Frame-Buffer-Memory-for-a-Raster-Display"><a href="#Frame-Buffer-Memory-for-a-Raster-Display" class="headerlink" title="Frame Buffer: Memory for a Raster Display"></a>Frame Buffer: Memory for a Raster Display</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707120919.png" alt="Frame Buffer: Memory for a Raster Display" style="zoom:50%;" /><h3 id="Flat-Panel-Displays"><a href="#Flat-Panel-Displays" class="headerlink" title="Flat Panel Displays"></a>Flat Panel Displays</h3><ul><li><p>LCD (liquid Crystal Display) Pixel</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121123.png" alt="LCD (liquid Crystal Display) Pixel" style="zoom:50%;" /><ul><li>Principle: block or transmit light by twisting polarization</li><li>Illumination from backlight (e.g. fluorescent or LED)</li><li>Intermediate intensity levels by partial twist</li></ul></li><li><p>OLED</p></li><li><p>LED Array Display 发光二极管</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121229.png" alt="LED Array Display 发光二极管" style="zoom:50%;" /></li><li><p>Electrophoretic (Electronic Ink) Display</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121242.png" alt="Electrophoretic (Electronic Ink) Display" style="zoom:50%;" /><ul><li>问题<ul><li>刷新率比较低（肉眼可见）</li></ul></li></ul></li></ul><h1 id="Rasterization-Drawing-to-Raster-Displays"><a href="#Rasterization-Drawing-to-Raster-Displays" class="headerlink" title="Rasterization: Drawing to Raster Displays"></a>Rasterization: Drawing to Raster Displays</h1><h2 id="Triangles-Fundamental-Shape-Primitives"><a href="#Triangles-Fundamental-Shape-Primitives" class="headerlink" title="Triangles - Fundamental Shape Primitives"></a>Triangles - Fundamental Shape Primitives</h2><ul><li><p>Why triangles?</p><ul><li>Most basic polygon</li><li>Break up other polygons 其他多边形可被拆为三角形</li></ul></li><li><p>Unique properties</p><ul><li>Guaranteed to be planar 三角形内部一定在同一平面</li><li>Well-defined interior 内外定义清晰</li><li>Well-defined method for interpolating values at vertices over triangle (barycentric interpolation) 定义三个顶点属性后 可以根据位置方便地插值</li></ul></li><li><p>What Pixel Values Approximate a Triangle</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707121757.png" alt="What Pixel Values Approximate a Triangle" style="zoom:50%;" /></li></ul><h1 id="A-simple-approach-sampling"><a href="#A-simple-approach-sampling" class="headerlink" title="A simple approach - sampling"></a>A simple approach - sampling</h1><h2 id="Sampling-a-Function"><a href="#Sampling-a-Function" class="headerlink" title="Sampling a Function"></a>Sampling a Function</h2><ul><li>definition<ul><li>Evaluating a function at a point is sampling.<br>We can discretize a function by sampling.<br>采样就是把函数离散化的过程</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">for (int x &#x3D; 0; x &lt; xmax; ++x;output [x] &#x3D; f(x);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Sampling is a core idea in graphics.<br>We sample time (1D), area (2D), direction (2D), volume (3D) …</li></ul><h2 id="看给定点像素中心是否在三角形内"><a href="#看给定点像素中心是否在三角形内" class="headerlink" title="看给定点像素中心是否在三角形内"></a>看给定点像素中心是否在三角形内</h2><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122155.png" alt="Rasterization As 2D Sampling" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122204.png" alt="Sample if Each Pixel Center Is Inside Triangle" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122216.png" alt="Sample if Each Pixel Center Is Inside Triangle cont." style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122225.png" alt="Define Binary Function" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122234.png" alt="Rasterization = Sampling A 2D Indicator Function" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122337.png" alt="Recall: Sample Location" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122357.png" alt="Evaluating inside" style="zoom:50%;" /><ul><li><p>方法：叉乘</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122408.png" alt="方法：叉乘" style="zoom:50%;" /></li></ul><h2 id="Edge-Cases"><a href="#Edge-Cases" class="headerlink" title="Edge Cases"></a>Edge Cases</h2><ul><li><p>不作处理</p></li><li><p>都做特殊处理</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122603.png" alt="Edge Cases" style="zoom:50%;" /></li></ul><h2 id="Cheking-all-pixels-on-the-screen"><a href="#Cheking-all-pixels-on-the-screen" class="headerlink" title="Cheking all pixels on the screen"></a>Cheking all pixels on the screen</h2><ul><li><p>包围盒 Axis-aligned bounding box AABB</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122729.png" alt="Cheking all pixels on the screen" style="zoom:50%;" /></li><li><p>Incremental Triangle Traversal</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122833.png" alt="Incremental Triangle Traversal" style="zoom:50%;" /><ul><li>适用于细长型三角形（像素少，但 bounding box 大）</li></ul></li></ul><h1 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h1><ul><li><p>Real LCD Screen Pixel (Closeup)</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707122958.png" alt="Real LCD Screen Pixel (Closeup)" style="zoom:50%;" /></li><li><p>Bayer pattern（右方）</p><ul><li>绿色的点比其他的多（红蓝几乎相等）</li><li>因为人眼对绿色更敏感</li></ul></li><li><p>Aside: What about other display methods</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123414.png" alt="Aside: What about other display methods" style="zoom:50%;" /></li><li><p>Assume display pixels emit square of light</p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123721.png" alt="Assume display pixels emit square of light" style="zoom:50%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123823.png" alt="The Display Physically Emits This Signal" style="zoom:50%;" />  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210707123843.png" alt="Compare: The Continous Triangle Function" style="zoom:50%;" /></li><li><p>question</p><ul><li>锯齿<ul><li>原因：采样率不够高</li><li>解决：next</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-4 20200221 20210705 Transformation Cont</title>
      <link href="2021/07/16/games101-4-20200221-20210705-transformation-cont/"/>
      <url>2021/07/16/games101-4-20200221-20210705-transformation-cont/</url>
      
        <content type="html"><![CDATA[<h1 id="4-20200221-20210705-Transformation-Cont"><a href="#4-20200221-20210705-Transformation-Cont" class="headerlink" title="4 20200221 / 20210705 Transformation Cont."></a>4 20200221 / 20210705 Transformation Cont.</h1><ul><li><p>旋转的逆就是旋转的转置（正交）</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705215358.png" alt="旋转的逆就是旋转的转置"></p></li><li><p>3D transformations</p></li><li><p>Viewing (观测) transformation</p><ul><li>View (视图) / Camera transformation</li><li>Projection (投影) transformation<ul><li>Orthographic (正交) projection</li><li>Perspectve (透视) projection</li></ul></li></ul></li></ul><h3 id="3D-transformations"><a href="#3D-transformations" class="headerlink" title="3D transformations"></a>3D transformations</h3><ul><li><p>Use homogeneous coordinates again:</p><ul><li>3D point = (x, y, z, 1]</li><li>3D vector = (x, y, z, 0)</li></ul></li><li><p>In general, (x, y, z, w) (w != 0) is the 3D point:<br>(x/w, y/w, z/w)</p><p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705215936.png" alt="3D transformations"></p></li><li><p>Rotation</p><ul><li>循环对称使得y的矩阵和xz不同，因为是 z 叉乘 x 而不是 x 叉乘 z，所以符号反</li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705215949.png" alt="3D transformations - Rotation"></p></li><li><p>3D Rotations</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705220226.png" alt="3D transformations - 3D Rotations"></p><ul><li><p>把任意旋转拆解为 x/y/z 旋转</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221000.png" alt="3D transformations - 3D Rotations cont."></p></li></ul></li><li><p>Rodrigues’ Rotation Formula</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221044.png" alt="Rodrigues’ Rotation Formula"></p><ul><li>默认轴过原点，方向为 $n$</li><li>若要沿着任意轴旋转<ul><li>先把旋转的起点平移到原点</li><li>旋转后再平移回来（逆操作）</li></ul></li><li><strong>四元数</strong> （）的引入是为了旋转的差值应用<ul><li>转 10°和转 30°的均值并不是转 20°</li></ul></li></ul></li></ul><h1 id="Viewing-transformation"><a href="#Viewing-transformation" class="headerlink" title="Viewing transformation"></a>Viewing transformation</h1><h2 id="View-Camera-transformation-视图-相机变换"><a href="#View-Camera-transformation-视图-相机变换" class="headerlink" title="View/ Camera transformation (视图/相机变换)"></a>View/ Camera transformation (视图/相机变换)</h2><ul><li><p>what is view transformation （MVP）</p><ul><li>Think about how to take a photo (MVP)<ul><li>Find a good place and arrange people (model transformation) 找物体位置 - 模型变换</li><li>Find a good “angle” to put the camera (view transformation) 找相机位置 - 视图变换</li><li>Cheese! (projection transformation) - 投影变换</li></ul></li></ul></li><li><p>How to perform view transformation</p><ul><li>Define the camera first<ul><li>Position $\vec e$</li><li>Look-at / gaze direction</li><li>Up direction $\hat t$</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221707.png" alt="View/ Camera transformation"></p></li><li><p>Key observation</p><ul><li><p>如果相机和所有物体一起移动，那么成像一致</p></li><li><p>所以把相机位置固定到原点沿着-z方向看（所有物体的位置也做变换）</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221756.png" alt="View/ Camera transformation - Key observation"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705221950.png" alt="View/ Camera transformation - Transform the camera"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705222442.png" alt="View/ Camera transformation - $M_{view}$ in math"></p></li></ul></li><li><p>先平移再旋转</p><ul><li>先把中心移动到原点（平移）</li><li>将所看方向旋转至 -z 方向</li><li>将 up 方向旋转到 y 方向</li><li>$g \times t$ 旋转到 x 方向</li></ul></li><li><p>正着写难写<br>$g \rightarrow -Z, t \rightarrow Y, (g · t \rightarrow X)$<br>反过来写好写<br>$X \rightarrow (g · t), Y \rightarrow t, Z \rightarrow -g$<br>（先求逆矩阵再求原矩阵-对逆矩阵求转置矩阵）</p><ul><li>因为是正交矩阵</li><li>所以对视图矩阵求逆就是求其转置</li></ul></li><li><p>summary</p></li><li><p>Transform objects together with the camera</p></li><li><p>Until camera’s at the origin, up at Y, look at -Z</p></li><li><p>Also known as ModelView Transformation 模型视图变换</p></li></ul><h2 id="Projection-transformation"><a href="#Projection-transformation" class="headerlink" title="Projection transformation"></a>Projection transformation</h2><ul><li>正交投影（平行光 平截头体）<ul><li>平行的线永远平行</li></ul></li><li>透视投影（点光源 锥形体）<ul><li>平行的线会相交</li><li>近大远小</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705223855.png" alt="Projection transformation"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705223921.png" alt="Projection transformation - Comparasion"></p><h3 id="Orthographic-projection-正交投影"><a href="#Orthographic-projection-正交投影" class="headerlink" title="Orthographic projection 正交投影"></a>Orthographic projection 正交投影</h3><ul><li><p>A simple way of understanding</p><ul><li>Camera located at origin, looking at -Z, up at Y (looks familiar?)</li><li>Drop Z coordinate</li><li>Translate and scale the resulting rectangle to $[-1, 1]^2$</li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224348.png" alt="Orthographic projection - A simple way of understanding"></p></li><li><p>In general</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224415.png" alt="Orthographic projection - In general"></p><ul><li><p>We want to map a cuboid [I, r] x [b, t] x [f, n] to<br>the “canonical ( 正 则 、 规 范 、 标 准 )“ cube $[-1, 1]^3$</p></li><li><p>Slightly different orders (to the “simple way”)</p><ul><li><p>Center cuboid by translating</p></li><li><p>Scale into “canonical” cube</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224642.png" alt="Orthographic projection - Slightly different orders"></p></li><li><p>Transformation matrix<br>先将各方向的中心平移到原点</p><p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224716.png" alt="Orthographic projection - Transformation matrix"></p></li></ul></li></ul></li><li><p>Caveat</p><ul><li>Looking at / along -Z is making near and far not intuitive (n &gt; f)</li><li>FYI: that’s why OpenGL (a Graphics API) uses left hand coords. （观测方向为 z 方向：n 为正的 f 为负的 n &gt; f， -z 方向：n 为负的 far 为正的 n &lt; f）</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705224856.png" alt="Orthographic projection - Caveat"></p><h3 id="Perspective-projection-透视投影-近大远小"><a href="#Perspective-projection-透视投影-近大远小" class="headerlink" title="Perspective projection 透视投影 近大远小"></a>Perspective projection 透视投影 近大远小</h3><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705225239.png" alt="Perspective projection"></p><ul><li><p>Most common in Computer Graphics, art, visual system</p></li><li><p>Further objects are smaller 近大远小</p></li><li><p>Parallel lines not parallel; converge to single point</p></li><li><p>Euclid</p><ul><li>平行线永不相交</li><li>但透视投影中会相交</li></ul></li><li><p>Before we move on</p></li><li><p>Recall: property of homogeneous coordinates</p><ul><li>(x,y,z,1), (kx, ky, kz, k != 0), (xz, yz, $z^2$, z != 0) all represent the same point (x, y, z) in 3D<ul><li>e.g. (1, 0, 0, 1) and (2, 0, 0, 2) both represent (1, 0, 0)</li></ul></li></ul></li><li><p>Simple, but useful</p></li><li><p>How to do perspective projection</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705225521.png" alt="How to do perspective projection"></p><ul><li>把透视投影分解为两步骤<ul><li>1.挤压成长方体</li><li>2.进行正交投影</li></ul></li><li>如何挤压<ul><li>原则<ul><li>近平面永远不变</li><li>挤了之后各自平面z不变</li><li>远平面中心点挤后不变</li></ul></li><li>任何一个点变换前后z不变</li><li>中间一个点经过挤压后如何变化</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230045.png" alt="Perspective Projection"></p><ul><li>相似三角形</li><li>y’ 和 y 的关系 $y’ = \frac{n}{z}y$</li><li>x’ 和 x 的关系 $x’ = \frac{n}{z}x$ (与 y 同理)</li></ul></li><li><p>齐次坐标下乘以一个非零数 k 依然为原来那个点（都乘 z）</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230359.png" alt="Perspective Projection"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230537.png" alt="Perspective Projection cont."></p></li><li><p>如何求剩余矩阵</p><ul><li><p>两个观察</p><ul><li><p>1.近平面上任意点都不会变</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705230936.png" alt="近平面上任意点都不会变"></p><ul><li><p>$n^2$和 x y 无关</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231317.png" alt="$n^2$和 x y 无关"></p></li></ul></li><li><p>2.远平面上任意点的 z 不会变</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231150.png" alt="Perspective Projection"></p><ul><li><p>取远平面中心点</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231329.png" alt="远平面上任意点的 z 不会变"></p></li></ul></li></ul></li><li><p>求解方程之后可知 AB，则 $M_{persp \rightarrow ortho}$ 得解</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705231401.png" alt="求解方程"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-3 20200218 20210704 Transformation</title>
      <link href="2021/07/16/games101-3-20200218-20210704-transformation/"/>
      <url>2021/07/16/games101-3-20200218-20210704-transformation/</url>
      
        <content type="html"><![CDATA[<h1 id="3-20200218-20210704-Transformation"><a href="#3-20200218-20210704-Transformation" class="headerlink" title="3 20200218 / 20210704 Transformation"></a>3 20200218 / 20210704 Transformation</h1><h1 id="Why-study-transformation"><a href="#Why-study-transformation" class="headerlink" title="Why study transformation"></a>Why study transformation</h1><ul><li>type<ul><li>Modeling 模型变换<ul><li>摄像机移动</li><li>rotation</li><li>scaling 皮克斯动画</li></ul></li><li>Viewing 视图变换 （3D to 2D projection）<ul><li>光栅化</li><li>投影</li></ul></li></ul></li><li>2D transformations</li><li>Homogeneous coordinates</li></ul><h1 id="2D-transformations"><a href="#2D-transformations" class="headerlink" title="2D transformations"></a>2D transformations</h1><h2 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h2><ul><li><p>uniform ($S_{0.5}$)</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011357.png" alt="Scale Transform"></p><ul><li><p>scale matrix</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011424.png" alt="Scale Matrix"></p></li></ul></li><li><p>non-uniform</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011507.png" alt="Scale (Non-Uniform)"></p></li></ul><h2 id="Reflection-Matrix"><a href="#Reflection-Matrix" class="headerlink" title="Reflection Matrix"></a>Reflection Matrix</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011606.png" alt="Reflection Matrix"></p><h2 id="Shear-Matrix-错切"><a href="#Shear-Matrix-错切" class="headerlink" title="Shear Matrix 错切"></a>Shear Matrix 错切</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011632.png" alt="Shear Matrix"></p><h2 id="Rotate-围绕-0-0-逆时针"><a href="#Rotate-围绕-0-0-逆时针" class="headerlink" title="Rotate 围绕(0,0)逆时针"></a>Rotate 围绕(0,0)逆时针</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704011945.png" alt="Rotate 围绕(0,0)逆时针"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012002.png" alt="Rotation Matrix"></p><h2 id="Linear-Transforms-Matrices"><a href="#Linear-Transforms-Matrices" class="headerlink" title="Linear Transforms = Matrices"></a>Linear Transforms = Matrices</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012456.png" alt="Linear Transforms = Matrices"></p><h1 id="Homogeneous-coordinates"><a href="#Homogeneous-coordinates" class="headerlink" title="Homogeneous coordinates"></a>Homogeneous coordinates</h1><ul><li>why</li></ul><blockquote><p>低一维的加法可以用高一维的乘法替换，所以有了齐次坐标目的：用齐次坐标统一所有变换 trade-off</p></blockquote><h2 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012724.png" alt="Translation"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704012803.png" alt="Why Homogeneous Coordinates"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013029.png" alt="Solution: Homogenous Coordinates"></p><blockquote><p>向量具有平移不变性</p></blockquote><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013352.png" alt="Homogenous Coordinates"></p><blockquote><p>point + point = 两点中点</p></blockquote><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013517.png" alt="Affine Transformations"></p><h2 id="Affine-Transformations-仿射变换-（线性变换（左上角矩阵）-平移变换（最后一列））"><a href="#Affine-Transformations-仿射变换-（线性变换（左上角矩阵）-平移变换（最后一列））" class="headerlink" title="Affine Transformations 仿射变换 （线性变换（左上角矩阵）+平移变换（最后一列））"></a>Affine Transformations 仿射变换 （线性变换（左上角矩阵）+平移变换（最后一列））</h2><ul><li><p>先线性变换再平移</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704013617.png" alt="Affine Transformations"></p></li></ul><h2 id="2D-Transformations"><a href="#2D-Transformations" class="headerlink" title="2D Transformations"></a>2D Transformations</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705213256.png" alt="2D Transformations"></p><blockquote><p>只有二维情况下仿射变换最后一行才是 001</p></blockquote><h2 id="Inverse-Transform-逆变换"><a href="#Inverse-Transform-逆变换" class="headerlink" title="Inverse Transform 逆变换"></a>Inverse Transform 逆变换</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705213700.png" alt="Inverse Transform"></p><h2 id="Composing-Transform-组合变换"><a href="#Composing-Transform-组合变换" class="headerlink" title="Composing Transform 组合变换"></a>Composing Transform 组合变换</h2><ul><li><p>复杂变换可通过简单变换得到</p></li><li><p>变换的顺序很重要（矩阵乘法不满足交换律）</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705213946.png" alt="Transform Odering Matters!"></p></li><li><p>矩阵放左边*向量</p></li><li><p>矩阵变换<strong>从右至左</strong>应用</p></li><li><p>矩阵没交换律但有结合律</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214134.png" alt="Composing Transforms"></p></li><li><p>可用一个矩阵表述非常复杂的变换</p></li></ul><h2 id="Decomposing-Complex-Transfroms-分解复杂矩阵"><a href="#Decomposing-Complex-Transfroms-分解复杂矩阵" class="headerlink" title="Decomposing Complex Transfroms 分解复杂矩阵"></a>Decomposing Complex Transfroms 分解复杂矩阵</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214331.png" alt="Decomposing Complex Transfroms"></p><ul><li>想要以某点为中心进行旋转<ul><li>先将该点移动到原点 - T(-c)</li><li>进行旋转 - R (a)</li><li>然后再逆操作移动到原位置 - T(c)</li><li>$T(c) · R(\alpha) · T(-c)$</li></ul></li></ul><h1 id="3D-Transforms"><a href="#3D-Transforms" class="headerlink" title="3D Transforms"></a>3D Transforms</h1><blockquote><p>和 2D 做类比</p></blockquote><ul><li>用四个数表示<ul><li>点则末尾加 1</li><li>向量则末尾加 0</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214740.png" alt="3D Transformations"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210705214749.png" alt="3D Transformations 2"></p><blockquote><p>仿射变换 = 线性变换 + 平移变换<br>先线性变换（缩放/旋转） 再平移变换</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-2 20200214 20210704 A Swift and Brutal Introduction to Linear Algebra</title>
      <link href="2021/07/16/games101-2-20200214-20210704-a-swift-and-brutal-introduction-to-linear-algebra/"/>
      <url>2021/07/16/games101-2-20200214-20210704-a-swift-and-brutal-introduction-to-linear-algebra/</url>
      
        <content type="html"><![CDATA[<h1 id="2-20200214-20210704-A-Swift-and-Brutal-Introduction-to-Linear-Algebra"><a href="#2-20200214-20210704-A-Swift-and-Brutal-Introduction-to-Linear-Algebra" class="headerlink" title="2 20200214 / 20210704 A Swift and Brutal Introduction to Linear Algebra!"></a>2 20200214 / 20210704 A Swift and Brutal Introduction to Linear Algebra!</h1><p>(in fact it’s relatively easy…)</p><ul><li>Graphics’ Dependencies<ul><li>Basic mathematics<ul><li>Linear algebra, calculus, statistics</li></ul></li><li>Basic physics<ul><li>Optics, Mechanics</li></ul></li><li>Misc<ul><li>Signal processing, Numerical analysis</li></ul></li><li>And a bit of aesthetics</li></ul></li></ul><h2 id="This-Course"><a href="#This-Course" class="headerlink" title="This Course"></a>This Course</h2><ul><li>More dependent on Linear Algebra<ul><li>Vectors (dot products, cross products, …)</li><li>Matrices (matrix-matrix, matrix-vector mult., …)</li></ul></li><li>For example,<ul><li>Apoint is a vector (?)</li><li>An operation like translating or rotating objects<br>can be matrix-vector multiplication</li></ul></li></ul><h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003508.png" alt="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003508.png"></p><ul><li>Usually written as $\vec a$  or in bold $\bf{a}$</li><li>Or using start and end points $\vec{AB}=B-A$</li><li>Direction and length</li><li>No absolute starting position</li></ul><h3 id="Vector-Normalization"><a href="#Vector-Normalization" class="headerlink" title="Vector Normalization"></a>Vector Normalization</h3><ul><li>Magnitude (length) of a vector written as $||\vec a||$</li><li>Unit vector .<ul><li>Avector with magnitude of 1</li><li>Finding the unit vector of a vector (normalization): $\hat a = \vec a / ||\vec a||$</li><li>Used to represent directions</li></ul></li></ul><h3 id="Vector-Addition"><a href="#Vector-Addition" class="headerlink" title="Vector Addition"></a>Vector Addition</h3><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003523.png" alt="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003523.png"></p><ul><li>Geometrically: Parallelogram law &amp; Triangle law</li><li>Algebraically: Simply add coordinates</li></ul><h3 id="Cartesian-Coordinates"><a href="#Cartesian-Coordinates" class="headerlink" title="Cartesian Coordinates"></a>Cartesian Coordinates</h3><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003535.png" alt="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003535.png"></p><ul><li>X and Y can be any (usually orthogonal unit) vectors<ul><li>$A =<br>\left{<br>\begin{matrix}<br>x\<br>y<br>\end{matrix}<br>\right}$</li><li>$A =  |  A^T = (x,y) |$</li><li>$||A|| = \sqrt{x^2 + y^2}$</li></ul></li></ul><h3 id="Vector-Multiplication"><a href="#Vector-Multiplication" class="headerlink" title="Vector Multiplication"></a>Vector Multiplication</h3><ul><li>Dot product</li><li>Cross product</li><li>Orthonormal bases and coordinate frames</li></ul><h3 id="Dos-scalar-Product-点乘"><a href="#Dos-scalar-Product-点乘" class="headerlink" title="Dos (scalar) Product 点乘"></a>Dos (scalar) Product 点乘</h3><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003555.png" alt="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003555.png"></p><ul><li><p>Properties</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003606.png" alt="Properties of Dot (scalar) Product"></p></li><li><p>Dot Product in Cartesian Coordinates</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003623.png" alt="Dot Product in Cartesian Coordinates"></p></li><li><p>Dot Product in Graphics</p><ul><li>Find angle between two vectors<br>(e.g. cosine of angle between light source and surface) 找夹角</li><li>Finding projection of one vector on another 找投影</li></ul></li><li><p>Dot Product for Projection</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004106.png" alt="Dot Product for Projection"></p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004125.png" alt="Dot Product for Projection 2"></p><ul><li><p>Measure how close two directions are （两个向量方向上接近就是1 垂直就0 相反就-1）</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003958.png" alt="Dot Product in Graphics"></p></li><li><p>Decompose a vector</p></li><li><p>Determine forward / backward</p><ul><li>应用：镜面反射 入射光 高光</li></ul></li></ul></li></ul><h3 id="Cross-product"><a href="#Cross-product" class="headerlink" title="Cross product"></a>Cross product</h3><ul><li><p>Cross (vector) Product</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004440.png" alt="Cross (vector) Product"></p><ul><li>Cross product is orthogonal to two initial vectors</li><li>Direction determined by right-hand rule 不满足交换律</li><li>Useful in constructing coordinate systems (later)</li></ul></li><li><p>Properties</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004642.png" alt="Properties of Cross Product"></p><ul><li>向量叉乘得到的还是向量</li></ul></li><li><p>Cartesian Formula</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704004949.png" alt="Cartesian Formula"></p></li><li><p>Cross Product in Graphics 应用</p><ul><li><p>Determine left / right 左侧-叉乘结果为正</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005045.png" alt="Cross Product in Graphics"></p></li><li><p>Determine inside / outside</p><blockquote><p>ab x ap<br>bc x bp<br>ca x cp<br>如果三个结果符号相同 那么就在内部 若结果为0则为Cornercase 可内可外</p></blockquote></li><li><p>应用 - 光栅化</p></li></ul></li></ul><h3 id="Orthonormal-Bases-Coordinate-Frames"><a href="#Orthonormal-Bases-Coordinate-Frames" class="headerlink" title="Orthonormal Bases / Coordinate Frames"></a>Orthonormal Bases / Coordinate Frames</h3><ul><li><p>Important for representing points, positions, locations</p></li><li><p>Often, many sets of coordinate systems</p></li><li><p>Global, local, world, model, parts of model (head, hands, …)</p></li><li><p>Critical issue is transforming between these systems/ bases</p></li><li><p>A topic for next week</p></li><li><p>Orthonormal Coordinate Frames 坐标系</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005439.png" alt="Orthonormal Coordinate Frames"></p></li></ul><hr><h3 id="Matrices"><a href="#Matrices" class="headerlink" title="Matrices"></a>Matrices</h3><ul><li><p>Magical 2D arrays that haunt in every CS course</p></li><li><p>In Graphics, pervasively used to represent transformations</p><ul><li>Translation, rotation, shear, scale (more details in the next lecture)</li></ul></li><li><p>What is a matrix</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005611.png" alt="What is a matrix"></p></li><li><p>Matrix-Matrix Multiplication</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005701.png" alt="Matrix-Matrix Multiplication"></p></li><li><p>Properties</p><ul><li><p><strong>Non-commutative</strong><br>(AB and BA are different in general)</p></li><li><p>Associative and distributive</p><ul><li>(AB)C=A(BC)</li><li>A(B+C) = AB+AC</li><li>(A+B)C = AC + BC</li></ul></li><li><p>Matrix-Vector Multiplication</p><ul><li><p>Treat vector as a column matrix (mx1)</p></li><li><p>Key for transforming points (next lecture)</p></li><li><p>Official spoiler: 2D reflection about y-axis</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704005923.png" alt="Matrix-Vector Multiplication"></p></li></ul></li><li><p>Transpose of a Matrix</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704010001.png" alt="Transpose of a Matrix"></p></li><li><p>Identity Matrix and Inverses</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704010020.png" alt="Identity Matrix and Inverses"></p></li><li><p>Vector multiplication in matrix form</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704010030.png" alt="Vector multiplication in matrix form"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-1 20200211 20210703 Overview of CG</title>
      <link href="2021/07/16/games101-1-20200211-20210703-overview-of-cg/"/>
      <url>2021/07/16/games101-1-20200211-20210703-overview-of-cg/</url>
      
        <content type="html"><![CDATA[<h1 id="1-20200211-20210703-Overview-of-CG"><a href="#1-20200211-20210703-Overview-of-CG" class="headerlink" title="1 20200211 / 20210703 Overview of CG"></a>1 20200211 / 20210703 Overview of CG</h1><ul><li>Topics</li></ul><h2 id="What-is-CG"><a href="#What-is-CG" class="headerlink" title="What is CG"></a>What is CG</h2><blockquote><p>The use of computers to <strong>synthesize</strong> and <strong>manipulate</strong> visual information.</p></blockquote><h2 id="Why-study"><a href="#Why-study" class="headerlink" title="Why study"></a>Why study</h2><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><ul><li>Video Games<ul><li>什么是好的画面 - 看画面是否足够亮 - 全局光照做得好不好<ul><li>只狼</li><li>无主之地3</li></ul></li></ul></li><li>Movies<ul><li>The Matrix<ul><li>Special Effects</li><li>特效是图形学中最简单的一类 - 平常见不到 - 做得不对也不会觉得意外</li><li>最困难的是最常见的</li></ul></li></ul></li><li>Avatar<ul><li>引入了面部/动作捕捉</li></ul></li><li>Animations<ul><li>Zootopia - 疯狂动物城</li><li>Frozen 2 - 冰雪奇缘 2</li></ul></li><li>Design<ul><li>Autodesk Gallary</li><li>CAD<ul><li>环境模拟</li><li>碰撞检测</li></ul></li><li>Ikea</li></ul></li><li>Visualization<ul><li>Science</li><li>Engineering</li><li>Medicine</li><li>Journalism</li></ul></li><li>Virtual Reality<ul><li>Augmented Reality</li><li>Digital Illustration<ul><li>PS</li></ul></li></ul></li><li>Simulation<ul><li>The Dust Bowl phenomena</li><li>Black hole from Interstellar</li></ul></li><li>Graphical User Interfaces - GUI</li><li>Typography - 字体<ul><li>The Quick Brown Fox Jumps Over The Lazy Dog - 字体测试中的常见句</li><li>矢量图</li></ul></li></ul><h3 id="Fundamental-Intellectual-Challenges"><a href="#Fundamental-Intellectual-Challenges" class="headerlink" title="Fundamental Intellectual Challenges"></a>Fundamental Intellectual Challenges</h3><ul><li>Creates and interacts with realistic virtual world</li><li>Requires understanding of all aspects of physical world</li><li>New computing methods, displays, technologies</li></ul><h3 id="Technical-Challenges"><a href="#Technical-Challenges" class="headerlink" title="Technical Challenges"></a>Technical Challenges</h3><ul><li>Math of (perspective) projections, curves, surfaces</li><li>Physics of lighting and shading</li><li>Representing / operating shapes in 3D</li><li>Animation / simulation</li><li><del>3D graphics software programming and hardware</del></li></ul><h2 id="WHY-CG-is-AWESOME"><a href="#WHY-CG-is-AWESOME" class="headerlink" title="WHY - CG is AWESOME"></a>WHY - CG is AWESOME</h2><h3 id="Course-Topics-mainly-4-parts"><a href="#Course-Topics-mainly-4-parts" class="headerlink" title="Course Topics (mainly 4 parts)"></a>Course Topics (mainly 4 parts)</h3><ul><li>Rasterization<ul><li>Project geometry primitives (3D triangles / polygons) onto the screen</li><li>Break projected primitives into fragments (pixels)</li><li>Gold standard in Video Games (<strong>Real-time</strong> (30fps) Applications)</li></ul></li><li>Curves and Meshes<ul><li>How to represent geometry in Computer Graphics</li></ul></li><li>Ray Tracing<ul><li>Shoot rays from the camera though each pixel</li><li>Calculate <strong>intersection</strong> and <strong>shading</strong></li><li><strong>Continue to bounce</strong> the rays till they hit light sources</li><li>Gold standard in Animations / Movies (Offline Applications)</li><li>trad off - 慢但效果好</li><li>两个都要 - 实时光线追踪</li></ul></li><li>Animation / Simulation<ul><li>Key frame Animation</li><li>Mass-spring System</li></ul></li></ul><h3 id="GAMES101-is-NOT-about"><a href="#GAMES101-is-NOT-about" class="headerlink" title="GAMES101 is NOT about"></a>GAMES101 is NOT about</h3><ul><li>Using OpenGL / DirectX / Vulcan</li><li>The syntax of Shaders</li><li>3D modeling using Maya / 3DS MAX / Blender, or VR / game development using Unity / Unreal Engine (where can I learn them?)</li><li>Computer Vision / Deep Learning topics, e.g. XYZ-GAN (where can I learn them?)</li><li>CV - 一切需要猜测的内容</li><li>We learn Graphics, not Graphics APIs!</li><li>After this course, you’ll be able to learn these by yourself (I promise)</li></ul><h3 id="CG-V-S-CV"><a href="#CG-V-S-CV" class="headerlink" title="CG V.S. CV"></a>CG V.S. CV</h3><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210704003415.png" alt="Differences of CG and CV"></p><h2 id="Course-Logic"><a href="#Course-Logic" class="headerlink" title="Course Logic"></a>Course Logic</h2><h3 id="General-Information"><a href="#General-Information" class="headerlink" title="General Information"></a>General Information</h3><ul><li>Modern Course<ul><li>Comprehensive but<br>without hardware programming!</li><li>Pace/ contents subject to change</li></ul></li><li>Course Website<ul><li><a href="http://www.cs.ucsb.edu/~lingqi/teaching/games101.html">http://www.cs.ucsb.edu/~lingqi/teaching/games101.html</a></li><li>Has all the needed information</li><li>Syllabus, slides, reading materials, etc.</li></ul></li><li>Course slides and (pre)-reading materials</li><li>No Required Textbooks<ul><li>Reading materials (if any) will available online before lectures</li><li>Lecture slides will be available after class</li></ul></li><li>Most recommended reference<ul><li>Steve Marschner and Peter Shirley, “Fundamentals of Computer Graphics”, 3rd or later edition.</li><li>Sign up on our BBS for discussion<br>(<a href="http://games-cn.org/forums/forum/games-online-course-forum/">http://games-cn.org/forums/forum/games-online-course-forum/</a>)</li></ul></li></ul><h3 id="Assignments"><a href="#Assignments" class="headerlink" title="Assignments"></a>Assignments</h3><ul><li>Mostly programming tasks with provided code skeletons and virtual machine image</li><li>Weekly (usually no more than 20 lines of code per week)</li><li>Language: C++</li></ul><h3 id="Submission"><a href="#Submission" class="headerlink" title="Submission"></a>Submission</h3><ul><li>Submit your project by 11:59PM on/before the due dates (strictly enforced)</li><li>Feedback will be provided in a week</li><li>Assignment Submission Website<br>(<a href="http://www.smartchair.org/GAMES2020Course-YLQ/">http://www.smartchair.org/GAMES2020Course-YLQ/</a>)</li><li>No Exams</li><li>Course Project / Final Project<ul><li>Starting midway of this course</li><li>References will be provided, but you decide the topic</li><li>Best work will be posted online for showing off</li></ul></li></ul><h3 id="Use-An-IDE"><a href="#Use-An-IDE" class="headerlink" title="Use An IDE!"></a>Use An IDE!</h3><ul><li>IDE: Integrated Development Environment</li><li>Helps you parse a entire project<ul><li>And gives hints on syntax / usages of member functions, etc.</li></ul></li><li>Recommended IDEs<ul><li>Visual Studio (Windows only) / Visual Studio Code (cross platform)</li><li>Qt Creator (personal)</li></ul></li><li>Not Recommended IDEs (for C++ programming)<ul><li>CLion (慢), Eclipse (代码分析不好)</li><li>Sublime Text, Vi / Vim, Emacs (not even IDEs)</li></ul></li><li>Work alone for regular assignments<ul><li>no copy-pasting from any other sources</li></ul></li><li>Do not publish your code (on Github, etc.) for assignments using our skeleton code</li><li>Do not post your solution online<ul><li>Discussion / explanation is welcomed</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMES101-Introduction To Mordern Computer Graphics</title>
      <link href="2021/07/16/games101-introduction-to-mordern-computer-graphics/"/>
      <url>2021/07/16/games101-introduction-to-mordern-computer-graphics/</url>
      
        <content type="html"><![CDATA[<h1 id="GAMES101——现代计算机图形学入门笔记"><a href="#GAMES101——现代计算机图形学入门笔记" class="headerlink" title="GAMES101——现代计算机图形学入门笔记"></a>GAMES101——现代计算机图形学入门笔记</h1><h2 id="Why-Note"><a href="#Why-Note" class="headerlink" title="Why Note"></a>Why Note</h2><p>为投递腾讯的技术研究-计算机图形学岗位，其中要求熟练掌握计算机图形学基本理论和算法，遂学习之，特此记录。</p><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><ul><li>以下基本信息引用自<a href="http://games-cn.org/intro-graphics/">课程官网</a>：<ul><li><strong>课程简介</strong><ul><li>本课程将全面而系统地介绍现代计算机图形学的四大组成部分：（1）光栅化成像，（2）几何表示，（3）光的传播理论，以及（4）动画与模拟。每个方面都会从基础原理出发讲解到实际应用，并介绍前沿的理论研究。通过本课程，你可以学习到计算机图形学背后的数学和物理知识，并锻炼实际的编程能力。</li><li>顾名思义，作为入门，本课程会尽可能的覆盖图形学的方方面面，把每一部分的基本概念都尽可能说清楚，让大家对计算机图形学有一个完整的、自上而下的全局把握。全局的理解很重要，学完本课程后，你会了解到图形学不等于OpenGL，不等于光线追踪，而是一套生成整个虚拟世界的方法。从本课程的标题，大家还可以看到“现代”二字，也就是说，这门课所要给大家介绍的都是现代化的知识，也都是现代图形学工业界需要的图形学基础。</li><li>本课程与其它图形学教程还有一个重要的区别，那就是本课程不会讲授OpenGL，甚至不会提及这个概念。本课程所讲授的内容是图形学背后的原理，而不是如何使用一个特定的图形学API。在学习完这门课的时候，你一定有能力自己使用OpenGL写实时渲染的程序。另外，本课程并不涉及计算机视觉、图像视频处理、深度学习，也不会介绍游戏引擎与三维建模软件的使用。</li><li>具体课程内容请参见课程大纲:<a href="http://games-cn.org/intro-graphics%E3%80%82">http://games-cn.org/intro-graphics。</a></li></ul></li><li><strong>教师简介</strong><ul><li>闫令琪，博士，加州大学圣芭芭拉分校（UCSB）助理教授。闫令琪教授于2013年在清华大学获得学士学位，并于2018年在加州大学伯克利分校（UCB）获得博士学位。他的主要研究方向是真实感图形渲染（旧称绘制），具体请参考学术主页：<a href="https://sites.cs.ucsb.edu/~lingqi/%E3%80%82%E7%AE%80%E8%80%8C%E8%A8%80%E4%B9%8B%EF%BC%8C%E9%97%AB%E4%BB%A4%E7%90%AA%E6%95%99%E6%8E%88%E7%9B%AE%E5%89%8D%E6%9C%89%E4%B8%89%E4%B8%AA%E6%88%90%E5%B0%B1%EF%BC%9A%EF%BC%881%EF%BC%89%E5%9C%A8%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E9%A2%86%E5%9F%9F%EF%BC%8C%E4%BB%96%E4%BF%9D%E6%8C%81%E7%9D%80%E5%8D%9A%E5%A3%AB%E6%9C%9F%E9%97%B4%EF%BC%885%E5%B9%B4%EF%BC%89%E4%BB%A5%E7%AC%AC%E4%B8%80%E4%BD%9C%E8%80%85%E8%BA%AB%E4%BB%BD%E5%8F%91%E8%A1%A87%E7%AF%87SIGGRAPH%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87%E7%9A%84%E6%9C%80%E9%AB%98%E7%BA%AA%E5%BD%95%EF%BC%88SIGGRAPH%EF%BC%8CSIGGRAPH">https://sites.cs.ucsb.edu/~lingqi/。简而言之，闫令琪教授目前有三个成就：（1）在图形渲染领域，他保持着博士期间（5年）以第一作者身份发表7篇SIGGRAPH系列论文的最高纪录（SIGGRAPH，SIGGRAPH</a> Asia，Transaction on Graphics）；（2）他的博士论文于2019年获得SIGGRAPH最佳博士论文奖，并得到官方盛赞“每章都可以作为一篇独立的博士论文”；（3）他的科研成果被直接应用于工业界，如影片《猩球崛起3：终极之战》与《狮子王2019》，以及与 NVIDIA 合作推动了实时光线追踪技术的产生；（4）在本课程的第一节课上，大家会了解到第四点也是最重要的一点：）</li></ul></li><li><strong>直播方式</strong><ul><li><a href="http://games虎牙直播间webinar.games-cn.org/">GAMES虎牙直播间webinar.games-cn.org</a></li></ul></li><li><strong>课程主页：</strong><ul><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html</a></li></ul></li><li><strong>课程BBS：</strong><ul><li><a href="http://games-cn.org/forums/forum/graphics-intro/">http://games-cn.org/forums/forum/graphics-intro/</a></li></ul></li><li><strong>课程PPT和视频：</strong><ul><li><a href="http://games-cn.org/graphics-intro-ppt-video/">http://games-cn.org/graphics-intro-ppt-video/</a></li></ul></li><li><strong>课程需求：</strong><ul><li>【必须】：高等数学（微积分、线性代数）、算法、数据结构</li><li>【非必须】：信号处理、数值分析、大学物理（光学）</li></ul></li><li><strong>课程安排：</strong><ul><li>【课时】：共安排20节课，每节一小时，每周两节，安排在北京时间周二和周五上午10:00-11:00，2020年2月11日开始</li><li>【作业（非必须）】：共7次小作业，1次大作业，全部是编程任务，会提供代码框架。作业不作强制要求，自愿完成</li><li>【考试】：无考试安排</li><li>【其它】：中文授课，英文课件，采用直播互动形式，以轻松愉快为主，每课结束当天会放出录像</li></ul></li><li><strong>教材：</strong><ul><li>【非必须】：Steve Marschner and Peter Shirley, “Fundamentals of Computer Graphics”, 第三版或更新版本。很遗憾中文版应该只有第二版，大家也可以对照着看。不过英文版写得非常好，浅显易懂，所以应该并无太大问题</li></ul></li></ul></li></ul><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><ol><li><p><a href="https://medill-east.github.io/2021/07/16/games101-1-20200211-20210703-overview-of-cg/">GAMES101-1 20200211 20210703 Overview of CG</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-2-20200214-20210704-a-swift-and-brutal-introduction-to-linear-algebra/">GAMES101-2 20200214 20210704 A Swift and Brutal Introduction to Linear Algebra</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-3-20200218-20210704-transformation/">GAMES101-3 20200218 20210704 Transformation</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-4-20200221-20210705-transformation-cont/">GAMES101-4 20200221 20210705 Transformation Cont</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-5-20200225-20210706-07-rasterization-1-triangles/">GAMES101-5 20200225 20210706 07 Rasterization 1 (Triangles)</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-6-20200228-20210708-rasterization-2-anti-aliasing-and-z-buffering/">GAMES101-6 20200228 20210708 Rasterization 2 anti - aliasing and Z - buffering</a></p></li><li><p><a href="https://medill-east.github.io/2021/07/16/games101-7-20200303-20210708-shading-1-illumination-shading-and-graphics-pipeline/">GAMES101-7 20200303 20210708 Shading 1 (Illumination, Shading and Graphics Pipeline)</a></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Study-CS-CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComputerGraphics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/07/16/games101-8-20200306-20210708-shading-2-shading-pipeline-and-texture-mapping/"/>
      <url>2021/07/16/games101-8-20200306-20210708-shading-2-shading-pipeline-and-texture-mapping/</url>
      
        <content type="html"><![CDATA[<p>title: GAMES101-8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)<br>top: false<br>cover: false<br>img: <a href="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708132803.png">https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210708132803.png</a><br>toc: true<br>mathjax: true<br>date: 2021-07-16 12:38:45<br>password:<br>summary: Shading, Pipeline, Texture Mapping.<br>tags: ComputerGraphics<br>categories: Study-CS-CG</p><h1 id="8-20200306-20210708-Shading-2-Shading-Pipeline-and-Texture-Mapping"><a href="#8-20200306-20210708-Shading-2-Shading-Pipeline-and-Texture-Mapping" class="headerlink" title="8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)"></a>8 20200306/20210708 Shading 2 (Shading, Pipeline and Texture Mapping)</h1><h2 id="A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="A Simple Shading Model (Blinn-Phong Reflectance Model)"></a>A Simple Shading Model (Blinn-Phong Reflectance Model)</h2><h3 id="Diffuse-Term-last-time"><a href="#Diffuse-Term-last-time" class="headerlink" title="Diffuse Term (last time)"></a>Diffuse Term (last time)</h3><h3 id="Specular-Term-Blinn-Phong"><a href="#Specular-Term-Blinn-Phong" class="headerlink" title="Specular Term (Blinn-Phong)"></a>Specular Term (Blinn-Phong)</h3><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709111209.png" alt="Specular Term (Blinn-Phong)" style="zoom:33%;" /><ul><li><p>高光项是因为观察方向和镜面反射方向足够接近（$\bf{v,R}$ 足够接近）</p></li><li><p>相当于法线方向 $\vec n$ 和半程向量 $\vec h$（即 $\bf{I,v}$ 向量加和后归一的方向）很接近</p></li><li><p>diffuse<br>$L_d = k_d (I/r^2)\max(0,\bf{n · l})$</p></li><li><p>specular<br>$L_s = k_s (I/r^2)\max(0,\cos \alpha)^p\<br>= k_s (I/r^2)\max(0,\bf{n · h})^p$</p><ul><li><p>这里按理也要考虑能量吸收 $\max(0,\bf{n · l})$<br>但因为 blinn-phong 是经验模型 所以简化掉了</p></li><li><p>$p$ 指数为高光修正 用于控制高光可见范围  为保证只有小范围能看到高光 可能值为 100-200</p><p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112445.png" alt="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112445.png"></p><p>  <img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112607.png" alt="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210709112607.png"></p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 搭建 Blog (MacOS)</title>
      <link href="2021/05/24/my-first-post/"/>
      <url>2021/05/24/my-first-post/</url>
      
        <content type="html"><![CDATA[<h1 id="20210524-Start-to-build"><a href="#20210524-Start-to-build" class="headerlink" title="20210524 Start to build"></a>20210524 Start to build</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>最近在学产品经理的课，有了呈现作品集的需求，遂在网上寻找教程搭建 Blog，最终选定了<a href="(https://zhuanlan.zhihu.com/p/35668237)">这篇</a>详细的教程，在此记录搭建过程。</p><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><h3 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h3><p>去到官网下载<a href="https://nodejs.org/zh-cn/download/">Node.js 安装包</a>，按提示安装就好啦。</p><p>之后打开命令行输入以下指令，若出现版本号则证明安装成功：</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p><a href="https://git-scm.com/downloads">Git 下载页面</a></p><blockquote><p>因为很久之前已经安装过 Git，所以详细步骤先按下不表</p></blockquote><h3 id="Github-注册及仓库新建"><a href="#Github-注册及仓库新建" class="headerlink" title="Github 注册及仓库新建"></a>Github 注册及仓库新建</h3><h4 id="Github-注册"><a href="#Github-注册" class="headerlink" title="Github 注册"></a>Github 注册</h4><p>移步 <a href="https://github.com/">Github 官网</a> 完成注册。</p><blockquote><p>详细过程这里也按下不表，理由同上</p></blockquote><h4 id="仓库搭建"><a href="#仓库搭建" class="headerlink" title="仓库搭建"></a>仓库搭建</h4><p>注册完账号后回到自己的页面，然后选择新建仓库：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524114739.png"></p><p>这里对项目名字进行更改，其中名字需要有 <code>github.io</code> 后缀，<code>这里的名字一定要和自己的 github name 相同！</code>，然后记得选中 <code>Add a README file</code>：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524114910.png"></p><p>然后找到该 repository 之后，点击 <code>settings</code>：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524115240.png"></p><p>直接往下滑之后会看到 <code>Github Pages</code>：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524115314.png"></p><p>点进去之后 <code>Choose a theme</code> 可以先随机挑选一个主题，之后回到 <code>GitHub Pages</code>，可以看到下面的界面：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524115755.png"></p><p>点进去之后就能看到自己的网页啦。</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524121147.png"></p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p><a href="https://zhuanlan.zhihu.com/p/35668237">教程</a>中这里是在本地找了一个位置新建了一个文件夹来存放博客文件，暂时没搞懂和直接放 <code>github</code> 上的区别… </p><p>这里我先用 <a href="https://desktop.github.com/">Github Desktop</a> 把之前新建的仓库下载到本地：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524121018.png"></p><p>所以我就先也在 之前新建的仓库文件夹下创建新的 <code>blog</code> 文件夹。</p><p>用命令行进入到该路径下，输入如下指令安装 Hexo，此处若有报错可无视：</p><pre class="line-numbers language-none"><code class="language-none">sudo npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后输入如下指令验证安装结果：</p><pre class="line-numbers language-none"><code class="language-none">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后输入如下指令初始化网站：</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入如下指令安装必备组件：</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上完成了本地的网站配置，然后是如下几个有用的指令：</p><ul><li><p>生成静态网页</p><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开本地服务器</p></li></ul><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后在浏览器键入<a href="http://localhost:4000/">http://localhost:4000/</a>就可以打开查看啦。</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524121816.png"></p><p>然后按 <code>ctrl + c</code> 关闭本地服务器。</p><h3 id="连接-Github-与本地"><a href="#连接-Github-与本地" class="headerlink" title="连接 Github 与本地"></a>连接 Github 与本地</h3><p>打开命令行后输入如下指令，记得将相应用户名和邮箱改成自己的：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;YourGitName&quot;git config --global user.email &quot;YourEmail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后生成密钥：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;haodong.liao@gmail.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里会提示你键入保存密钥的地址，只需要不断回车即可：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524122153.png"></p><p>打开自己的 <a href="https://github.com/">github</a>，点击头像之后点击 <code>settings</code>，然后选择 <code>SSH and GPG keys</code>，新建一个 SSH，名字我起名为 <code>blog</code>，然后在命令行中输入以下指令：</p><pre class="line-numbers language-none"><code class="language-none">cat ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将输出的内容保存到密钥的内容框中，点击保存。</p><p>之后在命令行中键入如下内容，若出现用户名则成功：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524122557.png"></p><p>打开博客根目录下的 <code>_config.yml</code> 文件，即博客的配置文件，修改以下配置为你自己的配置：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:Medill-East&#x2F;haodong.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意 <code>repository</code> 的地址可以从仓库的这里获取：</p><p><img src="https://raw.githubusercontent.com/Medill-East/IMGStorage/master/img/PicGo-Github-PicBed/20210524122756.png"></p><h3 id="写文章-发布文章"><a href="#写文章-发布文章" class="headerlink" title="写文章 发布文章"></a>写文章 发布文章</h3><p>在博客根目录下输入以下指令安装扩展：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入以下指令以新建文章：</p><pre class="line-numbers language-none"><code class="language-none">hexo new post &quot;my first post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在路径 <code>.\blog\source\_posts</code> 目录下就可以看到多出了 <code>my-first-post.md</code> 文件，这就是文章文件啦。</p><p>对 md 文件进行相应编辑后，在根目录下键入以下指令以生成静态网页和进行本地预览：</p><ul><li><p>生成静态网页</p><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开本地服务器</p></li></ul><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上传到 github</li></ul><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意需要确保 <code>Github Pages</code> <code>settings</code> 下的 <code>Source</code> 下的 <code>Branch</code> 为 <code>master</code></p></blockquote><blockquote><p>然后如果本地做过一些改动的话需要同步到 github 上</p></blockquote><hr><h1 id="20210526-解决-CSS-样式不加载的问题"><a href="#20210526-解决-CSS-样式不加载的问题" class="headerlink" title="20210526 解决 CSS 样式不加载的问题"></a>20210526 解决 CSS 样式不加载的问题</h1><p>按照如上步骤配置之后出现了一个问题：在本地预览能够看到的效果部署到网页之后没了 CSS 的效果，所以这里先对这个问题进行一下解决。</p><p>尝试了多篇帖子的办法，最终以如下途径成功加载上了 CSS：</p><ol><li><p>把仓库名改为了<br><code>your github name.github.io</code><br>比如我的 github name 为 <code>Medill-East</code><br>那么仓库名就需要为 <code>medill-east.github.io</code></p></li><li><p>更改根目录下的 _config.yml 配置文件的开头部分 <code>URL</code> 和 <code>root</code> 配置：</p></li></ol><pre class="line-numbers language-none"><code class="language-none"># URLurl: https:&#x2F;&#x2F;medill-east.github.io&#x2F; # 这里记得改成自己的 url 哦root: &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>感谢这篇帖子：<a href="https://github.com/hexojs/hexo/issues/1121">生成路径的问题，导致css，js无法加载 #1121</a></p><hr><h1 id="20210527-更换主题"><a href="#20210527-更换主题" class="headerlink" title="20210527 更换主题"></a>20210527 更换主题</h1><p>这里和 <a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a> 中一样，采用的是 <a href="https://blinkfox.github.io/">blinkfox</a> 的 <a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a> 该主题。</p><p>以下为过程记录。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>进入根目录的 <code>themes</code> 文件夹下，用命令行下载：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改根目录下 <code>_config.yml</code> 的 <code>theme</code> 的值：</p><pre class="line-numbers language-none"><code class="language-none">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>建议修改</li><li> 两个 <code>per_page</code> 的分页条数设为 <code>6</code> 的倍数，以优化显示</li><li> 若是中文用户可以修改 <code>language</code> 的值为 <code>zh-CN</code></li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 用于展示所有分类， 若是 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2021-05-27 11:44:43type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code>页用于展示所有标签，若是 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2021-05-27 11:44:43type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页用于展示关于我和我的博客的信息，若是 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2021-05-27 11:49:31type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建友链-friends-页（可选）"><a href="#新建友链-friends-页（可选）" class="headerlink" title="新建友链 friends 页（可选）"></a>新建友链 friends 页（可选）</h3><p><code>friends</code> 页用于展示友情链接，若是 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，就需要新建一个，回到博客根目录(<code>blog</code>文件夹)之后运行以下代码：</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;friends&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: friendsdate: 2021-05-27 11:51:08type: &quot;friends&quot;layout: &quot;friends&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">[&#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;1_qq_27922023.jpg&quot;,    &quot;name&quot;: &quot;码酱&quot;,    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;luokangyuan.com&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;4027734.jpeg&quot;,    &quot;name&quot;: &quot;闪烁之狐&quot;,    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;blinkfox.github.io&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;ja_rome&quot;,    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,    &quot;url&quot;: &quot;ttps:&#x2F;&#x2F;me.csdn.net&#x2F;jlh912008548&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>使用了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件做代码高亮。返回根目录 <code>blog</code> 之后运行如下代码：</p><pre class="line-numbers language-none"><code class="language-none">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改根目录下 <code>_config.yml</code> 文件中的 <code>higlight.enable</code> 值为 <code>false</code>，并新增 <code>prism</code> 插件相关配置：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="20210530"><a href="#20210530" class="headerlink" title="20210530"></a>20210530</h1><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>主题中使用了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，先回到根目录后，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（可选）"><a href="#中文链接转拼音（可选）" class="headerlink" title="中文链接转拼音（可选）"></a>中文链接转拼音（可选）</h3><p>Hexo 默认会使得名称为中文的文章的永久链接中也有中文，这样会降低兼容性，而且 <code>gitment</code> 评论对中文链接也不支持，这里和教程中一样，使用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin </a> Hexo 插件在生成文章时生成中文拼音的永久链接：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文章字数统计（可选）"><a href="#文章字数统计（可选）" class="headerlink" title="文章字数统计（可选）"></a>文章字数统计（可选）</h3><p>这里和教程中一样，使用 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount </a> Hexo 插件统计文章字数、阅读时长信息：</p><pre class="line-numbers language-none"><code class="language-none">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: true  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选）"><a href="#添加-RSS-订阅支持（可选）" class="headerlink" title="添加 RSS 订阅支持（可选）"></a>添加 RSS 订阅支持（可选）</h3><p>这里和教程中一样，使用 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed </a> Hexo 插件提供 RSS 订阅功能：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中新增以下配置：</p><pre class="line-numbers language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<br><code>hexo clean &amp;&amp; hexo g</code></p><p>重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚修改的配置文件在主题文件(即<code>themes/hexo-theme-matery</code>文件夹)的<br><code>/layout/_partial/footer.ejs</code>，包括站点、使用的主题、访问量等。</p><p>这里我对作者信息进行了一下修改，需要到 <code>_config.yml</code> 文件中找到 <code>author:</code> 然后改成自己的信息。之后别忘了</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有同步 <code>github</code> 哦</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>/<code>Github</code>和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;blinkfox&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;    &lt;i class&#x3D;&quot;fa fa-github&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：fa-github）你可以在 <a href="https://fontawesome.com/v5.15/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: fa-facebook</li><li>Twitter: fa-twitter</li><li>Google-plus: fa-google-plus</li><li>Linkedin: fa-linkedin</li><li>Tumblr: fa-tumblr</li><li>Medium: fa-medium</li><li>Slack: fa-slack</li><li>新浪微博: fa-weibo</li><li>微信: fa-wechat</li><li>QQ: fa-qq</li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选）"><a href="#配置音乐播放器（可选）" class="headerlink" title="配置音乐播放器（可选）"></a>配置音乐播放器（可选）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[&#123;    &quot;name&quot;: &quot;五月雨变奏电音&quot;,    &quot;artist&quot;: &quot;AnimeVibe&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music1.mp3&quot;,    &quot;cover&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music-cover1.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Take me hand&quot;,    &quot;artist&quot;: &quot;DAISHI DANCE,Cecile Corbel&quot;,    &quot;url&quot;: &quot;&#x2F;medias&#x2F;music&#x2F;music2.mp3&quot;,    &quot;cover&quot;: &quot;&#x2F;medias&#x2F;music&#x2F;cover2.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Shape of You&quot;,    &quot;artist&quot;: &quot;J.Fla&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music3.mp3&quot;,    &quot;cover&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music-cover3.png&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class="line-numbers language-none"><code class="language-none"># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为非必填的。但教程的作者仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th align="right">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td>title</td><td align="right">Markdown 的文件标题</td><td align="center">文章标题，<strong>强烈建议填写此选项</strong></td></tr><tr><td>date</td><td align="right">文件创建时的日期时间</td><td align="center">发布时间，<strong>强烈建议填写此选</strong>项，且最好保证<strong>全局唯一</strong></td></tr><tr><td>author</td><td align="right">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="center">文章作者</td></tr><tr><td>img</td><td align="right">featureImages 中的某个值</td><td align="center">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等，我自己使用的是 picgo + github )来做图片的路径. 如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td align="right">true</td><td align="center">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td align="right">false</td><td align="center">v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td align="right">无</td><td align="center">v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td align="right">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td align="right">true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td align="right">false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td align="right">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td align="right">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td align="right">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p>注意:</p></blockquote><blockquote><p>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 id 是通过 date 的值来作为唯一标识的。<br>如果要对文章设置阅读验证密码的功能，不仅要在 <code>Front-matter</code> 中设置采用了 SHA256 加密的 <code>password</code> 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="https://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</p></blockquote><p>以下为教程作者给出的示例：</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动添加文章头"><a href="#自动添加文章头" class="headerlink" title="自动添加文章头"></a>自动添加文章头</h3><p>这里参考 <a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a> 中所写，把 <code>/scaffolds/post.md</code> 修改为如下代码，这样创建新 <code>post</code> 的时候就不用手动填充，只需要修改对应信息了：</p><pre class="line-numbers language-none"><code class="language-none">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;top: falsecover: falsepassword:toc: truemathjax: truesummary:tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="20210605"><a href="#20210605" class="headerlink" title="20210605"></a>20210605</h1><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><h3 id="更多修改可能性"><a href="#更多修改可能性" class="headerlink" title="更多修改可能性"></a>更多修改可能性</h3><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #373B44 0%, #4286f4 100%);&#125;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，原教程中主题代码中是每天动态切换一张，只需 7 张即可。<br>这里我从自己照的照片找了 26 张出来，所以稍微做了一些更改：<br>找到 <code>banner</code> 切换的  <code>JavaScript</code> 代码位置 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-none"><code class="language-none">var num &#x3D; new Date().getSeconds() % 26;$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + num + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>/source/medias/featureimages</code> 文件夹中默认有 24 张图片，我也将其改为了 26 张图片，并在主题文件夹下的 <code>_config.yml</code> 的 <code>featureImages</code> 部分做同步修改。</p><h4 id="修改了主页的打字效果相关文字"><a href="#修改了主页的打字效果相关文字" class="headerlink" title="修改了主页的打字效果相关文字"></a>修改了主页的打字效果相关文字</h4><p>主题文件夹下的 <code>_config.yml</code> 中找到 <code>sutitle</code> 部分的 <code>sub</code> 部分可以对文字进行相应修改</p><h4 id="更改了-myGallery"><a href="#更改了-myGallery" class="headerlink" title="更改了 myGallery"></a>更改了 myGallery</h4><p><code>关于</code> 页面的 <code>我的相册</code> 部分可以展示图片，这里我也是把所有的图片都摆上来了：</p><pre class="line-numbers language-none"><code class="language-none">myGallery:  enable: true  data:    - &#x2F;medias&#x2F;featureimages&#x2F;0.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;1.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;2.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;3.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;4.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;5.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;6.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;7.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;8.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;9.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;10.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;11.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;12.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;13.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;14.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;15.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;16.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;17.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;18.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;19.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;20.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;21.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;22.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;23.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;24.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;25.jpg    - &#x2F;medias&#x2F;featureimages&#x2F;26.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其余更改"><a href="#其余更改" class="headerlink" title="其余更改"></a>其余更改</h4><ul><li>更改 favicon</li><li>更改 logo</li><li>更改 githubLink 为 false</li><li>更新 profile</li><li>把 my projects 和 my skills 暂时留空</li><li>更改了 根目录 <code>_config.yml</code> 文件中的 <code>description</code></li><li>因为出现了 <code>can not get /</code> 问题，所以暂时删掉了 contact 页面</li></ul><hr><h1 id="Todo：域名问题"><a href="#Todo：域名问题" class="headerlink" title="Todo：域名问题"></a>Todo：域名问题</h1><p>暂时先凑合用，后面再琢磨域名问题(￣▽￣)”</p><hr><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a></li><li><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></li><li><a href="https://github.com/hexojs/hexo/issues/1121">生成路径的问题，导致css，js无法加载 #1121</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog-building </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
